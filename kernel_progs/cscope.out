cscope 15 $HOME/Desktop/LDD_training/new/examples -q 0000001850 0000207539
	@include/lddbus.h

8 
bus_ty≥
 
ldd_bus_ty≥
;

15 
	sldd_drivî
 {

16 *
	mvîsi⁄
;

17 
moduÀ
 *
	mmoduÀ
;

18 
devi˚_drivî
 
	mdrivî
;

19 
drivî_©åibuã
 
	mvîsi⁄_©å
;

22 
	#to_ldd_drivî
(
drv
Ë
	`c⁄èöî_of
(drv, 
ldd_drivî
, 
drivî
);

	)

28 
	sldd_devi˚
 {

29 *
	m«me
;

30 
ldd_drivî
 *
	mdrivî
;

31 
devi˚
 
	mdev
;

34 
	#to_ldd_devi˚
(
dev
Ë
	`c⁄èöî_of
(dev, 
ldd_devi˚
, dev);

	)

36 
ªgi°î_ldd_devi˚
(
ldd_devi˚
 *);

37 
uƒegi°î_ldd_devi˚
(
ldd_devi˚
 *);

38 
ªgi°î_ldd_drivî
(
ldd_drivî
 *);

39 
uƒegi°î_ldd_drivî
(
ldd_drivî
 *);

	@lddbus/lddbus.c

19 
	~<löux/devi˚.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/kî√l.h
>

22 
	~<löux/öô.h
>

23 
	~<löux/°rög.h
>

24 
	~"lddbus.h
"

26 
MODULE_AUTHOR
("Jonathan Corbet");

27 
MODULE_LICENSE
("Dual BSD/GPL");

28 *
	gVîsi⁄
 = "$Revision: 1.9 $";

33 
	$ldd_hŸ∂ug
(
devi˚
 *
dev
, **
ívp
, 
num_ívp
,

34 *
buf„r
, 
buf„r_size
)

36 
ívp
[0] = 
buf„r
;

37 i‡(
	`¢¥ötf
(
buf„r
, 
buf„r_size
, "LDDBUS_VERSION=%s",

38 
Vîsi⁄
Ë>
buf„r_size
)

39  -
ENOMEM
;

40 
ívp
[1] = 
NULL
;

42 
	}
}

47 
	$ldd_m©ch
(
devi˚
 *
dev
, 
devi˚_drivî
 *
drivî
)

49  !
	`°∫cmp
(
dev
->
bus_id
, 
drivî
->
«me
, 
	`°æí
(driver->name));

50 
	}
}

56 
	$ldd_bus_ªÀa£
(
devi˚
 *
dev
)

58 
	`¥ötk
(
KERN_DEBUG
 "lddbusÑelease\n");

59 
	}
}

61 
devi˚
 
	gldd_bus
 = {

62 .
bus_id
 = "ldd0",

63 .
	gªÀa£
 = 
ldd_bus_ªÀa£


70 
bus_ty≥
 
	gldd_bus_ty≥
 = {

71 .
«me
 = "ldd",

72 .
	gm©ch
 = 
ldd_m©ch
,

73 .
	ghŸ∂ug
 = 
ldd_hŸ∂ug
,

79 
ssize_t
 
	$show_bus_vîsi⁄
(
bus_ty≥
 *
bus
, *
buf
)

81  
	`¢¥ötf
(
buf
, 
PAGE_SIZE
, "%s\n", 
Vîsi⁄
);

82 
	}
}

84 
BUS_ATTR
(
vîsi⁄
, 
S_IRUGO
, 
show_bus_vîsi⁄
, 
NULL
);

97 
	$ldd_dev_ªÀa£
(
devi˚
 *
dev
)

98 { 
	}
}

100 
	$ªgi°î_ldd_devi˚
(
ldd_devi˚
 *
ldddev
)

102 
ldddev
->
dev
.
bus
 = &
ldd_bus_ty≥
;

103 
ldddev
->
dev
.
∑ª¡
 = &
ldd_bus
;

104 
ldddev
->
dev
.
ªÀa£
 = 
ldd_dev_ªÀa£
;

105 
	`°∫˝y
(
ldddev
->
dev
.
bus_id
,Üdddev->
«me
, 
BUS_ID_SIZE
);

106  
	`devi˚_ªgi°î
(&
ldddev
->
dev
);

107 
	}
}

108 
EXPORT_SYMBOL
(
ªgi°î_ldd_devi˚
);

110 
	$uƒegi°î_ldd_devi˚
(
ldd_devi˚
 *
ldddev
)

112 
	`devi˚_uƒegi°î
(&
ldddev
->
dev
);

113 
	}
}

114 
EXPORT_SYMBOL
(
uƒegi°î_ldd_devi˚
);

121 
ssize_t
 
	$show_vîsi⁄
(
devi˚_drivî
 *
drivî
, *
buf
)

123 
ldd_drivî
 *
ldrivî
 = 
	`to_ldd_drivî
(
drivî
);

125 
	`•rötf
(
buf
, "%s\n", 
ldrivî
->
vîsi⁄
);

126  
	`°æí
(
buf
);

127 
	}
}

130 
	$ªgi°î_ldd_drivî
(
ldd_drivî
 *
drivî
)

132 
ªt
;

134 
drivî
->drivî.
bus
 = &
ldd_bus_ty≥
;

135 
ªt
 = 
	`drivî_ªgi°î
(&
drivî
->driver);

136 i‡(
ªt
)

137  
ªt
;

138 
drivî
->
vîsi⁄_©å
.
©å
.
«me
 = "version";

139 
drivî
->
vîsi⁄_©å
.
©å
.
ow√r
 = drivî->
moduÀ
;

140 
drivî
->
vîsi⁄_©å
.
©å
.
mode
 = 
S_IRUGO
;

141 
drivî
->
vîsi⁄_©å
.
show
 = 
show_vîsi⁄
;

142 
drivî
->
vîsi⁄_©å
.
°‹e
 = 
NULL
;

143  
	`drivî_¸óã_fûe
(&
drivî
->drivî, &drivî->
vîsi⁄_©å
);

144 
	}
}

146 
	$uƒegi°î_ldd_drivî
(
ldd_drivî
 *
drivî
)

148 
	`drivî_uƒegi°î
(&
drivî
->driver);

149 
	}
}

150 
EXPORT_SYMBOL
(
ªgi°î_ldd_drivî
);

151 
EXPORT_SYMBOL
(
uƒegi°î_ldd_drivî
);

155 
__öô
 
	$ldd_bus_öô
()

157 
ªt
;

159 
ªt
 = 
	`bus_ªgi°î
(&
ldd_bus_ty≥
);

160 i‡(
ªt
)

161  
ªt
;

162 i‡(
	`bus_¸óã_fûe
(&
ldd_bus_ty≥
, &
bus_©å_vîsi⁄
))

163 
	`¥ötk
(
KERN_NOTICE
 "UnableÅo create versionáttribute\n");

164 
ªt
 = 
	`devi˚_ªgi°î
(&
ldd_bus
);

165 i‡(
ªt
)

166 
	`¥ötk
(
KERN_NOTICE
 "UnableÅoÑegisterÜdd0\n");

167  
ªt
;

168 
	}
}

170 
	$ldd_bus_exô
()

172 
	`devi˚_uƒegi°î
(&
ldd_bus
);

173 
	`bus_uƒegi°î
(&
ldd_bus_ty≥
);

174 
	}
}

176 
moduÀ_öô
(
ldd_bus_öô
);

177 
moduÀ_exô
(
ldd_bus_exô
);

	@misc-modules/complete.c

18 
	~<löux/moduÀ.h
>

19 
	~<löux/öô.h
>

21 
	~<löux/sched.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/fs.h
>

24 
	~<löux/ty≥s.h
>

25 
	~<löux/com∂ëi⁄.h
>

27 
MODULE_LICENSE
("Dual BSD/GPL");

29 
	gcom∂ëe_maj‹
 = 0;

31 
DECLARE_COMPLETION
(
comp
);

33 
ssize_t
 
	$com∂ëe_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
)

35 
	`¥ötk
(
KERN_DEBUG
 "process %i (%s) goingÅo sleep\n",

36 
cuºít
->
pid
, cuºít->
comm
);

37 
	`waô_f‹_com∂ëi⁄
(&
comp
);

38 
	`¥ötk
(
KERN_DEBUG
 "awokí %ò(%s)\n", 
cuºít
->
pid
, cuºít->
comm
);

40 
	}
}

42 
ssize_t
 
	$com∂ëe_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

43 
loff_t
 *
pos
)

45 
	`¥ötk
(
KERN_DEBUG
 "process %i (%s)áwakeningÅheÑeaders...\n",

46 
cuºít
->
pid
, cuºít->
comm
);

47 
	`com∂ëe
(&
comp
);

48  
cou¡
;

49 
	}
}

52 
fûe_›î©i⁄s
 
	gcom∂ëe_f›s
 = {

53 .
ow√r
 = 
THIS_MODULE
,

54 .
	gªad
 = 
com∂ëe_ªad
,

55 .
	gwrôe
 = 
com∂ëe_wrôe
,

59 
	$com∂ëe_öô
()

61 
ªsu…
;

66 
ªsu…
 = 
	`ªgi°î_chrdev
(
com∂ëe_maj‹
, "com∂ëe", &
com∂ëe_f›s
);

67 i‡(
ªsu…
 < 0)

68  
ªsu…
;

69 i‡(
com∂ëe_maj‹
 == 0)

70 
com∂ëe_maj‹
 = 
ªsu…
;

72 
	}
}

74 
	$com∂ëe_˛ónup
()

76 
	`uƒegi°î_chrdev
(
com∂ëe_maj‹
, "complete");

77 
	}
}

79 
moduÀ_öô
(
com∂ëe_öô
);

80 
moduÀ_exô
(
com∂ëe_˛ónup
);

	@misc-modules/faulty.c

19 
	~<löux/c⁄fig.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/öô.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/fs.h
>

25 
	~<löux/ty≥s.h
>

26 
	~<asm/uac˚ss.h
>

28 
MODULE_LICENSE
("Dual BSD/GPL");

31 
	gÁu…y_maj‹
 = 0;

33 
ssize_t
 
	$Áu…y_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf
,

34 
size_t
 
cou¡
, 
loff_t
 *
pos
)

36 
ªt
;

37 
°ack_buf
[4];

40 
	`mem£t
(
°ack_buf
, 0xff, 20);

41 i‡(
cou¡
 > 4)

42 
cou¡
 = 4;

43 
ªt
 = 
	`c›y_to_u£r
(
buf
, 
°ack_buf
, 
cou¡
);

44 i‡(!
ªt
)

45  
cou¡
;

46  
ªt
;

47 
	}
}

49 
ssize_t
 
	$Áu…y_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

50 
loff_t
 *
pos
)

55 
	}
}

59 
fûe_›î©i⁄s
 
	gÁu…y_f›s
 = {

60 .
ªad
 = 
Áu…y_ªad
,

61 .
	gwrôe
 = 
Áu…y_wrôe
,

62 .
	gow√r
 = 
THIS_MODULE


66 
	$Áu…y_öô
()

68 
ªsu…
;

73 
ªsu…
 = 
	`ªgi°î_chrdev
(
Áu…y_maj‹
, "Áu…y", &
Áu…y_f›s
);

74 i‡(
ªsu…
 < 0)

75  
ªsu…
;

76 i‡(
Áu…y_maj‹
 == 0)

77 
Áu…y_maj‹
 = 
ªsu…
;

80 
	}
}

82 
	$Áu…y_˛ónup
()

84 
	`uƒegi°î_chrdev
(
Áu…y_maj‹
, "faulty");

85 
	}
}

87 
moduÀ_öô
(
Áu…y_öô
);

88 
moduÀ_exô
(
Áu…y_˛ónup
);

	@misc-modules/hello.c

4 
	~<löux/öô.h
>

5 
	~<löux/moduÀ.h
>

6 
MODULE_LICENSE
("Dual BSD/GPL");

8 
	$hñlo_öô
()

10 
	`¥ötk
(
KERN_ALERT
 "Hello, world\n");

12 
	}
}

14 
	$hñlo_exô
()

16 
	`¥ötk
(
KERN_ALERT
 "Goodbye, cruel world\n");

17 
	}
}

19 
moduÀ_öô
(
hñlo_öô
);

20 
moduÀ_exô
(
hñlo_exô
);

	@misc-modules/hellop.c

4 
	~<löux/öô.h
>

5 
	~<löux/moduÀ.h
>

6 
	~<löux/moduÀ∑øm.h
>

8 
MODULE_LICENSE
("Dual BSD/GPL");

21 *
	gwhom
 = "world";

22 
	ghowm™y
 = 1;

23 
moduÀ_∑øm
(
howm™y
, , 
S_IRUGO
);

24 
moduÀ_∑øm
(
whom
, 
ch¨p
, 
S_IRUGO
);

26 
	$hñlo_öô
()

28 
i
;

29 
i
 = 0; i < 
howm™y
; i++)

30 
	`¥ötk
(
KERN_ALERT
 "(%dËHñlo, %s\n", 
i
, 
whom
);

32 
	}
}

34 
	$hñlo_exô
()

36 
	`¥ötk
(
KERN_ALERT
 "Goodbye, cruel world\n");

37 
	}
}

39 
moduÀ_öô
(
hñlo_öô
);

40 
moduÀ_exô
(
hñlo_exô
);

	@misc-modules/jiq.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/moduÀ∑øm.h
>

21 
	~<löux/öô.h
>

23 
	~<löux/sched.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/fs.h
>

26 
	~<löux/¥oc_fs.h
>

27 
	~<löux/î∫o.h
>

28 
	~<löux/w‹kqueue.h
>

29 
	~<löux/¥ìm±.h
>

30 
	~<löux/öãºu±.h
>

32 
MODULE_LICENSE
("Dual BSD/GPL");

37 
	gdñay
 = 1;

38 
moduÀ_∑øm
(
dñay
, , 0);

46 
	#LIMIT
 (
PAGE_SIZE
-128Ë

	)

53 
DECLARE_WAIT_QUEUE_HEAD
 (
jiq_waô
);

56 
w‹k_°ru˘
 
	gjiq_w‹k
;

63 
	s˛õ¡d©a
 {

64 
	mÀn
;

65 *
	mbuf
;

66 
	mjiffõs
;

67 
	mdñay
;

68 } 
	gjiq_d©a
;

70 
	#SCHEDULER_QUEUE
 ((
èsk_queue
 *Ë1)

	)

74 
jiq_¥öt_èskÀt
();

75 
DECLARE_TASKLET
(
jiq_èskÀt
, 
jiq_¥öt_èskÀt
, ()&
jiq_d©a
);

81 
	$jiq_¥öt
(*
±r
)

83 
˛õ¡d©a
 *
d©a
 = 
±r
;

84 
Àn
 = 
d©a
->len;

85 *
buf
 = 
d©a
->buf;

86 
j
 = 
jiffõs
;

88 i‡(
Àn
 > 
LIMIT
) {

89 
	`wake_up_öãºu±ibÀ
(&
jiq_waô
);

93 i‡(
Àn
 == 0)

94 
Àn
 = 
	`•rötf
(
buf
,"Åime deltaÖreemptÖid cpu command\n");

96 
Àn
 =0;

99 
Àn
 +
	`•rötf
(
buf
+len, "%9li %4li %3i %5i %3i %s\n",

100 
j
, j - 
d©a
->
jiffõs
,

101 
	`¥ìm±_cou¡
(), 
cuºít
->
pid
, 
	`smp_¥o˚ss‹_id
(),

102 
cuºít
->
comm
);

104 
d©a
->
Àn
 +=Üen;

105 
d©a
->
buf
 +
Àn
;

106 
d©a
->
jiffõs
 = 
j
;

108 
	}
}

114 
	$jiq_¥öt_wq
(*
±r
)

116 
˛õ¡d©a
 *
d©a
 = (˛õ¡d©®*Ë
±r
;

118 i‡(! 
	`jiq_¥öt
 (
±r
))

121 i‡(
d©a
->
dñay
)

122 
	`scheduÀ_dñayed_w‹k
(&
jiq_w‹k
, 
d©a
->
dñay
);

124 
	`scheduÀ_w‹k
(&
jiq_w‹k
);

125 
	}
}

129 
	$jiq_ªad_wq
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

130 
Àn
, *
eof
, *
d©a
)

132 
	`DEFINE_WAIT
(
waô
);

134 
jiq_d©a
.
Àn
 = 0;

135 
jiq_d©a
.
buf
 = buf;

136 
jiq_d©a
.
jiffõs
 = jiffies;

137 
jiq_d©a
.
dñay
 = 0;

139 
	`¥ï¨e_to_waô
(&
jiq_waô
, &
waô
, 
TASK_INTERRUPTIBLE
);

140 
	`scheduÀ_w‹k
(&
jiq_w‹k
);

141 
	`scheduÀ
();

142 
	`föish_waô
(&
jiq_waô
, &
waô
);

144 *
eof
 = 1;

145  
jiq_d©a
.
Àn
;

146 
	}
}

149 
	$jiq_ªad_wq_dñayed
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

150 
Àn
, *
eof
, *
d©a
)

152 
	`DEFINE_WAIT
(
waô
);

154 
jiq_d©a
.
Àn
 = 0;

155 
jiq_d©a
.
buf
 = buf;

156 
jiq_d©a
.
jiffõs
 = jiffies;

157 
jiq_d©a
.
dñay
 = delay;

159 
	`¥ï¨e_to_waô
(&
jiq_waô
, &
waô
, 
TASK_INTERRUPTIBLE
);

160 
	`scheduÀ_dñayed_w‹k
(&
jiq_w‹k
, 
dñay
);

161 
	`scheduÀ
();

162 
	`föish_waô
(&
jiq_waô
, &
waô
);

164 *
eof
 = 1;

165  
jiq_d©a
.
Àn
;

166 
	}
}

174 
	$jiq_¥öt_èskÀt
(
±r
)

176 i‡(
	`jiq_¥öt
 ((*Ë
±r
))

177 
	`èskÀt_scheduÀ
 (&
jiq_èskÀt
);

178 
	}
}

182 
	$jiq_ªad_èskÀt
(*
buf
, **
°¨t
, 
off_t
 
off£t
, 
Àn
,

183 *
eof
, *
d©a
)

185 
jiq_d©a
.
Àn
 = 0;

186 
jiq_d©a
.
buf
 = buf;

187 
jiq_d©a
.
jiffõs
 = jiffies;

189 
	`èskÀt_scheduÀ
(&
jiq_èskÀt
);

190 
	`öãºu±ibÀ_¶ìp_⁄
(&
jiq_waô
);

192 *
eof
 = 1;

193  
jiq_d©a
.
Àn
;

194 
	}
}

203 
timî_li°
 
	gjiq_timî
;

205 
	$jiq_timedout
(
±r
)

207 
	`jiq_¥öt
((*)
±r
);

208 
	`wake_up_öãºu±ibÀ
(&
jiq_waô
);

209 
	}
}

212 
	$jiq_ªad_run_timî
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

213 
Àn
, *
eof
, *
d©a
)

216 
jiq_d©a
.
Àn
 = 0;

217 
jiq_d©a
.
buf
 = buf;

218 
jiq_d©a
.
jiffõs
 = jiffies;

220 
	`öô_timî
(&
jiq_timî
);

221 
jiq_timî
.
fun˘i⁄
 = 
jiq_timedout
;

222 
jiq_timî
.
d©a
 = ()&
jiq_d©a
;

223 
jiq_timî
.
expúes
 = 
jiffõs
 + 
HZ
;

225 
	`jiq_¥öt
(&
jiq_d©a
);

226 
	`add_timî
(&
jiq_timî
);

227 
	`öãºu±ibÀ_¶ìp_⁄
(&
jiq_waô
);

228 
	`dñ_timî_sync
(&
jiq_timî
);

230 *
eof
 = 1;

231  
jiq_d©a
.
Àn
;

232 
	}
}

240 
	$jiq_öô
()

244 
	`INIT_WORK
(&
jiq_w‹k
, 
jiq_¥öt_wq
, &
jiq_d©a
);

246 
	`¸óã_¥oc_ªad_íåy
("jiqwq", 0, 
NULL
, 
jiq_ªad_wq
, NULL);

247 
	`¸óã_¥oc_ªad_íåy
("jiqwqdñay", 0, 
NULL
, 
jiq_ªad_wq_dñayed
, NULL);

248 
	`¸óã_¥oc_ªad_íåy
("jôimî", 0, 
NULL
, 
jiq_ªad_run_timî
, NULL);

249 
	`¸óã_¥oc_ªad_íåy
("jiqèskÀt", 0, 
NULL
, 
jiq_ªad_èskÀt
, NULL);

252 
	}
}

254 
	$jiq_˛ónup
()

256 
	`ªmove_¥oc_íåy
("jiqwq", 
NULL
);

257 
	`ªmove_¥oc_íåy
("jiqwqdñay", 
NULL
);

258 
	`ªmove_¥oc_íåy
("jôimî", 
NULL
);

259 
	`ªmove_¥oc_íåy
("jiqèskÀt", 
NULL
);

260 
	}
}

263 
moduÀ_öô
(
jiq_öô
);

264 
moduÀ_exô
(
jiq_˛ónup
);

	@misc-modules/jit.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/moduÀ∑øm.h
>

21 
	~<löux/öô.h
>

23 
	~<löux/time.h
>

24 
	~<löux/timî.h
>

25 
	~<löux/kî√l.h
>

26 
	~<löux/¥oc_fs.h
>

27 
	~<löux/ty≥s.h
>

28 
	~<löux/•ölock.h
>

29 
	~<löux/öãºu±.h
>

31 
	~<asm/h¨dúq.h
>

37 
	gdñay
 = 
HZ
;

39 
moduÀ_∑øm
(
dñay
, , 0);

41 
MODULE_AUTHOR
("Alessandro Rubini");

42 
MODULE_LICENSE
("Dual BSD/GPL");

45 
	ejô_fûes
 {

46 
	mJIT_BUSY
,

47 
	mJIT_SCHED
,

48 
	mJIT_QUEUE
,

49 
	mJIT_SCHEDTO


56 
	$jô_‚
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

57 
Àn
, *
eof
, *
d©a
)

59 
j0
, 
j1
;

60 
waô_queue_hód_t
 
waô
;

62 
	`öô_waôqueue_hód
 (&
waô
);

63 
j0
 = 
jiffõs
;

64 
j1
 = 
j0
 + 
dñay
;

66 ()
d©a
) {

67 
JIT_BUSY
:

68 
	`time_bef‹e
(
jiffõs
, 
j1
))

69 
	`˝u_ªœx
();

71 
JIT_SCHED
:

72 
	`time_bef‹e
(
jiffõs
, 
j1
)) {

73 
	`scheduÀ
();

76 
JIT_QUEUE
:

77 
	`waô_evít_öãºu±ibÀ_timeout
(
waô
, 0, 
dñay
);

79 
JIT_SCHEDTO
:

80 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

81 
	`scheduÀ_timeout
 (
dñay
);

84 
j1
 = 
jiffõs
;

86 
Àn
 = 
	`•rötf
(
buf
, "%9lò%9li\n", 
j0
, 
j1
);

87 *
°¨t
 = 
buf
;

88  
Àn
;

89 
	}
}

94 
	$jô_cuºítime
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

95 
Àn
, *
eof
, *
d©a
)

97 
timevÆ
 
tv1
;

98 
time•ec
 
tv2
;

99 
j1
;

100 
u64
 
j2
;

103 
j1
 = 
jiffõs
;

104 
j2
 = 
	`gë_jiffõs_64
();

105 
	`do_gëtimeofday
(&
tv1
);

106 
tv2
 = 
	`cuºít_kî√l_time
();

109 
Àn
=0;

110 
Àn
 +
	`•rötf
(
buf
,"0x%08lx 0x%016Lx %10i.%06i\n"

112 
j1
, 
j2
,

113 (Ë
tv1
.
tv_£c
, (Ëtv1.
tv_u£c
,

114 (Ë
tv2
.
tv_£c
, (Ëtv2.
tv_n£c
);

115 *
°¨t
 = 
buf
;

116  
Àn
;

117 
	}
}

123 
	gtdñay
 = 10;

124 
moduÀ_∑øm
(
tdñay
, , 0);

127 
	sjô_d©a
 {

128 
timî_li°
 
	mtimî
;

129 
èskÀt_°ru˘
 
	méë
;

130 
	mhi
;

131 
waô_queue_hód_t
 
	mwaô
;

132 
	m¥evjiffõs
;

133 *
	mbuf
;

134 
	mlo›s
;

136 
	#JIT_ASYNC_LOOPS
 5

	)

138 
	$jô_timî_‚
(
¨g
)

140 
jô_d©a
 *
d©a
 = (jô_d©®*)
¨g
;

141 
j
 = 
jiffõs
;

142 
d©a
->
buf
 +
	`•rötf
(data->buf, "%9li %3li %i %6i %i %s\n",

143 
j
, j - 
d©a
->
¥evjiffõs
, 
	`ö_öãºu±
() ? 1 : 0,

144 
cuºít
->
pid
, 
	`smp_¥o˚ss‹_id
(), cuºít->
comm
);

146 i‡(--
d©a
->
lo›s
) {

147 
d©a
->
timî
.
expúes
 +
tdñay
;

148 
d©a
->
¥evjiffõs
 = 
j
;

149 
	`add_timî
(&
d©a
->
timî
);

151 
	`wake_up_öãºu±ibÀ
(&
d©a
->
waô
);

153 
	}
}

156 
	$jô_timî
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

157 
Àn
, *
eof
, *
unu£d_d©a
)

159 
jô_d©a
 *
d©a
;

160 *
buf2
 = 
buf
;

161 
j
 = 
jiffõs
;

163 
d©a
 = 
	`kmÆloc
((*d©a), 
GFP_KERNEL
);

164 i‡(!
d©a
)

165  -
ENOMEM
;

167 
	`öô_timî
(&
d©a
->
timî
);

168 
	`öô_waôqueue_hód
 (&
d©a
->
waô
);

171 
buf2
 +
	`•rötf
(buf2, "Åime delta inirqÖid cpu command\n");

172 
buf2
 +
	`•rötf
(buf2, "%9li %3li %i %6i %i %s\n",

173 
j
, 0L, 
	`ö_öãºu±
() ? 1 : 0,

174 
cuºít
->
pid
, 
	`smp_¥o˚ss‹_id
(), cuºít->
comm
);

177 
d©a
->
¥evjiffõs
 = 
j
;

178 
d©a
->
buf
 = 
buf2
;

179 
d©a
->
lo›s
 = 
JIT_ASYNC_LOOPS
;

182 
d©a
->
timî
.data = ()data;

183 
d©a
->
timî
.
fun˘i⁄
 = 
jô_timî_‚
;

184 
d©a
->
timî
.
expúes
 = 
j
 + 
tdñay
;

185 
	`add_timî
(&
d©a
->
timî
);

188 
	`waô_evít_öãºu±ibÀ
(
d©a
->
waô
, !d©a->
lo›s
);

189 i‡(
	`sig«l_≥ndög
(
cuºít
))

190  -
ERESTARTSYS
;

191 
buf2
 = 
d©a
->
buf
;

192 
	`k‰ì
(
d©a
);

193 *
eof
 = 1;

194  
buf2
 - 
buf
;

195 
	}
}

197 
	$jô_èskÀt_‚
(
¨g
)

199 
jô_d©a
 *
d©a
 = (jô_d©®*)
¨g
;

200 
j
 = 
jiffõs
;

201 
d©a
->
buf
 +
	`•rötf
(data->buf, "%9li %3li %i %6i %i %s\n",

202 
j
, j - 
d©a
->
¥evjiffõs
, 
	`ö_öãºu±
() ? 1 : 0,

203 
cuºít
->
pid
, 
	`smp_¥o˚ss‹_id
(), cuºít->
comm
);

205 i‡(--
d©a
->
lo›s
) {

206 
d©a
->
¥evjiffõs
 = 
j
;

207 i‡(
d©a
->
hi
)

208 
	`èskÀt_hi_scheduÀ
(&
d©a
->
éë
);

210 
	`èskÀt_scheduÀ
(&
d©a
->
éë
);

212 
	`wake_up_öãºu±ibÀ
(&
d©a
->
waô
);

214 
	}
}

217 
	$jô_èskÀt
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

218 
Àn
, *
eof
, *
¨g
)

220 
jô_d©a
 *
d©a
;

221 *
buf2
 = 
buf
;

222 
j
 = 
jiffõs
;

223 
hi
 = ()
¨g
;

225 
d©a
 = 
	`kmÆloc
((*d©a), 
GFP_KERNEL
);

226 i‡(!
d©a
)

227  -
ENOMEM
;

229 
	`öô_waôqueue_hód
 (&
d©a
->
waô
);

232 
buf2
 +
	`•rötf
(buf2, "Åime delta inirqÖid cpu command\n");

233 
buf2
 +
	`•rötf
(buf2, "%9li %3li %i %6i %i %s\n",

234 
j
, 0L, 
	`ö_öãºu±
() ? 1 : 0,

235 
cuºít
->
pid
, 
	`smp_¥o˚ss‹_id
(), cuºít->
comm
);

238 
d©a
->
¥evjiffõs
 = 
j
;

239 
d©a
->
buf
 = 
buf2
;

240 
d©a
->
lo›s
 = 
JIT_ASYNC_LOOPS
;

243 
	`èskÀt_öô
(&
d©a
->
éë
, 
jô_èskÀt_‚
, ()data);

244 
d©a
->
hi
 = hi;

245 i‡(
hi
)

246 
	`èskÀt_hi_scheduÀ
(&
d©a
->
éë
);

248 
	`èskÀt_scheduÀ
(&
d©a
->
éë
);

251 
	`waô_evít_öãºu±ibÀ
(
d©a
->
waô
, !d©a->
lo›s
);

253 i‡(
	`sig«l_≥ndög
(
cuºít
))

254  -
ERESTARTSYS
;

255 
buf2
 = 
d©a
->
buf
;

256 
	`k‰ì
(
d©a
);

257 *
eof
 = 1;

258  
buf2
 - 
buf
;

259 
	}
}

263 
__öô
 
	$jô_öô
()

265 
	`¸óã_¥oc_ªad_íåy
("cuºítime", 0, 
NULL
, 
jô_cuºítime
, NULL);

266 
	`¸óã_¥oc_ªad_íåy
("jôbusy", 0, 
NULL
, 
jô_‚
, (*)
JIT_BUSY
);

267 
	`¸óã_¥oc_ªad_íåy
("jôsched",0, 
NULL
, 
jô_‚
, (*)
JIT_SCHED
);

268 
	`¸óã_¥oc_ªad_íåy
("jôqueue",0, 
NULL
, 
jô_‚
, (*)
JIT_QUEUE
);

269 
	`¸óã_¥oc_ªad_íåy
("jôschedto", 0, 
NULL
, 
jô_‚
, (*)
JIT_SCHEDTO
);

271 
	`¸óã_¥oc_ªad_íåy
("jôimî", 0, 
NULL
, 
jô_timî
, NULL);

272 
	`¸óã_¥oc_ªad_íåy
("jôaskÀt", 0, 
NULL
, 
jô_èskÀt
, NULL);

273 
	`¸óã_¥oc_ªad_íåy
("jôaskÀthi", 0, 
NULL
, 
jô_èskÀt
, (*)1);

276 
	}
}

278 
__exô
 
	$jô_˛ónup
()

280 
	`ªmove_¥oc_íåy
("cuºítime", 
NULL
);

281 
	`ªmove_¥oc_íåy
("jôbusy", 
NULL
);

282 
	`ªmove_¥oc_íåy
("jôsched", 
NULL
);

283 
	`ªmove_¥oc_íåy
("jôqueue", 
NULL
);

284 
	`ªmove_¥oc_íåy
("jôschedto", 
NULL
);

286 
	`ªmove_¥oc_íåy
("jôimî", 
NULL
);

287 
	`ªmove_¥oc_íåy
("jôaskÀt", 
NULL
);

288 
	`ªmove_¥oc_íåy
("jôaskÀthi", 
NULL
);

289 
	}
}

291 
moduÀ_öô
(
jô_öô
);

292 
moduÀ_exô
(
jô_˛ónup
);

	@misc-modules/kdataalign.c

17 
	~<löux/c⁄fig.h
>

18 
	~<löux/moduÀ.h
>

19 
	~<löux/kî√l.h
>

20 
	~<löux/ty≥s.h
>

21 
	~<löux/ut¢ame.h
>

22 
	~<löux/î∫o.h
>

28 
	sc
 {
	mc
; 
	mt
;} 
	gc
;

29 
	ss
 {
	mc
; 
	mt
;} 
	gs
;

30 
	si
 {
	mc
; 
	mt
;} 
	gi
;

31 
	sl
 {
	mc
; 
	mt
;} 
	gl
;

32 
	sŒ
 {
	mc
; 
	mt
;} 
	gŒ
;

33 
	sp
 {
	mc
; * 
	mt
;} 
	gp
;

34 
	su1b
 {
	mc
; 
__u8
 
	mt
;} 
	gu1b
;

35 
	su2b
 {
	mc
; 
__u16
 
	mt
;} 
	gu2b
;

36 
	su4b
 {
	mc
; 
__u32
 
	mt
;} 
	gu4b
;

37 
	su8b
 {
	mc
; 
__u64
 
	mt
;} 
	gu8b
;

39 
	$d©a_˛ónup
()

42 
	}
}

44 
	$d©a_öô
()

47 
	`¥ötk
("arch Align: char short intÜongÖtrÜong-long "

49 
	`¥ötk
("%-12s %3i %3i %3i %3i %3i %3i "

51 
sy°em_ut¢ame
.
machöe
,

53 ()((*)(&
c
.
t
) - (*)&c),

54 ()((*)(&
s
.
t
) - (*)&s),

55 ()((*)(&
i
.
t
) - (*)&i),

56 ()((*)(&
l
.
t
) - (*)&l),

57 ()((*)(&
p
.
t
) - (*)&p),

58 ()((*)(&
Œ
.
t
) - (*)&ll),

59 ()((*)(&
u1b
.
t
) - (*)&u1b),

60 ()((*)(&
u2b
.
t
) - (*)&u2b),

61 ()((*)(&
u4b
.
t
) - (*)&u4b),

62 ()((*)(&
u8b
.
t
) - (*)&u8b));

63  -
ENODEV
;

64 
	}
}

66 
moduÀ_öô
(
d©a_öô
);

67 
moduÀ_exô
(
d©a_˛ónup
);

69 
MODULE_LICENSE
("Dual BSD/GPL");

	@misc-modules/kdatasize.c

17 
	~<löux/c⁄fig.h
>

18 
	~<löux/moduÀ.h
>

20 
	~<löux/kî√l.h
>

21 
	~<löux/ty≥s.h
>

22 
	~<löux/ut¢ame.h
>

23 
	~<löux/î∫o.h
>

25 
	$d©a_˛ónup
()

28 
	}
}

30 
	$d©a_öô
()

33 
	`¥ötk
("arch Size: char short intÜongÖtrÜong-long "

35 
	`¥ötk
("%-12s %3i %3i %3i %3i %3i %3i "

37 
sy°em_ut¢ame
.
machöe
,

40 ()(*), ()(), ()(
__u8
),

41 ()(
__u16
), ()(
__u32
), ()(
__u64
));

42  -
ENODEV
;

43 
	}
}

45 
moduÀ_öô
(
d©a_öô
);

46 
moduÀ_exô
(
d©a_˛ónup
);

48 
MODULE_LICENSE
("Dual BSD/GPL");

	@misc-modules/seq.c

7 
	~<löux/öô.h
>

8 
	~<löux/moduÀ.h
>

9 
	~<löux/¥oc_fs.h
>

10 
	~<löux/fs.h
>

11 
	~<löux/£q_fûe.h
>

12 
	~<löux/¶ab.h
>

15 
MODULE_AUTHOR
("Jonathan Corbet");

16 
MODULE_LICENSE
("Dual BSD/GPL");

24 *
	$˘_£q_°¨t
(
£q_fûe
 *
s
, 
loff_t
 *
pos
)

26 
loff_t
 *
•os
 = 
	`kmÆloc
(÷off_t), 
GFP_KERNEL
);

27 i‡(!
•os
)

28  
NULL
;

29 *
•os
 = *
pos
;

30  
•os
;

31 
	}
}

33 *
	$˘_£q_√xt
(
£q_fûe
 *
s
, *
v
, 
loff_t
 *
pos
)

35 
loff_t
 *
•os
 = (loff_à*Ë
v
;

36 *
pos
 = ++(*
•os
);

37  
•os
;

38 
	}
}

40 
	$˘_£q_°›
(
£q_fûe
 *
s
, *
v
)

42 
	`k‰ì
 (
v
);

43 
	}
}

48 
	$˘_£q_show
(
£q_fûe
 *
s
, *
v
)

50 
loff_t
 *
•os
 = (loff_à*Ë
v
;

51 
	`£q_¥ötf
(
s
, "%Ld\n", *
•os
);

53 
	}
}

58 
£q_›î©i⁄s
 
	g˘_£q_›s
 = {

59 .
°¨t
 = 
˘_£q_°¨t
,

60 .
	g√xt
 = 
˘_£q_√xt
,

61 .
	g°›
 = 
˘_£q_°›
,

62 .
	gshow
 = 
˘_£q_show


71 
	$˘_›í
(
öode
 *öode, 
fûe
 *file)

73  
	`£q_›í
(
fûe
, &
˘_£q_›s
);

74 
	}
};

80 
fûe_›î©i⁄s
 
	g˘_fûe_›s
 = {

81 .
ow√r
 = 
THIS_MODULE
,

82 .
	g›í
 = 
˘_›í
,

83 .
	gªad
 = 
£q_ªad
,

84 .
	gŒ£ek
 = 
£q_l£ek
,

85 .
	gªÀa£
 = 
£q_ªÀa£


93 
	$˘_öô
()

95 
¥oc_dú_íåy
 *
íåy
;

97 
íåy
 = 
	`¸óã_¥oc_íåy
("£quí˚", 0, 
NULL
);

98 i‡(
íåy
)

99 
íåy
->
¥oc_f›s
 = &
˘_fûe_›s
;

101 
	}
}

103 
	$˘_exô
()

105 
	`ªmove_¥oc_íåy
("£quí˚", 
NULL
);

106 
	}
}

108 
moduÀ_öô
(
˘_öô
);

109 
moduÀ_exô
(
˘_exô
);

	@misc-modules/silly.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/öô.h
>

25 
	~<löux/moduÀ∑øm.h
>

26 
	~<löux/vîsi⁄.h
>

28 
	~<löux/sched.h
>

29 
	~<löux/kî√l.h
>

30 
	~<löux/fs.h
>

31 
	~<löux/î∫o.h
>

32 
	~<löux/¶ab.h
>

33 
	~<löux/mm.h
>

34 
	~<löux/i›‹t.h
>

35 
	~<löux/pﬁl.h
>

37 
	~<asm/io.h
>

38 
	~<asm/uac˚ss.h
>

40 
	gsûly_maj‹
 = 0;

41 
moduÀ_∑øm
(
sûly_maj‹
, , 0);

42 
MODULE_AUTHOR
("Alessandro Rubini");

43 
MODULE_LICENSE
("Dual BSD/GPL");

56 
	#ISA_BASE
 0xA0000

	)

57 
	#ISA_MAX
 0x100000

	)

59 
	#VIDEO_MAX
 0xC0000

	)

60 
	#VGA_BASE
 0xb8000

	)

61 
__iomem
 *
	gio_ba£
;

65 
	$sûly_›í
(
öode
 *öode, 
fûe
 *
fûp
)

68 
	}
}

70 
	$sûly_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

73 
	}
}

75 
	esûly_modes
 {
	mM_8
=0, 
	mM_16
, 
	mM_32
, 
	mM_mem˝y
};

77 
ssize_t
 
	$sûly_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
f_pos
)

79 
ªtvÆ
;

80 
mode
 = 
	`imö‹
(
fûp
->
f_díåy
->
d_öode
);

81 
__iomem
 *
add
;

82 
iß_addr
 = 
ISA_BASE
 + *
f_pos
;

83 *
kbuf
, *
±r
;

85 i‡(
iß_addr
 + 
cou¡
 > 
ISA_MAX
)

86 
cou¡
 = 
ISA_MAX
 - 
iß_addr
;

92 i‡(
cou¡
 < 0)

95 
kbuf
 = 
	`kmÆloc
(
cou¡
, 
GFP_KERNEL
);

96 i‡(!
kbuf
)

97  -
ENOMEM
;

98 
±r
 = 
kbuf
;

99 
ªtvÆ
 = 
cou¡
;

103 
add
 = (
__iomem
 *)(
io_ba£
 + (
iß_addr
 - 
ISA_BASE
));

110 i‡(
mode
 =
M_32
 && ((
iß_addr
 | 
cou¡
) & 3))

111 
mode
 = 
M_16
;

112 i‡(
mode
 =
M_16
 && ((
iß_addr
 | 
cou¡
) & 1))

113 
mode
 = 
M_8
;

115 
mode
) {

116 
M_32
:

117 
cou¡
 >= 4) {

118 *(
u32
 *)
±r
 = 
	`i‹ód32
(
add
);

119 
add
 += 4;

120 
cou¡
 -= 4;

121 
±r
 += 4;

125 
M_16
:

126 
cou¡
 >= 2) {

127 *(
u16
 *)
±r
 = 
	`i‹ód16
(
add
);

128 
add
+=2;

129 
cou¡
-=2;

130 
±r
+=2;

134 
M_8
:

135 
cou¡
) {

136 *
±r
 = 
	`i‹ód8
(
add
);

137 
add
++;

138 
cou¡
--;

139 
±r
++;

143 
M_mem˝y
:

144 
	`mem˝y_‰omio
(
±r
, 
add
, 
cou¡
);

148  -
EINVAL
;

150 i‡((
ªtvÆ
 > 0Ë&& 
	`c›y_to_u£r
(
buf
, 
kbuf
,Ñetval))

151 
ªtvÆ
 = -
EFAULT
;

152 
	`k‰ì
(
kbuf
);

153 *
f_pos
 +
ªtvÆ
;

154  
ªtvÆ
;

155 
	}
}

158 
ssize_t
 
	$sûly_wrôe
(
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

159 
loff_t
 *
f_pos
)

161 
ªtvÆ
;

162 
mode
 = 
	`imö‹
(
fûp
->
f_díåy
->
d_öode
);

163 
iß_addr
 = 
ISA_BASE
 + *
f_pos
;

164 *
kbuf
, *
±r
;

165 
__iomem
 *
add
;

171 i‡(!
	`ˇ∑bÀ
(
CAP_SYS_RAWIO
))

172  -
EPERM
;

174 i‡(
iß_addr
 + 
cou¡
 > 
ISA_MAX
)

175 
cou¡
 = 
ISA_MAX
 - 
iß_addr
;

181 i‡(
cou¡
 < 0)

184 
kbuf
 = 
	`kmÆloc
(
cou¡
, 
GFP_KERNEL
);

185 i‡(!
kbuf
)

186  -
ENOMEM
;

187 
±r
 = 
kbuf
;

188 
ªtvÆ
=
cou¡
;

196 i‡(
mode
 =
M_32
 && ((
iß_addr
 | 
cou¡
) & 3))

197 
mode
 = 
M_16
;

198 i‡(
mode
 =
M_16
 && ((
iß_addr
 | 
cou¡
) & 1))

199 
mode
 = 
M_8
;

201 i‡(
	`c›y_‰om_u£r
(
kbuf
, 
buf
, 
cou¡
)) {

202 
	`k‰ì
(
kbuf
);

203  -
EFAULT
;

205 
±r
 = 
kbuf
;

210 
add
 = (
__iomem
 *)(
io_ba£
 + (
iß_addr
 - 
ISA_BASE
));

212 
mode
) {

213 
M_32
:

214 
cou¡
 >= 4) {

215 
	`iowrôe8
(*(
u32
 *)
±r
, 
add
);

216 
add
 += 4;

217 
cou¡
 -= 4;

218 
±r
 += 4;

222 
M_16
:

223 
cou¡
 >= 2) {

224 
	`iowrôe8
(*(
u16
 *)
±r
, 
add
);

225 
add
 += 2;

226 
cou¡
 -= 2;

227 
±r
 += 2;

231 
M_8
:

232 
cou¡
) {

233 
	`iowrôe8
(*
±r
, 
add
);

234 
add
++;

235 
cou¡
--;

236 
±r
++;

240 
M_mem˝y
:

241 
	`mem˝y_toio
(
add
, 
±r
, 
cou¡
);

245  -
EINVAL
;

247 *
f_pos
 +
ªtvÆ
;

248 
	`k‰ì
(
kbuf
);

249  
ªtvÆ
;

250 
	}
}

253 
	$sûly_pﬁl
(
fûe
 *
fûp
, 
pﬁl_èbÀ
 *
waô
)

255  
POLLIN
 | 
POLLRDNORM
 | 
POLLOUT
 | 
POLLWRNORM
;

256 
	}
}

259 
fûe_›î©i⁄s
 
	gsûly_f›s
 = {

260 .
ªad
 = 
sûly_ªad
,

261 .
	gwrôe
 = 
sûly_wrôe
,

262 .
	gpﬁl
 = 
sûly_pﬁl
,

263 .
	g›í
 = 
sûly_›í
,

264 .
	gªÀa£
 = 
sûly_ªÀa£
,

265 .
	gow√r
 = 
THIS_MODULE


268 
	$sûly_öô
()

270 
ªsu…
 = 
	`ªgi°î_chrdev
(
sûly_maj‹
, "sûly", &
sûly_f›s
);

271 i‡(
ªsu…
 < 0) {

272 
	`¥ötk
(
KERN_INFO
 "silly: can't get majorÇumber\n");

273  
ªsu…
;

275 i‡(
sûly_maj‹
 == 0)

276 
sûly_maj‹
 = 
ªsu…
;

282 
io_ba£
 = 
	`i‹em≠
(
ISA_BASE
, 
ISA_MAX
 - ISA_BASE);

284 
	}
}

286 
	$sûly_˛ónup
()

288 
	`iounm≠
(
io_ba£
);

289 
	`uƒegi°î_chrdev
(
sûly_maj‹
, "silly");

290 
	}
}

293 
moduÀ_öô
(
sûly_öô
);

294 
moduÀ_exô
(
sûly_˛ónup
);

	@misc-modules/sleepy.c

18 
	~<löux/moduÀ.h
>

19 
	~<löux/öô.h
>

21 
	~<löux/sched.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/fs.h
>

24 
	~<löux/ty≥s.h
>

25 
	~<löux/waô.h
>

27 
MODULE_LICENSE
("Dual BSD/GPL");

29 
	g¶ìpy_maj‹
 = 0;

31 
DECLARE_WAIT_QUEUE_HEAD
(
wq
);

32 
	gÊag
 = 0;

34 
ssize_t
 
	$¶ìpy_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
)

36 
	`¥ötk
(
KERN_DEBUG
 "process %i (%s) goingÅo sleep\n",

37 
cuºít
->
pid
, cuºít->
comm
);

38 
	`waô_evít_öãºu±ibÀ
(
wq
, 
Êag
 != 0);

39 
Êag
 = 0;

40 
	`¥ötk
(
KERN_DEBUG
 "awokí %ò(%s)\n", 
cuºít
->
pid
, cuºít->
comm
);

42 
	}
}

44 
ssize_t
 
	$¶ìpy_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

45 
loff_t
 *
pos
)

47 
	`¥ötk
(
KERN_DEBUG
 "process %i (%s)áwakeningÅheÑeaders...\n",

48 
cuºít
->
pid
, cuºít->
comm
);

49 
Êag
 = 1;

50 
	`wake_up_öãºu±ibÀ
(&
wq
);

51  
cou¡
;

52 
	}
}

55 
fûe_›î©i⁄s
 
	g¶ìpy_f›s
 = {

56 .
ow√r
 = 
THIS_MODULE
,

57 .
	gªad
 = 
¶ìpy_ªad
,

58 .
	gwrôe
 = 
¶ìpy_wrôe
,

62 
	$¶ìpy_öô
()

64 
ªsu…
;

69 
ªsu…
 = 
	`ªgi°î_chrdev
(
¶ìpy_maj‹
, "¶ìpy", &
¶ìpy_f›s
);

70 i‡(
ªsu…
 < 0)

71  
ªsu…
;

72 i‡(
¶ìpy_maj‹
 == 0)

73 
¶ìpy_maj‹
 = 
ªsu…
;

75 
	}
}

77 
	$¶ìpy_˛ónup
()

79 
	`uƒegi°î_chrdev
(
¶ìpy_maj‹
, "sleepy");

80 
	}
}

82 
moduÀ_öô
(
¶ìpy_öô
);

83 
moduÀ_exô
(
¶ìpy_˛ónup
);

	@misc-progs/asynctest.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<uni°d.h
>

20 
	~<sig«l.h
>

21 
	~<f˙é.h
>

23 
	ggŸd©a
=0;

24 
	$sigh™dÀr
(
signo
)

26 i‡(
signo
==
SIGIO
)

27 
gŸd©a
++;

29 
	}
}

31 
	gbuf„r
[4096];

33 
	$maö
(
¨gc
, **
¨gv
)

35 
cou¡
;

36 
siga˘i⁄
 
a˘i⁄
;

38 
	`mem£t
(&
a˘i⁄
, 0, (action));

39 
a˘i⁄
.
ß_h™dÀr
 = 
sigh™dÀr
;

40 
a˘i⁄
.
ß_Êags
 = 0;

42 
	`siga˘i⁄
(
SIGIO
, &
a˘i⁄
, 
NULL
);

44 
	`f˙é
(
STDIN_FILENO
, 
F_SETOWN
, 
	`gëpid
());

45 
	`f˙é
(
STDIN_FILENO
, 
F_SETFL
, f˙é(STDIN_FILENO, 
F_GETFL
Ë| 
FASYNC
);

49 
	`¶ìp
(86400);

50 i‡(!
gŸd©a
)

52 
cou¡
=
	`ªad
(0, 
buf„r
, 4096);

54 
	`wrôe
(1,
buf„r
,
cou¡
);

55 
gŸd©a
=0;

57 
	}
}

	@misc-progs/dataalign.c

17 
	~<°dio.h
>

18 
	~<sys/ut¢ame.h
>

19 
	~<löux/ty≥s.h
>

25 
	sc
 {
	mc
; 
	mt
;} 
	gc
;

26 
	ss
 {
	mc
; 
	mt
;} 
	gs
;

27 
	si
 {
	mc
; 
	mt
;} 
	gi
;

28 
	sl
 {
	mc
; 
	mt
;} 
	gl
;

29 
	sŒ
 {
	mc
; 
	mt
;} 
	gŒ
;

30 
	sp
 {
	mc
; * 
	mt
;} 
	gp
;

31 
	su1b
 {
	mc
; 
__u8
 
	mt
;} 
	gu1b
;

32 
	su2b
 {
	mc
; 
__u16
 
	mt
;} 
	gu2b
;

33 
	su4b
 {
	mc
; 
__u32
 
	mt
;} 
	gu4b
;

34 
	su8b
 {
	mc
; 
__u64
 
	mt
;} 
	gu8b
;

36 
	$maö
(
¨gc
, **
¨gv
)

38 
ut¢ame
 
«me
;

40 
	`u«me
(&
«me
);

41 
	`¥ötf
("arch Align: char short intÜongÖtrÜong-long "

43 
	`¥ötf
( "%-12s %3i %3i %3i %3i %3i %3i "

45 
«me
.
machöe
,

47 ()((*)(&
c
.
t
) - (*)&c),

48 ()((*)(&
s
.
t
) - (*)&s),

49 ()((*)(&
i
.
t
) - (*)&i),

50 ()((*)(&
l
.
t
) - (*)&l),

51 ()((*)(&
p
.
t
) - (*)&p),

52 ()((*)(&
Œ
.
t
) - (*)&ll),

53 ()((*)(&
u1b
.
t
) - (*)&u1b),

54 ()((*)(&
u2b
.
t
) - (*)&u2b),

55 ()((*)(&
u4b
.
t
) - (*)&u4b),

56 ()((*)(&
u8b
.
t
) - (*)&u8b));

58 
	}
}

	@misc-progs/datasize.c

16 
	~<°dio.h
>

17 
	~<sys/ut¢ame.h
>

18 
	~<löux/ty≥s.h
>

20 
	$maö
(
¨gc
, **
¨gv
)

22 
ut¢ame
 
«me
;

24 
	`u«me
(&
«me
);

25 
	`¥ötf
("arch Size: char short intÜongÖtrÜong-long "

27 
	`¥ötf
( "%-12s %3i %3i %3i %3i %3i %3i "

29 
«me
.
machöe
,

32 ()(*), ()(), ()(
__u8
),

33 ()(
__u16
), ()(
__u32
), ()(
__u64
));

35 
	}
}

	@misc-progs/inp.c

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

33 
	~<asm/io.h
>

35 #ifde‡
__GLIBC__


36 
	~<sys/≥rm.h
>

39 
	#PORT_FILE
 "/dev/p‹t"

	)

41 *
	g¥g«me
;

43 #ifde‡
__i386__


44 
	$ªad_™d_¥öt_⁄e
(
p‹t
,
size
)

46 
i›ld⁄e
 = 0;

48 i‡(
p‹t
 > 1024) {

49 i‡(!
i›ld⁄e
 && 
	`i›l
(3)) {

50 
	`Ârötf
(
°dîr
, "%s: i›l(): %s\n", 
¥g«me
, 
	`°ªº‹
(
î∫o
));

53 
i›ld⁄e
++;

54 } i‡(
	`i›îm
(
p‹t
,
size
,1)) {

55 
	`Ârötf
(
°dîr
, "%s: i›îm(%x): %s\n", 
¥g«me
,

56 
p‹t
, 
	`°ªº‹
(
î∫o
));

60 i‡(
size
 == 4)

61 
	`¥ötf
("%04x: %08x\n", 
p‹t
, 
	`öl
(port));

62 i‡(
size
 == 2)

63 
	`¥ötf
("%04x: %04x\n", 
p‹t
, 
	`öw
(port));

65 
	`¥ötf
("%04x: %02x\n", 
p‹t
, 
	`öb
(port));

67 
	}
}

70 
	$ªad_™d_¥öt_⁄e
(
p‹t
,
size
)

72 
fd
 = -1;

73 
b
; 
w
; 
l
;

75 i‡(
fd
 < 0)

76 
fd
 = 
	`›í
(
PORT_FILE
, 
O_RDONLY
);

77 i‡(
fd
 < 0) {

78 
	`Ârötf
(
°dîr
, "%s: %s: %s\n", 
¥g«me
, 
PORT_FILE
, 
	`°ªº‹
(
î∫o
));

81 
	`l£ek
(
fd
, 
p‹t
, 
SEEK_SET
);

83 i‡(
size
 == 4) {

84 
	`ªad
(
fd
, &
l
, 4);

85 
	`¥ötf
("%04x: 0x%08x\n", 
p‹t
, 
l
);

86 } i‡(
size
 == 2) {

87 
	`ªad
(
fd
, &
w
, 2);

88 
	`¥ötf
("%04x: 0x%04x\n", 
p‹t
, 
w
 & 0xffff);

90 
	`ªad
(
fd
, &
b
, 1);

91 
	`¥ötf
("%04x: 0x%02x\n", 
p‹t
, 
b
 & 0xff);

94 
	}
}

99 
	$maö
(
¨gc
, **
¨gv
)

101 
i
, 
n
, 
p‹t
, 
size
, 
îr‹
 = 0;

103 
¥g«me
 = 
¨gv
[0];

105 
¥g«me
[
	`°æí
(prgname)-1]) {

106 'w': 
size
 = 2; ;

107 'l': 
size
 = 4; ;

109 
size
 = 1;

112 
	`£tuid
(0);

113 
i
 = 1; i < 
¨gc
; i++) {

114 i‡–
	`ssˇnf
(
¨gv
[
i
], "%x%n", &
p‹t
, &
n
) < 1

115 || 
n
 !
	`°æí
(
¨gv
[
i
]) ) {

116 
	`Ârötf
(
°dîr
, "%s:árgument \"%s\" isÇotá hexÇumber\n",

117 
¨gv
[0],árgv[
i
]);

118 
îr‹
++; ;

120 i‡(
p‹t
 & (
size
-1)) {

121 
	`Ârötf
(
°dîr
, "%s:árgument \"%s\" isÇotÖroperlyáligned\n",

122 
¨gv
[0],árgv[
i
]);

123 
îr‹
++; ;

125 
îr‹
 +
	`ªad_™d_¥öt_⁄e
(
p‹t
, 
size
);

127 
	`exô
 (
îr‹
 ? 1 : 0);

128 
	}
}

	@misc-progs/load50.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

21 
	$maö
(
¨gc
, **
¨gv
)

23 
i
, 
lﬂd
=50;

25 i‡(
¨gc
==2) {

26 
lﬂd
=
	`©oi
(
¨gv
[1]);

28 
	`¥ötf
("BrögögÜﬂdÅÿ%i\n",
lﬂd
);

30 
i
=0; i<
lﬂd
; i++)

31 i‡(
	`f‹k
()==0)

37 
	}
}

	@misc-progs/mapcmp.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<uni°d.h
>

21 
	~<sys/mm™.h
>

22 
	~<sys/î∫o.h
>

23 
	~<f˙é.h
>

25 *
m≠dev
 (const *, , );

26 
	#PAGE_SIZE
 4096

	)

31 
	$maö
 (
¨gc
, **
¨gv
)

33 
off£t
, 
size
, 
i
;

34 *
addr1
, *
addr2
;

38 i‡(
¨gc
 != 5)

40 
	`Ârötf
 (
°dîr
, "Usage: mapcmp dev1 dev2 offsetÖages\n");

41 
	`exô
 (1);

46 
off£t
 = 
	`°πoul
 (
¨gv
[3], 
NULL
, 16);

47 
size
 = 
	`©oi
 (
¨gv
[4])*
PAGE_SIZE
;

48 
	`¥ötf
 ("Off£ài†0x%lx\n", 
off£t
);

49 
addr1
 = 
	`m≠dev
 (
¨gv
[1], 
off£t
, 
size
);

50 
addr2
 = 
	`m≠dev
 (
¨gv
[2], 
off£t
, 
size
);

54 
	`¥ötf
 ("Comparing...");

55 
	`fÊush
 (
°dout
);

56 
i
 = 0; i < 
size
; i++)

57 i‡(*
addr1
++ !*
addr2
++)

59 
	`¥ötf
 ("¨ó†dif„∏© byã %ld\n", 
i
);

60 
	`exô
 (0);

62 
	`¥ötf
 ("areasáre identical.\n");

63 
	`exô
 (0);

64 
	}
}

68 *
	$m≠dev
 (c⁄° *
dev
, 
off£t
,

69 
size
)

71 *
addr
;

72 
fd
 = 
	`›í
 (
dev
, 
O_RDONLY
);

74 i‡(
fd
 < 0)

76 
	`≥º‹
 (
dev
);

77 
	`exô
 (1);

79 
addr
 = 
	`mm≠
 (0, 
size
, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 
off£t
);

80 i‡(
addr
 =
MAP_FAILED
)

82 
	`≥º‹
 (
dev
);

83 
	`exô
 (1);

85 
	`¥ötf
 ("M≠≥d %†(%lu @ %lxË© %p\n", 
dev
, 
size
, 
off£t
, 
addr
);

86  (
addr
);

87 
	}
}

	@misc-progs/mapper.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<sys/mm™.h
>

26 
	~<î∫o.h
>

27 
	~<limôs.h
>

29 
	$maö
(
¨gc
, **
¨gv
)

31 *
‚ame
;

32 
FILE
 *
f
;

33 
off£t
, 
Àn
;

34 *
addªss
;

36 i‡(
¨gc
 !=4

37 || 
	`ssˇnf
(
¨gv
[2],"%li", &
off£t
) != 1

38 || 
	`ssˇnf
(
¨gv
[3],"%li", &
Àn
) != 1) {

39 
	`Ârötf
(
°dîr
, "%s: Ußgê\"%†<fûe> <off£t> <Àn>\"\n", 
¨gv
[0],

40 
¨gv
[0]);

41 
	`exô
(1);

44 i‡(
off£t
 =
INT_MAX
) {

45 i‡(
¨gv
[2][1]=='x')

46 
	`ssˇnf
(
¨gv
[2]+2, "%lx", &
off£t
);

48 
	`ssˇnf
(
¨gv
[2], "%lu", &
off£t
);

51 
‚ame
=
¨gv
[1];

53 i‡(!(
f
=
	`f›í
(
‚ame
,"r"))) {

54 
	`Ârötf
(
°dîr
, "%s: %s: %s\n", 
¨gv
[0], 
‚ame
, 
	`°ªº‹
(
î∫o
));

55 
	`exô
(1);

58 
addªss
=
	`mm≠
(0, 
Àn
, 
PROT_READ
, 
MAP_FILE
 | 
MAP_PRIVATE
, 
	`fûío
(
f
), 
off£t
);

60 i‡(
addªss
 == (*)-1) {

61 
	`Ârötf
(
°dîr
,"%s: mm≠(): %s\n",
¨gv
[0],
	`°ªº‹
(
î∫o
));

62 
	`exô
(1);

64 
	`f˛o£
(
f
);

65 
	`Ârötf
(
°dîr
, "mapped \"%s\" from %lu (0x%08lx)Åo %lu (0x%08lx)\n",

66 
‚ame
, 
off£t
, off£t, off£t+
Àn
, offset+len);

68 
	`fwrôe
(
addªss
, 1, 
Àn
, 
°dout
);

70 
	}
}

	@misc-progs/nbtest.c

17 
	~<°dio.h
>

18 
	~<uni°d.h
>

19 
	~<f˙é.h
>

20 
	~<°dlib.h
>

21 
	~<î∫o.h
>

23 
	gbuf„r
[4096];

25 
	$maö
(
¨gc
, **
¨gv
)

27 
dñay
 = 1, 
n
, 
m
 = 0;

29 i‡(
¨gc
 > 1)

30 
dñay
=
	`©oi
(
¨gv
[1]);

31 
	`f˙é
(0, 
F_SETFL
, f˙é(0,
F_GETFL
Ë| 
O_NONBLOCK
);

32 
	`f˙é
(1, 
F_SETFL
, f˙é(1,
F_GETFL
Ë| 
O_NONBLOCK
);

35 
n
 = 
	`ªad
(0, 
buf„r
, 4096);

36 i‡(
n
 >= 0)

37 
m
 = 
	`wrôe
(1, 
buf„r
, 
n
);

38 i‡((
n
 < 0 || 
m
 < 0Ë&& (
î∫o
 !
EAGAIN
))

40 
	`¶ìp
(
dñay
);

42 
	`≥º‹
(
n
 < 0 ? "stdin" : "stdout");

43 
	`exô
(1);

44 
	}
}

	@misc-progs/netifdebug.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<°rög.h
>

20 
	~<î∫o.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<sys/io˘l.h
>

24 
	~<√t/if.h
>

25 
	~<√töë/ö.h
>

27 
	$maö
(
¨gc
, **
¨gv
)

29 
a˘i⁄
 = -1, 
sock
;

30 
i‰eq
 
ªq
;

31 *
a˘«me
;

33 i‡(
¨gc
 < 2) {

34 
	`Ârötf
(
°dîr
,"%s: usage is \"%s <ifname> [<on|off|tell>]\"\n",

35 
¨gv
[0],argv[0]);

36 
	`exô
(1);

38 i‡(
¨gc
==2)

39 
a˘«me
="tell";

41 
a˘«me
=
¨gv
[2];

44 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_RAW
);

45 i‡(
sock
 < 0) {

46 
	`Ârötf
(
°dîr
, "%s: sockë(): %s\n", 
¨gv
[0],
	`°ªº‹
(
î∫o
));

47 
	`exô
(1);

51 
	`°r˝y
(
ªq
.
i‰_«me
, 
¨gv
[1]);

52 i‡–
	`io˘l
(
sock
, 
SIOCGIFFLAGS
, &
ªq
) < 0) {

53 
	`Ârötf
(
°dîr
, " %s: ioctl(SIOCGIFFLAGS): %s\n",

54 
¨gv
[0],
	`°ªº‹
(
î∫o
));

55 
	`exô
(1);

58 i‡(!
	`°rcmp
(
a˘«me
,"on")

59 || !
	`°rcmp
(
a˘«me
,"+")

60 || !
	`°rcmp
(
a˘«me
,"1"))

61 
a˘i⁄
 = 
IFF_DEBUG
;

63 i‡(!
	`°rcmp
(
a˘«me
,"off")

64 || !
	`°rcmp
(
a˘«me
,"-")

65 || !
	`°rcmp
(
a˘«me
,"0"))

66 
a˘i⁄
 = 0;

68 i‡(!
	`°rcmp
(
a˘«me
,"tell")

69 || 
a˘«me
[0]=='t') {

70 
	`¥ötf
("%s: debug i†%s\n", 
¨gv
[1],

71 
ªq
.
i‰_Êags
 & 
IFF_DEBUG
 ? "on" : "off");

72 
	`exô
(0);

75 
ªq
.
i‰_Êags
 &~
IFF_DEBUG
;

76 
ªq
.
i‰_Êags
 |
a˘i⁄
;

78 i‡–
	`io˘l
(
sock
, 
SIOCSIFFLAGS
, &
ªq
) < 0) {

79 
	`Ârötf
(
°dîr
, " %s: ioctl(SIOCSIFFLAGS): %s\n",

80 
¨gv
[0],
	`°ªº‹
(
î∫o
));

81 
	`exô
(1);

83 
	`exô
(0);

84 
	}
}

	@misc-progs/outp.c

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

33 
	~<asm/io.h
>

35 #ifde‡
__GLIBC__


36 
	~<sys/≥rm.h
>

39 
	#PORT_FILE
 "/dev/p‹t"

	)

41 *
	g¥g«me
;

43 #ifde‡
__i386__


44 
	$wrôe_⁄e
(
p‹t
, 
vÆ
, 
size
)

46 
i›ld⁄e
 = 0;

48 i‡(
p‹t
 > 1024) {

49 i‡(!
i›ld⁄e
 && 
	`i›l
(3)) {

50 
	`Ârötf
(
°dîr
, "%s: i›l(): %s\n", 
¥g«me
, 
	`°ªº‹
(
î∫o
));

53 
i›ld⁄e
++;

54 } i‡(
	`i›îm
(
p‹t
,
size
,1)) {

55 
	`Ârötf
(
°dîr
, "%s: i›îm(%x): %s\n", 
¥g«me
,

56 
p‹t
, 
	`°ªº‹
(
î∫o
));

60 i‡(
size
 == 4)

61 
	`oué
(
vÆ
, 
p‹t
);

62 i‡(
size
 == 2)

63 
	`outw
(
vÆ
&0xffff, 
p‹t
);

65 
	`outb
(
vÆ
&0xff, 
p‹t
);

67 
	}
}

70 
	$wrôe_⁄e
(
p‹t
, 
vÆ
, 
size
)

72 
fd
 = -1;

73 
b
; 
w
;

75 i‡(
fd
 < 0)

76 
fd
 = 
	`›í
(
PORT_FILE
, 
O_WRONLY
);

77 i‡(
fd
 < 0) {

78 
	`Ârötf
(
°dîr
, "%s: %s: %s\n", 
¥g«me
, 
PORT_FILE
, 
	`°ªº‹
(
î∫o
));

81 
	`l£ek
(
fd
, 
p‹t
, 
SEEK_SET
);

83 i‡(
size
 == 4) {

84 
	`wrôe
(
fd
, &
vÆ
, 4);

85 } i‡(
size
 == 2) {

86 
w
 = 
vÆ
;

87 
	`wrôe
(
fd
, &
w
, 2);

89 
b
 = 
vÆ
;

90 
	`wrôe
(
fd
, &
b
, 1);

93 
	}
}

97 
	$maö
(
¨gc
, **
¨gv
)

99 
i
, 
n
, 
p‹t
, 
vÆ
, 
size
, 
îr‹
 = 0;

101 
¥g«me
 = 
¨gv
[0];

103 
¥g«me
[
	`°æí
(prgname)-1]) {

104 'w': 
size
 = 2; ;

105 'l': 
size
 = 4; ;

107 
size
 = 1;

109 
	`£tuid
(0);

110 
i
=1;i<
¨gc
-1;i++) {

111 i‡–
	`ssˇnf
(
¨gv
[
i
], "%x%n", &
p‹t
, &
n
) < 1

112 || 
n
 !
	`°æí
(
¨gv
[
i
]) ) {

113 
	`Ârötf
(
°dîr
, "%s:árgument \"%s\" isÇotá hexÇumber\n",

114 
¨gv
[0],árgv[
i
]);

115 
îr‹
++; ;

117 i‡(
p‹t
 & (
size
-1)) {

118 
	`Ârötf
(
°dîr
, "%s:árgument \"%s\" isÇotÖroperlyáligned\n",

119 
¨gv
[0],árgv[
i
]);

120 
îr‹
++; ;

122 i‡–
	`ssˇnf
(
¨gv
[
i
+1], "%x%n", &
vÆ
, &
n
) < 1

123 || 
n
 !
	`°æí
(
¨gv
[
i
+1]) ) {

124 
	`Ârötf
(
°dîr
, "%s:árgument \"%s\" isÇotá hexÇumber\n",

125 
¨gv
[0],árgv[
i
+1]);

126 
îr‹
++; ;

128 i‡(
size
 < 4 && 
vÆ
 > (size == 1 ? 0xff : 0xffff)) {

129 
	`Ârötf
(
°dîr
, "%s:árgument \"%s\" out ofÑange\n",

130 
¨gv
[0],árgv[
i
+1]);

131 
îr‹
++; ;

133 
îr‹
 +
	`wrôe_⁄e
(
p‹t
, 
vÆ
, 
size
);

135 
	`exô
 (
îr‹
 ? 1 : 0);

136 
	}
}

	@misc-progs/polltest.c

19 
	~<°dio.h
>

20 
	~<uni°d.h
>

21 
	~<°dlib.h
>

22 
	~<î∫o.h
>

23 
	~<sys/pﬁl.h
>

24 
	~<f˙é.h
>

26 
	gbuf„r
[4096];

28 
	$maö
(
¨gc
, **
¨gv
)

30 
pﬁlfd
 
pfd
;

31 
n
;

33 
	`f˙é
(0, 
F_SETFL
, f˙é(0,
F_GETFL
Ë| 
O_NONBLOCK
);

34 
pfd
.
fd
 = 0;

35 
pfd
.
evíts
 = 
POLLIN
;

38 
n
=
	`ªad
(0, 
buf„r
, 4096);

39 i‡(
n
 >= 0)

40 
	`wrôe
(1, 
buf„r
, 
n
);

41 
n
 = 
	`pﬁl
(&
pfd
, 1, -1);

42 i‡(
n
 < 0)

45 
	`≥º‹
–
n
<0 ? "stdin" : "stdout");

46 
	`exô
(1);

47 
	}
}

	@misc-progs/setconsole.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

25 
	~<uni°d.h
>

26 
	~<sys/io˘l.h
>

28 
	$maö
(
¨gc
, **
¨gv
)

30 
byãs
[2] = {11,0};

32 i‡(
¨gc
==2Ë
byãs
[1] = 
	`©oi
(
¨gv
[1]);

34 
	`Ârötf
(
°dîr
, "%s:Çìdá sögÀárg\n",
¨gv
[0]); 
	`exô
(1);

36 i‡(
	`io˘l
(
STDIN_FILENO
, 
TIOCLINUX
, 
byãs
)<0) {

37 
	`Ârötf
(
°dîr
,"%s: ioctl(stdin, TIOCLINUX): %s\n",

38 
¨gv
[0], 
	`°ªº‹
(
î∫o
));

39 
	`exô
(1);

41 
	`exô
(0);

42 
	}
}

	@misc-progs/setlevel.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

26 
	#__LIBRARY__


	)

27 
	~<löux/uni°d.h
>

30 
_sysˇŒ3
(, 
sy¶og
, , 
ty≥
, *, 
buÂ
, , 
Àn
);

32 
	$maö
(
¨gc
, **
¨gv
)

34 
Àvñ
;

36 i‡(
¨gc
==2) {

37 
Àvñ
 = 
	`©oi
(
¨gv
[1]);

39 
	`Ârötf
(
°dîr
, "%s:Çìdá sögÀárg\n",
¨gv
[0]); 
	`exô
(1);

41 i‡(
	`sy¶og
(8,
NULL
,
Àvñ
) < 0) {

42 
	`Ârötf
(
°dîr
,"%s: syslog(setlevel): %s\n",

43 
¨gv
[0],
	`°ªº‹
(
î∫o
));

44 
	`exô
(1);

46 
	`exô
(0);

47 
	}
}

	@pci/pci_skel.c

1 
	~<löux/c⁄fig.h
>

2 
	~<löux/kî√l.h
>

3 
	~<löux/moduÀ.h
>

4 
	~<löux/pci.h
>

5 
	~<löux/öô.h
>

8 
pci_devi˚_id
 
	gids
[] = {

9 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801AA_3
), },

12 
MODULE_DEVICE_TABLE
(
pci
, 
ids
);

14 
	$skñ_gë_ªvisi⁄
(
pci_dev
 *
dev
)

16 
u8
 
ªvisi⁄
;

18 
	`pci_ªad_c⁄fig_byã
(
dev
, 
PCI_REVISION_ID
, &
ªvisi⁄
);

19  
ªvisi⁄
;

20 
	}
}

22 
	$¥obe
(
pci_dev
 *
dev
, c⁄° 
pci_devi˚_id
 *
id
)

27 
	`pci_íabÀ_devi˚
(
dev
);

29 i‡(
	`skñ_gë_ªvisi⁄
(
dev
) == 0x42)

30  -
ENODEV
;

34 
	}
}

36 
	$ªmove
(
pci_dev
 *
dev
)

41 
	}
}

43 
pci_drivî
 
	gpci_drivî
 = {

44 .
«me
 = "pci_skel",

45 .
	gid_èbÀ
 = 
ids
,

46 .
	g¥obe
 = 
¥obe
,

47 .
	gªmove
 = 
ªmove
,

50 
__öô
 
	$pci_skñ_öô
()

52  
	`pci_ªgi°î_drivî
(&
pci_drivî
);

53 
	}
}

55 
__exô
 
	$pci_skñ_exô
()

57 
	`pci_uƒegi°î_drivî
(&
pci_drivî
);

58 
	}
}

60 
MODULE_LICENSE
("GPL");

62 
moduÀ_öô
(
pci_skñ_öô
);

63 
moduÀ_exô
(
pci_skñ_exô
);

	@sbull/sbull.c

5 
	~<löux/c⁄fig.h
>

6 
	~<löux/moduÀ.h
>

7 
	~<löux/moduÀ∑øm.h
>

8 
	~<löux/öô.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/¶ab.h
>

13 
	~<löux/fs.h
>

14 
	~<löux/î∫o.h
>

15 
	~<löux/timî.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/f˙é.h
>

18 
	~<löux/hdªg.h
>

19 
	~<löux/kdev_t.h
>

20 
	~<löux/vmÆloc.h
>

21 
	~<löux/gíhd.h
>

22 
	~<löux/blkdev.h
>

23 
	~<löux/buf„r_hód.h
>

24 
	~<löux/bio.h
>

26 
MODULE_LICENSE
("Dual BSD/GPL");

28 
	gsbuŒ_maj‹
 = 0;

29 
moduÀ_∑øm
(
sbuŒ_maj‹
, , 0);

30 
	gh¨d£˘_size
 = 512;

31 
moduÀ_∑øm
(
h¨d£˘_size
, , 0);

32 
	gn£˘‹s
 = 1024;

33 
moduÀ_∑øm
(
n£˘‹s
, , 0);

34 
	gndevi˚s
 = 4;

35 
moduÀ_∑øm
(
ndevi˚s
, , 0);

41 
	mRM_SIMPLE
 = 0,

42 
	mRM_FULL
 = 1,

43 
	mRM_NOQUEUE
 = 2,

45 
	gªque°_mode
 = 
RM_SIMPLE
;

46 
moduÀ_∑øm
(
ªque°_mode
, , 0);

51 
	#SBULL_MINORS
 16

	)

52 
	#MINOR_SHIFT
 4

	)

53 
	#DEVNUM
(
kdevnum
Ë(
	`MINOR
(
	`kdev_t_to_ƒ
(kdevnum)Ë>> 
MINOR_SHIFT


	)

59 
	#KERNEL_SECTOR_SIZE
 512

	)

64 
	#INVALIDATE_DELAY
 30*
HZ


	)

69 
	ssbuŒ_dev
 {

70 
	msize
;

71 
u8
 *
	md©a
;

72 
	mu£rs
;

73 
	mmedü_ch™ge
;

74 
•ölock_t
 
	mlock
;

75 
ªque°_queue
 *
	mqueue
;

76 
gídisk
 *
	mgd
;

77 
timî_li°
 
	mtimî
;

80 
sbuŒ_dev
 *
	gDevi˚s
 = 
NULL
;

85 
	$sbuŒ_å™s„r
(
sbuŒ_dev
 *
dev
, 
£˘‹
,

86 
n£˘
, *
buf„r
, 
wrôe
)

88 
off£t
 = 
£˘‹
*
KERNEL_SECTOR_SIZE
;

89 
nbyãs
 = 
n£˘
*
KERNEL_SECTOR_SIZE
;

91 i‡((
off£t
 + 
nbyãs
Ë> 
dev
->
size
) {

92 
	`¥ötk
 (
KERN_NOTICE
 "Bey⁄d-íd wrôê(%ld %ld)\n", 
off£t
, 
nbyãs
);

95 i‡(
wrôe
)

96 
	`mem˝y
(
dev
->
d©a
 + 
off£t
, 
buf„r
, 
nbyãs
);

98 
	`mem˝y
(
buf„r
, 
dev
->
d©a
 + 
off£t
, 
nbyãs
);

99 
	}
}

104 
	$sbuŒ_ªque°
(
ªque°_queue_t
 *
q
)

106 
ªque°
 *
ªq
;

108 (
ªq
 = 
	`ñv_√xt_ªque°
(
q
)Ë!
NULL
) {

109 
sbuŒ_dev
 *
dev
 = 
ªq
->
rq_disk
->
¥iv©e_d©a
;

110 i‡(! 
	`blk_fs_ªque°
(
ªq
)) {

111 
	`¥ötk
 (
KERN_NOTICE
 "SkipÇon-fsÑequest\n");

112 
	`íd_ªque°
(
ªq
, 0);

119 
	`sbuŒ_å™s„r
(
dev
, 
ªq
->
£˘‹
,Ñeq->
cuºít_ƒ_£˘‹s
,

120 
ªq
->
buf„r
, 
	`rq_d©a_dú
(req));

121 
	`íd_ªque°
(
ªq
, 1);

123 
	}
}

129 
	$sbuŒ_x„r_bio
(
sbuŒ_dev
 *
dev
, 
bio
 *bio)

131 
i
;

132 
bio_vec
 *
bvec
;

133 
£˘‹_t
 
£˘‹
 = 
bio
->
bi_£˘‹
;

136 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
i
) {

137 *
buf„r
 = 
	`__bio_km≠_©omic
(
bio
, 
i
, 
KM_USER0
);

138 
	`sbuŒ_å™s„r
(
dev
, 
£˘‹
, 
	`bio_cur_£˘‹s
(
bio
),

139 
buf„r
, 
	`bio_d©a_dú
(
bio
Ë=
WRITE
);

140 
£˘‹
 +
	`bio_cur_£˘‹s
(
bio
);

141 
	`__bio_kunm≠_©omic
(
bio
, 
KM_USER0
);

144 
	}
}

149 
	$sbuŒ_x„r_ªque°
(
sbuŒ_dev
 *
dev
, 
ªque°
 *
ªq
)

151 
bio
 *bio;

152 
n£˘
 = 0;

154 
	`rq_f‹_óch_bio
(
bio
, 
ªq
) {

155 
	`sbuŒ_x„r_bio
(
dev
, 
bio
);

156 
n£˘
 +
bio
->
bi_size
/
KERNEL_SECTOR_SIZE
;

158  
n£˘
;

159 
	}
}

166 
	$sbuŒ_fuŒ_ªque°
(
ªque°_queue_t
 *
q
)

168 
ªque°
 *
ªq
;

169 
£˘‹s_x„ºed
;

170 
sbuŒ_dev
 *
dev
 = 
q
->
queued©a
;

172 (
ªq
 = 
	`ñv_√xt_ªque°
(
q
)Ë!
NULL
) {

173 i‡(! 
	`blk_fs_ªque°
(
ªq
)) {

174 
	`¥ötk
 (
KERN_NOTICE
 "SkipÇon-fsÑequest\n");

175 
	`íd_ªque°
(
ªq
, 0);

178 
£˘‹s_x„ºed
 = 
	`sbuŒ_x„r_ªque°
(
dev
, 
ªq
);

179 i‡(! 
	`íd_th©_ªque°_fú°
(
ªq
, 1, 
£˘‹s_x„ºed
)) {

180 
	`blkdev_dequeue_ªque°
(
ªq
);

181 
	`íd_th©_ªque°_œ°
(
ªq
);

184 
	}
}

191 
	$sbuŒ_make_ªque°
(
ªque°_queue_t
 *
q
, 
bio
 *bio)

193 
sbuŒ_dev
 *
dev
 = 
q
->
queued©a
;

194 
°©us
;

196 
°©us
 = 
	`sbuŒ_x„r_bio
(
dev
, 
bio
);

197 
	`bio_ídio
(
bio
, bio->
bi_size
, 
°©us
);

199 
	}
}

206 
	$sbuŒ_›í
(
öode
 *öode, 
fûe
 *
fûp
)

208 
sbuŒ_dev
 *
dev
 = 
öode
->
i_bdev
->
bd_disk
->
¥iv©e_d©a
;

210 
	`dñ_timî_sync
(&
dev
->
timî
);

211 
fûp
->
¥iv©e_d©a
 = 
dev
;

212 
	`•ö_lock
(&
dev
->
lock
);

213 i‡(! 
dev
->
u£rs
)

214 
	`check_disk_ch™ge
(
öode
->
i_bdev
);

215 
dev
->
u£rs
++;

216 
	`•ö_u∆ock
(&
dev
->
lock
);

218 
	}
}

220 
	$sbuŒ_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

222 
sbuŒ_dev
 *
dev
 = 
öode
->
i_bdev
->
bd_disk
->
¥iv©e_d©a
;

224 
	`•ö_lock
(&
dev
->
lock
);

225 
dev
->
u£rs
--;

227 i‡(!
dev
->
u£rs
) {

228 
dev
->
timî
.
expúes
 = 
jiffõs
 + 
INVALIDATE_DELAY
;

229 
	`add_timî
(&
dev
->
timî
);

231 
	`•ö_u∆ock
(&
dev
->
lock
);

234 
	}
}

239 
	$sbuŒ_medü_ch™ged
(
gídisk
 *
gd
)

241 
sbuŒ_dev
 *
dev
 = 
gd
->
¥iv©e_d©a
;

243  
dev
->
medü_ch™ge
;

244 
	}
}

250 
	$sbuŒ_ªvÆid©e
(
gídisk
 *
gd
)

252 
sbuŒ_dev
 *
dev
 = 
gd
->
¥iv©e_d©a
;

254 i‡(
dev
->
medü_ch™ge
) {

255 
dev
->
medü_ch™ge
 = 0;

256 
	`mem£t
 (
dev
->
d©a
, 0, dev->
size
);

259 
	}
}

265 
	$sbuŒ_övÆid©e
(
ldev
)

267 
sbuŒ_dev
 *
dev
 = (sbuŒ_dev *Ë
ldev
;

269 
	`•ö_lock
(&
dev
->
lock
);

270 i‡(
dev
->
u£rs
 || !dev->
d©a
)

271 
	`¥ötk
 (
KERN_WARNING
 "sbull:Åimer sanity check failed\n");

273 
dev
->
medü_ch™ge
 = 1;

274 
	`•ö_u∆ock
(&
dev
->
lock
);

275 
	}
}

281 
	$sbuŒ_io˘l
 (
öode
 *öode, 
fûe
 *
fûp
,

282 
cmd
, 
¨g
)

284 
size
;

285 
hd_geomëry
 
geo
;

286 
sbuŒ_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

288 
cmd
) {

289 
HDIO_GETGEO
:

296 
size
 = 
dev
->size*(
h¨d£˘_size
/
KERNEL_SECTOR_SIZE
);

297 
geo
.
cylödîs
 = (
size
 & ~0x3f) >> 6;

298 
geo
.
hóds
 = 4;

299 
geo
.
£˘‹s
 = 16;

300 
geo
.
°¨t
 = 4;

301 i‡(
	`c›y_to_u£r
((
__u£r
 *Ë
¨g
, &
geo
, (geo)))

302  -
EFAULT
;

306  -
ENOTTY
;

307 
	}
}

314 
block_devi˚_›î©i⁄s
 
	gsbuŒ_›s
 = {

315 .
ow√r
 = 
THIS_MODULE
,

316 .
	g›í
 = 
sbuŒ_›í
,

317 .
	gªÀa£
 = 
sbuŒ_ªÀa£
,

318 .
	gmedü_ch™ged
 = 
sbuŒ_medü_ch™ged
,

319 .
	gªvÆid©e_disk
 = 
sbuŒ_ªvÆid©e
,

320 .
	gio˘l
 = 
sbuŒ_io˘l


327 
	$£tup_devi˚
(
sbuŒ_dev
 *
dev
, 
which
)

332 
	`mem£t
 (
dev
, 0,  (
sbuŒ_dev
));

333 
dev
->
size
 = 
n£˘‹s
*
h¨d£˘_size
;

334 
dev
->
d©a
 = 
	`vmÆloc
(dev->
size
);

335 i‡(
dev
->
d©a
 =
NULL
) {

336 
	`¥ötk
 (
KERN_NOTICE
 "vmalloc failure.\n");

339 
	`•ö_lock_öô
(&
dev
->
lock
);

344 
	`öô_timî
(&
dev
->
timî
);

345 
dev
->
timî
.
d©a
 = () dev;

346 
dev
->
timî
.
fun˘i⁄
 = 
sbuŒ_övÆid©e
;

352 
ªque°_mode
) {

353 
RM_NOQUEUE
:

354 
dev
->
queue
 = 
	`blk_Æloc_queue
(
GFP_KERNEL
);

355 i‡(
dev
->
queue
 =
NULL
)

356 
out_v‰ì
;

357 
	`blk_queue_make_ªque°
(
dev
->
queue
, 
sbuŒ_make_ªque°
);

360 
RM_FULL
:

361 
dev
->
queue
 = 
	`blk_öô_queue
(
sbuŒ_fuŒ_ªque°
, &dev->
lock
);

362 i‡(
dev
->
queue
 =
NULL
)

363 
out_v‰ì
;

367 
	`¥ötk
(
KERN_NOTICE
 "BadÑeque° modê%d, usög sim∂e\n", 
ªque°_mode
);

370 
RM_SIMPLE
:

371 
dev
->
queue
 = 
	`blk_öô_queue
(
sbuŒ_ªque°
, &dev->
lock
);

372 i‡(
dev
->
queue
 =
NULL
)

373 
out_v‰ì
;

376 
	`blk_queue_h¨d£˘_size
(
dev
->
queue
, 
h¨d£˘_size
);

377 
dev
->
queue
->
queued©a
 = dev;

381 
dev
->
gd
 = 
	`Æloc_disk
(
SBULL_MINORS
);

382 i‡(! 
dev
->
gd
) {

383 
	`¥ötk
 (
KERN_NOTICE
 "alloc_disk failure\n");

384 
out_v‰ì
;

386 
dev
->
gd
->
maj‹
 = 
sbuŒ_maj‹
;

387 
dev
->
gd
->
fú°_mö‹
 = 
which
*
SBULL_MINORS
;

388 
dev
->
gd
->
f›s
 = &
sbuŒ_›s
;

389 
dev
->
gd
->
queue
 = dev->queue;

390 
dev
->
gd
->
¥iv©e_d©a
 = dev;

391 
	`¢¥ötf
 (
dev
->
gd
->
disk_«me
, 32, "sbuŒ%c", 
which
 + 'a');

392 
	`£t_ˇ∑côy
(
dev
->
gd
, 
n£˘‹s
*(
h¨d£˘_size
/
KERNEL_SECTOR_SIZE
));

393 
	`add_disk
(
dev
->
gd
);

396 
out_v‰ì
:

397 i‡(
dev
->
d©a
)

398 
	`v‰ì
(
dev
->
d©a
);

399 
	}
}

403 
__öô
 
	$sbuŒ_öô
()

405 
i
;

409 
sbuŒ_maj‹
 = 
	`ªgi°î_blkdev
(sbull_major, "sbull");

410 i‡(
sbuŒ_maj‹
 <= 0) {

411 
	`¥ötk
(
KERN_WARNING
 "sbull: unableÅo get majorÇumber\n");

412  -
EBUSY
;

417 
Devi˚s
 = 
	`kmÆloc
(
ndevi˚s
* (
sbuŒ_dev
), 
GFP_KERNEL
);

418 i‡(
Devi˚s
 =
NULL
)

419 
out_uƒegi°î
;

420 
i
 = 0; i < 
ndevi˚s
; i++)

421 
	`£tup_devi˚
(
Devi˚s
 + 
i
, i);

425 
out_uƒegi°î
:

426 
	`uƒegi°î_blkdev
(
sbuŒ_maj‹
, "sbd");

427  -
ENOMEM
;

428 
	}
}

430 
	$sbuŒ_exô
()

432 
i
;

434 
i
 = 0; i < 
ndevi˚s
; i++) {

435 
sbuŒ_dev
 *
dev
 = 
Devi˚s
 + 
i
;

437 
	`dñ_timî_sync
(&
dev
->
timî
);

438 i‡(
dev
->
gd
) {

439 
	`dñ_gídisk
(
dev
->
gd
);

440 
	`put_disk
(
dev
->
gd
);

442 i‡(
dev
->
queue
) {

443 i‡(
ªque°_mode
 =
RM_NOQUEUE
)

444 
	`blk_put_queue
(
dev
->
queue
);

446 
	`blk_˛ónup_queue
(
dev
->
queue
);

448 i‡(
dev
->
d©a
)

449 
	`v‰ì
(
dev
->
d©a
);

451 
	`uƒegi°î_blkdev
(
sbuŒ_maj‹
, "sbull");

452 
	`k‰ì
(
Devi˚s
);

453 
	}
}

455 
moduÀ_öô
(
sbuŒ_öô
);

456 
moduÀ_exô
(
sbuŒ_exô
);

	@sbull/sbull.h

19 
	~<löux/io˘l.h
>

22 #ifde‡
SBULL_MULTIQUEUE


30 #unde‡
PDEBUG


31 #ifde‡
SBULL_DEBUG


32 #ifde‡
__KERNEL__


34 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`¥ötk
–
KERN_DEBUG
 "sbuŒ: " fmt, ##árgs)

	)

37 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt, ##árgs)

	)

40 
	#PDEBUG
(
fmt
, 
¨gs
...Ë

	)

43 #unde‡
PDEBUGG


44 
	#PDEBUGG
(
fmt
, 
¨gs
...Ë

	)

47 
	#SBULL_MAJOR
 0

	)

48 
	#SBULL_DEVS
 2

	)

49 
	#SBULL_RAHEAD
 2

	)

50 
	#SBULL_SIZE
 2048

	)

51 
	#SBULL_BLKSIZE
 1024

	)

52 
	#SBULL_HARDSECT
 512

	)

54 
	#SBULLR_MAJOR
 0

	)

61 
	sSbuŒ_Dev
 {

62 
	msize
;

63 
	mußge
;

64 
timî_li°
 
	mtimî
;

65 
•ölock_t
 
	mlock
;

66 
u8
 *
	md©a
;

67 #ifde‡
SBULL_MULTIQUEUE


68 
ªque°_queue_t
 *
	mqueue
;

69 
	mbusy
;

71 } 
	tSbuŒ_Dev
;

	@scull/access.c

20 
	~<löux/kî√l.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/fs.h
>

24 
	~<löux/î∫o.h
>

25 
	~<löux/ty≥s.h
>

26 
	~<löux/f˙é.h
>

27 
	~<löux/cdev.h
>

28 
	~<löux/ây.h
>

29 
	~<asm/©omic.h
>

30 
	~<löux/li°.h
>

31 
	~<löux/sched.h
>

33 
	~"scuŒ.h
"

35 
dev_t
 
	gscuŒ_a_fú°dev
;

50 
scuŒ_dev
 
	gscuŒ_s_devi˚
;

51 
©omic_t
 
	gscuŒ_s_avaûabÀ
 = 
ATOMIC_INIT
(1);

53 
	$scuŒ_s_›í
(
öode
 *öode, 
fûe
 *
fûp
)

55 
scuŒ_dev
 *
dev
 = &
scuŒ_s_devi˚
;

57 i‡(! 
	`©omic_dec_™d_ã°
 (&
scuŒ_s_avaûabÀ
)) {

58 
	`©omic_öc
(&
scuŒ_s_avaûabÀ
);

59  -
EBUSY
;

63 i‡–(
fûp
->
f_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
)

64 
	`scuŒ_åim
(
dev
);

65 
fûp
->
¥iv©e_d©a
 = 
dev
;

67 
	}
}

69 
	$scuŒ_s_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

71 
	`©omic_öc
(&
scuŒ_s_avaûabÀ
);

73 
	}
}

79 
fûe_›î©i⁄s
 
	gscuŒ_¢gl_f›s
 = {

80 .
ow√r
 = 
THIS_MODULE
,

81 .
	gŒ£ek
 = 
scuŒ_Œ£ek
,

82 .
	gªad
 = 
scuŒ_ªad
,

83 .
	gwrôe
 = 
scuŒ_wrôe
,

84 .
	gu∆ocked_io˘l
 = 
scuŒ_io˘l
,

85 .
	g›í
 = 
scuŒ_s_›í
,

86 .
	gªÀa£
 = 
scuŒ_s_ªÀa£
,

96 
scuŒ_dev
 
	gscuŒ_u_devi˚
;

97 
	gscuŒ_u_cou¡
;

98 
kuid_t
 
	gscuŒ_u_ow√r
;

100 
DEFINE_SPINLOCK
(
scuŒ_u_lock
);

102 
	$scuŒ_u_›í
(
öode
 *öode, 
fûe
 *
fûp
)

104 
scuŒ_dev
 *
dev
 = &
scuŒ_u_devi˚
;

106 
	`•ö_lock
(&
scuŒ_u_lock
);

107 i‡(
scuŒ_u_cou¡
 &&

108 
	`uid_eq
(
scuŒ_u_ow√r
, 
	`cuºít_uid
()) &&

109 
	`uid_eq
(
scuŒ_u_ow√r
 !
	`cuºít_euid
()) &&

110 !
	`ˇ∑bÀ
(
CAP_DAC_OVERRIDE
)) {

111 
	`•ö_u∆ock
(&
scuŒ_u_lock
);

112  -
EBUSY
;

115 i‡(
scuŒ_u_cou¡
 == 0)

116 
scuŒ_u_ow√r
 = 
	`cuºít_uid
();

118 
scuŒ_u_cou¡
++;

119 
	`•ö_u∆ock
(&
scuŒ_u_lock
);

123 i‡((
fûp
->
f_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
)

124 
	`scuŒ_åim
(
dev
);

125 
fûp
->
¥iv©e_d©a
 = 
dev
;

127 
	}
}

129 
	$scuŒ_u_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

131 
	`•ö_lock
(&
scuŒ_u_lock
);

132 
scuŒ_u_cou¡
--;

133 
	`•ö_u∆ock
(&
scuŒ_u_lock
);

135 
	}
}

142 
fûe_›î©i⁄s
 
	gscuŒ_u£r_f›s
 = {

143 .
ow√r
 = 
THIS_MODULE
,

144 .
	gŒ£ek
 = 
scuŒ_Œ£ek
,

145 .
	gªad
 = 
scuŒ_ªad
,

146 .
	gwrôe
 = 
scuŒ_wrôe
,

147 .
	gu∆ocked_io˘l
 = 
scuŒ_io˘l
,

148 .
	g›í
 = 
scuŒ_u_›í
,

149 .
	gªÀa£
 = 
scuŒ_u_ªÀa£
,

158 
scuŒ_dev
 
	gscuŒ_w_devi˚
;

159 
	gscuŒ_w_cou¡
;

160 
kuid_t
 
	gscuŒ_w_ow√r
;

161 
DECLARE_WAIT_QUEUE_HEAD
(
scuŒ_w_waô
);

163 
DEFINE_SPINLOCK
(
scuŒ_w_lock
);

165 
ölöe
 
	$scuŒ_w_avaûabÀ
()

167  (
scuŒ_w_cou¡
 == 0 ||

168 
	`uid_eq
(
scuŒ_w_ow√r
, 
	`cuºít_uid
()) ||

169 
	`uid_eq
(
scuŒ_w_ow√r
, 
	`cuºít_euid
()) ||

170 
	`ˇ∑bÀ
(
CAP_DAC_OVERRIDE
));

171 
	}
}

174 
	$scuŒ_w_›í
(
öode
 *öode, 
fûe
 *
fûp
)

176 
scuŒ_dev
 *
dev
 = &
scuŒ_w_devi˚
;

178 
	`•ö_lock
(&
scuŒ_w_lock
);

179 ! 
	`scuŒ_w_avaûabÀ
()) {

180 
	`•ö_u∆ock
(&
scuŒ_w_lock
);

181 i‡(
fûp
->
f_Êags
 & 
O_NONBLOCK
Ë -
EAGAIN
;

182 i‡(
	`waô_evít_öãºu±ibÀ
 (
scuŒ_w_waô
, 
	`scuŒ_w_avaûabÀ
()))

183  -
ERESTARTSYS
;

184 
	`•ö_lock
(&
scuŒ_w_lock
);

186 i‡(
scuŒ_w_cou¡
 == 0)

187 
scuŒ_w_ow√r
 = 
	`cuºít_uid
();

188 
scuŒ_w_cou¡
++;

189 
	`•ö_u∆ock
(&
scuŒ_w_lock
);

192 i‡((
fûp
->
f_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
)

193 
	`scuŒ_åim
(
dev
);

194 
fûp
->
¥iv©e_d©a
 = 
dev
;

196 
	}
}

198 
	$scuŒ_w_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

200 
ãmp
;

202 
	`•ö_lock
(&
scuŒ_w_lock
);

203 
scuŒ_w_cou¡
--;

204 
ãmp
 = 
scuŒ_w_cou¡
;

205 
	`•ö_u∆ock
(&
scuŒ_w_lock
);

207 i‡(
ãmp
 == 0)

208 
	`wake_up_öãºu±ibÀ_sync
(&
scuŒ_w_waô
);

210 
	}
}

216 
fûe_›î©i⁄s
 
	gscuŒ_wu§_f›s
 = {

217 .
ow√r
 = 
THIS_MODULE
,

218 .
	gŒ£ek
 = 
scuŒ_Œ£ek
,

219 .
	gªad
 = 
scuŒ_ªad
,

220 .
	gwrôe
 = 
scuŒ_wrôe
,

221 .
	gu∆ocked_io˘l
 = 
scuŒ_io˘l
,

222 .
	g›í
 = 
scuŒ_w_›í
,

223 .
	gªÀa£
 = 
scuŒ_w_ªÀa£
,

234 
	sscuŒ_li°ôem
 {

235 
scuŒ_dev
 
	mdevi˚
;

236 
dev_t
 
	mkey
;

237 
li°_hód
 
	mli°
;

242 
LIST_HEAD
(
scuŒ_c_li°
);

243 
DEFINE_SPINLOCK
(
scuŒ_c_lock
);

246 
scuŒ_dev
 
	gscuŒ_c_devi˚
;

249 
scuŒ_dev
 *
	$scuŒ_c_lookf‹_devi˚
(
dev_t
 
key
)

251 
scuŒ_li°ôem
 *
Õå
;

253 
	`li°_f‹_óch_íåy
(
Õå
, &
scuŒ_c_li°
, 
li°
) {

254 i‡(
Õå
->
key
 == key)

255  &(
Õå
->
devi˚
);

259 
Õå
 = 
	`kmÆloc
((
scuŒ_li°ôem
), 
GFP_KERNEL
);

260 i‡(!
Õå
)

261  
NULL
;

264 
	`mem£t
(
Õå
, 0, (
scuŒ_li°ôem
));

265 
Õå
->
key
 = key;

266 
	`scuŒ_åim
(&(
Õå
->
devi˚
));

267 
	`£ma_öô
(&(
Õå
->
devi˚
.
£m
), 1);

270 
	`li°_add
(&
Õå
->
li°
, &
scuŒ_c_li°
);

272  &(
Õå
->
devi˚
);

273 
	}
}

275 
	$scuŒ_c_›í
(
öode
 *öode, 
fûe
 *
fûp
)

277 
scuŒ_dev
 *
dev
;

278 
dev_t
 
key
;

280 i‡(!
cuºít
->
sig«l
->
ây
) {

281 
	`PDEBUG
("Pro˚s†\"%s\" ha†nÿ˘»ây\n", 
cuºít
->
comm
);

282  -
EINVAL
;

284 
key
 = 
	`ây_devnum
(
cuºít
->
sig«l
->
ây
);

287 
	`•ö_lock
(&
scuŒ_c_lock
);

288 
dev
 = 
	`scuŒ_c_lookf‹_devi˚
(
key
);

289 
	`•ö_u∆ock
(&
scuŒ_c_lock
);

291 i‡(!
dev
)

292  -
ENOMEM
;

295 i‡–(
fûp
->
f_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
)

296 
	`scuŒ_åim
(
dev
);

297 
fûp
->
¥iv©e_d©a
 = 
dev
;

299 
	}
}

301 
	$scuŒ_c_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

308 
	}
}

315 
fûe_›î©i⁄s
 
	gscuŒ_¥iv_f›s
 = {

316 .
ow√r
 = 
THIS_MODULE
,

317 .
	gŒ£ek
 = 
scuŒ_Œ£ek
,

318 .
	gªad
 = 
scuŒ_ªad
,

319 .
	gwrôe
 = 
scuŒ_wrôe
,

320 .
	gu∆ocked_io˘l
 = 
scuŒ_io˘l
,

321 .
	g›í
 = 
scuŒ_c_›í
,

322 .
	gªÀa£
 = 
scuŒ_c_ªÀa£
,

330 
	sscuŒ_adev_öfo
 {

331 *
	m«me
;

332 
scuŒ_dev
 *
	mscuŒdev
;

333 
fûe_›î©i⁄s
 *
	mf›s
;

334 } 
	gscuŒ_ac˚ss_devs
[] = {

335 { "scuŒsögÀ", &
scuŒ_s_devi˚
, &
scuŒ_¢gl_f›s
 },

336 { "scuŒuid", &
scuŒ_u_devi˚
, &
scuŒ_u£r_f›s
 },

337 { "scuŒwuid", &
scuŒ_w_devi˚
, &
scuŒ_wu§_f›s
 },

338 { "suŒ¥iv", &
scuŒ_c_devi˚
, &
scuŒ_¥iv_f›s
 }

340 
	#SCULL_N_ADEVS
 4

	)

345 
	$scuŒ_ac˚ss_£tup
 (
dev_t
 
devno
, 
scuŒ_adev_öfo
 *
devöfo
)

347 
scuŒ_dev
 *
dev
 = 
devöfo
->
scuŒdev
;

348 
îr
;

351 
dev
->
qu™tum
 = 
scuŒ_qu™tum
;

352 
dev
->
q£t
 = 
scuŒ_q£t
;

353 
	`£ma_öô
(&
dev
->
£m
, 1);

356 
	`cdev_öô
(&
dev
->
cdev
, 
devöfo
->
f›s
);

357 
	`kobje˘_£t_«me
(&
dev
->
cdev
.
kobj
, 
devöfo
->
«me
);

358 
dev
->
cdev
.
ow√r
 = 
THIS_MODULE
;

359 
îr
 = 
	`cdev_add
 (&
dev
->
cdev
, 
devno
, 1);

361 i‡(
îr
) {

362 
	`¥ötk
(
KERN_NOTICE
 "Eº‹ %dáddög %s\n", 
îr
, 
devöfo
->
«me
);

363 
	`kobje˘_put
(&
dev
->
cdev
.
kobj
);

365 
	`¥ötk
(
KERN_NOTICE
 "%†ªgi°îedáà%x\n", 
devöfo
->
«me
, 
devno
);

366 
	}
}

369 
	$scuŒ_ac˚ss_öô
(
dev_t
 
fú°dev
)

371 
ªsu…
, 
i
;

374 
ªsu…
 = 
	`ªgi°î_chrdev_ªgi⁄
 (
fú°dev
, 
SCULL_N_ADEVS
, "sculla");

375 i‡(
ªsu…
 < 0) {

376 
	`¥ötk
(
KERN_WARNING
 "sculla: deviceÇumberÑegistration failed\n");

379 
scuŒ_a_fú°dev
 = 
fú°dev
;

382 
i
 = 0; i < 
SCULL_N_ADEVS
; i++)

383 
	`scuŒ_ac˚ss_£tup
 (
fú°dev
 + 
i
, 
scuŒ_ac˚ss_devs
 + i);

384  
SCULL_N_ADEVS
;

385 
	}
}

391 
	$scuŒ_ac˚ss_˛ónup
()

393 
scuŒ_li°ôem
 *
Õå
, *
√xt
;

394 
i
;

397 
i
 = 0; i < 
SCULL_N_ADEVS
; i++) {

398 
scuŒ_dev
 *
dev
 = 
scuŒ_ac˚ss_devs
[
i
].
scuŒdev
;

399 
	`cdev_dñ
(&
dev
->
cdev
);

400 
	`scuŒ_åim
(
scuŒ_ac˚ss_devs
[
i
].
scuŒdev
);

404 
	`li°_f‹_óch_íåy_ß„
(
Õå
, 
√xt
, &
scuŒ_c_li°
, 
li°
) {

405 
	`li°_dñ
(&
Õå
->
li°
);

406 
	`scuŒ_åim
(&(
Õå
->
devi˚
));

407 
	`k‰ì
(
Õå
);

411 
	`uƒegi°î_chrdev_ªgi⁄
(
scuŒ_a_fú°dev
, 
SCULL_N_ADEVS
);

413 
	}
}

	@scull/main.c

18 
	~<löux/moduÀ.h
>

19 
	~<löux/moduÀ∑øm.h
>

20 
	~<löux/öô.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/fs.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/¥oc_fs.h
>

28 
	~<löux/f˙é.h
>

29 
	~<löux/£q_fûe.h
>

30 
	~<löux/cdev.h
>

33 
	~<asm/uac˚ss.h
>

35 
	~"scuŒ.h
"

41 
	gscuŒ_maj‹
 = 
SCULL_MAJOR
;

42 
	gscuŒ_mö‹
 = 0;

43 
	gscuŒ_ƒ_devs
 = 
SCULL_NR_DEVS
;

44 
	gscuŒ_qu™tum
 = 
SCULL_QUANTUM
;

45 
	gscuŒ_q£t
 = 
SCULL_QSET
;

47 
moduÀ_∑øm
(
scuŒ_maj‹
, , 
S_IRUGO
);

48 
moduÀ_∑øm
(
scuŒ_mö‹
, , 
S_IRUGO
);

49 
moduÀ_∑øm
(
scuŒ_ƒ_devs
, , 
S_IRUGO
);

50 
moduÀ_∑øm
(
scuŒ_qu™tum
, , 
S_IRUGO
);

51 
moduÀ_∑øm
(
scuŒ_q£t
, , 
S_IRUGO
);

53 
MODULE_AUTHOR
("Alessandro Rubini, Jonathan Corbet");

54 
MODULE_LICENSE
("Dual BSD/GPL");

56 
scuŒ_dev
 *
	gscuŒ_devi˚s
;

63 
	$scuŒ_åim
(
scuŒ_dev
 *
dev
)

65 
scuŒ_q£t
 *
√xt
, *
d±r
;

66 
q£t
 = 
dev
->qset;

67 
i
;

69 
d±r
 = 
dev
->
d©a
; d±r; d±∏
√xt
) {

70 i‡(
d±r
->
d©a
) {

71 
i
 = 0; i < 
q£t
; i++)

72 
	`k‰ì
(
d±r
->
d©a
[
i
]);

73 
	`k‰ì
(
d±r
->
d©a
);

74 
d±r
->
d©a
 = 
NULL
;

76 
√xt
 = 
d±r
->next;

77 
	`k‰ì
(
d±r
);

79 
dev
->
size
 = 0;

80 
dev
->
qu™tum
 = 
scuŒ_qu™tum
;

81 
dev
->
q£t
 = 
scuŒ_q£t
;

82 
dev
->
d©a
 = 
NULL
;

84 
	}
}

85 #ifde‡
SCULL_DEBUG


90 
	$scuŒ_ªad_¥ocmem
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

91 
cou¡
, *
eof
, *
d©a
)

93 
i
, 
j
, 
Àn
 = 0;

94 
limô
 = 
cou¡
 - 80;

96 
i
 = 0; i < 
scuŒ_ƒ_devs
 && 
Àn
 <
limô
; i++) {

97 
scuŒ_dev
 *
d
 = &
scuŒ_devi˚s
[
i
];

98 
scuŒ_q£t
 *
qs
 = 
d
->
d©a
;

99 i‡(
	`down_öãºu±ibÀ
(&
d
->
£m
))

100  -
ERESTARTSYS
;

101 
Àn
 +
	`•rötf
(
buf
+len,"\nDevice %i: qset %i, q %i, sz %li\n",

102 
i
, 
d
->
q£t
, d->
qu™tum
, d->
size
);

103 ; 
qs
 && 
Àn
 <
limô
; q†qs->
√xt
) {

104 
Àn
 +
	`•rötf
(
buf
 +Üen, " itemát %p, qsetát %p\n",

105 
qs
, qs->
d©a
);

106 i‡(
qs
->
d©a
 && !qs->
√xt
)

107 
j
 = 0; j < 
d
->
q£t
; j++) {

108 i‡(
qs
->
d©a
[
j
])

109 
Àn
 +
	`•rötf
(
buf
 +Üen,

111 
j
, 
qs
->
d©a
[j]);

114 
	`up
(&
scuŒ_devi˚s
[
i
].
£m
);

116 *
eof
 = 1;

117  
Àn
;

118 
	}
}

130 *
	$scuŒ_£q_°¨t
(
£q_fûe
 *
s
, 
loff_t
 *
pos
)

132 i‡(*
pos
 >
scuŒ_ƒ_devs
)

133  
NULL
;

134  
scuŒ_devi˚s
 + *
pos
;

135 
	}
}

137 *
	$scuŒ_£q_√xt
(
£q_fûe
 *
s
, *
v
, 
loff_t
 *
pos
)

139 (*
pos
)++;

140 i‡(*
pos
 >
scuŒ_ƒ_devs
)

141  
NULL
;

142  
scuŒ_devi˚s
 + *
pos
;

143 
	}
}

145 
	$scuŒ_£q_°›
(
£q_fûe
 *
s
, *
v
)

148 
	}
}

150 
	$scuŒ_£q_show
(
£q_fûe
 *
s
, *
v
)

152 
scuŒ_dev
 *
dev
 = (scuŒ_dev *Ë
v
;

153 
scuŒ_q£t
 *
d
;

154 
i
;

156 i‡(
	`down_öãºu±ibÀ
(&
dev
->
£m
))

157  -
ERESTARTSYS
;

158 
	`£q_¥ötf
(
s
, "\nDevice %i: qset %i, q %i, sz %li\n",

159 (Ë(
dev
 - 
scuŒ_devi˚s
), dev->
q£t
,

160 
dev
->
qu™tum
, dev->
size
);

161 
d
 = 
dev
->
d©a
; d; d = d->
√xt
) {

162 
	`£q_¥ötf
(
s
, " iãmáà%p, q£à© %p\n", 
d
, d->
d©a
);

163 i‡(
d
->
d©a
 && !d->
√xt
)

164 
i
 = 0; i < 
dev
->
q£t
; i++) {

165 i‡(
d
->
d©a
[
i
])

166 
	`£q_¥ötf
(
s
, " % 4i: %8p\n",

167 
i
, 
d
->
d©a
[i]);

170 
	`up
(&
dev
->
£m
);

172 
	}
}

177 
£q_›î©i⁄s
 
	gscuŒ_£q_›s
 = {

178 .
°¨t
 = 
scuŒ_£q_°¨t
,

179 .
	g√xt
 = 
scuŒ_£q_√xt
,

180 .
	g°›
 = 
scuŒ_£q_°›
,

181 .
	gshow
 = 
scuŒ_£q_show


188 
	$scuŒ_¥oc_›í
(
öode
 *öode, 
fûe
 *file)

190  
	`£q_›í
(
fûe
, &
scuŒ_£q_›s
);

191 
	}
}

196 
fûe_›î©i⁄s
 
	gscuŒ_¥oc_›s
 = {

197 .
ow√r
 = 
THIS_MODULE
,

198 .
	g›í
 = 
scuŒ_¥oc_›í
,

199 .
	gªad
 = 
£q_ªad
,

200 .
	gŒ£ek
 = 
£q_l£ek
,

201 .
	gªÀa£
 = 
£q_ªÀa£


209 
	$scuŒ_¸óã_¥oc
()

211 
¥oc_dú_íåy
 *
íåy
;

212 
	`¸óã_¥oc_ªad_íåy
("scullmem", 0 ,

213 
NULL
 , 
scuŒ_ªad_¥ocmem
,

214 
NULL
 );

215 
íåy
 = 
	`¸óã_¥oc_íåy
("scuŒ£q", 0, 
NULL
);

216 i‡(
íåy
)

217 
íåy
->
¥oc_f›s
 = &
scuŒ_¥oc_›s
;

218 
	}
}

220 
	$scuŒ_ªmove_¥oc
()

223 
	`ªmove_¥oc_íåy
("scuŒmem", 
NULL
 );

224 
	`ªmove_¥oc_íåy
("scuŒ£q", 
NULL
);

225 
	}
}

238 
	$scuŒ_›í
(
öode
 *öode, 
fûe
 *
fûp
)

240 
scuŒ_dev
 *
dev
;

242 
dev
 = 
	`c⁄èöî_of
(
öode
->
i_cdev
, 
scuŒ_dev
, 
cdev
);

243 
fûp
->
¥iv©e_d©a
 = 
dev
;

246 i‡–(
fûp
->
f_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

247 i‡(
	`down_öãºu±ibÀ
(&
dev
->
£m
))

248  -
ERESTARTSYS
;

249 
	`scuŒ_åim
(
dev
);

250 
	`up
(&
dev
->
£m
);

253 
	}
}

255 
	$scuŒ_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

258 
	}
}

262 
scuŒ_q£t
 *
	$scuŒ_fﬁlow
(
scuŒ_dev
 *
dev
, 
n
)

264 
scuŒ_q£t
 *
qs
 = 
dev
->
d©a
;

267 i‡(! 
qs
) {

268 
qs
 = 
dev
->
d©a
 = 
	`kmÆloc
((
scuŒ_q£t
), 
GFP_KERNEL
);

269 i‡(
qs
 =
NULL
)

270  
NULL
;

271 
	`mem£t
(
qs
, 0, (
scuŒ_q£t
));

275 
n
--) {

276 i‡(!
qs
->
√xt
) {

277 
qs
->
√xt
 = 
	`kmÆloc
((
scuŒ_q£t
), 
GFP_KERNEL
);

278 i‡(
qs
->
√xt
 =
NULL
)

279  
NULL
;

280 
	`mem£t
(
qs
->
√xt
, 0, (
scuŒ_q£t
));

282 
qs
 = qs->
√xt
;

285  
qs
;

286 
	}
}

292 
ssize_t
 
	$scuŒ_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

293 
loff_t
 *
f_pos
)

295 
scuŒ_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

296 
scuŒ_q£t
 *
d±r
;

297 
qu™tum
 = 
dev
->qu™tum, 
q£t
 = dev->qset;

298 
ôemsize
 = 
qu™tum
 * 
q£t
;

299 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

300 
ssize_t
 
ªtvÆ
 = 0;

302 i‡(
	`down_öãºu±ibÀ
(&
dev
->
£m
))

303  -
ERESTARTSYS
;

304 i‡(*
f_pos
 >
dev
->
size
)

305 
out
;

306 i‡(*
f_pos
 + 
cou¡
 > 
dev
->
size
)

307 
cou¡
 = 
dev
->
size
 - *
f_pos
;

310 
ôem
 = ()*
f_pos
 / 
ôemsize
;

311 
ª°
 = ()*
f_pos
 % 
ôemsize
;

312 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

315 
d±r
 = 
	`scuŒ_fﬁlow
(
dev
, 
ôem
);

317 i‡(
d±r
 =
NULL
 || !d±r->
d©a
 || ! d±r->d©a[
s_pos
])

318 
out
;

321 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

322 
cou¡
 = 
qu™tum
 - 
q_pos
;

324 i‡(
	`c›y_to_u£r
(
buf
, 
d±r
->
d©a
[
s_pos
] + 
q_pos
, 
cou¡
)) {

325 
ªtvÆ
 = -
EFAULT
;

326 
out
;

328 *
f_pos
 +
cou¡
;

329 
ªtvÆ
 = 
cou¡
;

331 
out
:

332 
	`up
(&
dev
->
£m
);

333  
ªtvÆ
;

334 
	}
}

336 
ssize_t
 
	$scuŒ_wrôe
(
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

337 
loff_t
 *
f_pos
)

339 
scuŒ_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

340 
scuŒ_q£t
 *
d±r
;

341 
qu™tum
 = 
dev
->qu™tum, 
q£t
 = dev->qset;

342 
ôemsize
 = 
qu™tum
 * 
q£t
;

343 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

344 
ssize_t
 
ªtvÆ
 = -
ENOMEM
;

346 i‡(
	`down_öãºu±ibÀ
(&
dev
->
£m
))

347  -
ERESTARTSYS
;

350 
ôem
 = ()*
f_pos
 / 
ôemsize
;

351 
ª°
 = ()*
f_pos
 % 
ôemsize
;

352 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

355 
d±r
 = 
	`scuŒ_fﬁlow
(
dev
, 
ôem
);

356 i‡(
d±r
 =
NULL
)

357 
out
;

358 i‡(!
d±r
->
d©a
) {

359 
d±r
->
d©a
 = 
	`kmÆloc
(
q£t
 * (*), 
GFP_KERNEL
);

360 i‡(!
d±r
->
d©a
)

361 
out
;

362 
	`mem£t
(
d±r
->
d©a
, 0, 
q£t
 * (*));

364 i‡(!
d±r
->
d©a
[
s_pos
]) {

365 
d±r
->
d©a
[
s_pos
] = 
	`kmÆloc
(
qu™tum
, 
GFP_KERNEL
);

366 i‡(!
d±r
->
d©a
[
s_pos
])

367 
out
;

370 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

371 
cou¡
 = 
qu™tum
 - 
q_pos
;

373 i‡(
	`c›y_‰om_u£r
(
d±r
->
d©a
[
s_pos
]+
q_pos
, 
buf
, 
cou¡
)) {

374 
ªtvÆ
 = -
EFAULT
;

375 
out
;

377 *
f_pos
 +
cou¡
;

378 
ªtvÆ
 = 
cou¡
;

381 i‡(
dev
->
size
 < *
f_pos
)

382 
dev
->
size
 = *
f_pos
;

384 
out
:

385 
	`up
(&
dev
->
£m
);

386  
ªtvÆ
;

387 
	}
}

393 
	$scuŒ_io˘l
(
fûe
 *
fûp
,

394 
cmd
, 
¨g
)

397 
îr
 = 0, 
tmp
;

398 
ªtvÆ
 = 0;

404 i‡(
	`_IOC_TYPE
(
cmd
Ë!
SCULL_IOC_MAGIC
Ë -
ENOTTY
;

405 i‡(
	`_IOC_NR
(
cmd
Ë> 
SCULL_IOC_MAXNR
Ë -
ENOTTY
;

413 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_READ
)

414 
îr
 = !
	`ac˚ss_ok
(
VERIFY_WRITE
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

415 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_WRITE
)

416 
îr
 = !
	`ac˚ss_ok
(
VERIFY_READ
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

417 i‡(
îr
Ë -
EFAULT
;

419 
cmd
) {

421 
SCULL_IOCRESET
:

422 
scuŒ_qu™tum
 = 
SCULL_QUANTUM
;

423 
scuŒ_q£t
 = 
SCULL_QSET
;

426 
SCULL_IOCSQUANTUM
:

427 i‡(! 
	`ˇ∑bÀ
 (
CAP_SYS_ADMIN
))

428  -
EPERM
;

429 
ªtvÆ
 = 
	`__gë_u£r
(
scuŒ_qu™tum
, (
__u£r
 *)
¨g
);

432 
SCULL_IOCTQUANTUM
:

433 i‡(! 
	`ˇ∑bÀ
 (
CAP_SYS_ADMIN
))

434  -
EPERM
;

435 
scuŒ_qu™tum
 = 
¨g
;

438 
SCULL_IOCGQUANTUM
:

439 
ªtvÆ
 = 
	`__put_u£r
(
scuŒ_qu™tum
, (
__u£r
 *)
¨g
);

442 
SCULL_IOCQQUANTUM
:

443  
scuŒ_qu™tum
;

445 
SCULL_IOCXQUANTUM
:

446 i‡(! 
	`ˇ∑bÀ
 (
CAP_SYS_ADMIN
))

447  -
EPERM
;

448 
tmp
 = 
scuŒ_qu™tum
;

449 
ªtvÆ
 = 
	`__gë_u£r
(
scuŒ_qu™tum
, (
__u£r
 *)
¨g
);

450 i‡(
ªtvÆ
 == 0)

451 
ªtvÆ
 = 
	`__put_u£r
(
tmp
, (
__u£r
 *)
¨g
);

454 
SCULL_IOCHQUANTUM
:

455 i‡(! 
	`ˇ∑bÀ
 (
CAP_SYS_ADMIN
))

456  -
EPERM
;

457 
tmp
 = 
scuŒ_qu™tum
;

458 
scuŒ_qu™tum
 = 
¨g
;

459  
tmp
;

461 
SCULL_IOCSQSET
:

462 i‡(! 
	`ˇ∑bÀ
 (
CAP_SYS_ADMIN
))

463  -
EPERM
;

464 
ªtvÆ
 = 
	`__gë_u£r
(
scuŒ_q£t
, (
__u£r
 *)
¨g
);

467 
SCULL_IOCTQSET
:

468 i‡(! 
	`ˇ∑bÀ
 (
CAP_SYS_ADMIN
))

469  -
EPERM
;

470 
scuŒ_q£t
 = 
¨g
;

473 
SCULL_IOCGQSET
:

474 
ªtvÆ
 = 
	`__put_u£r
(
scuŒ_q£t
, (
__u£r
 *)
¨g
);

477 
SCULL_IOCQQSET
:

478  
scuŒ_q£t
;

480 
SCULL_IOCXQSET
:

481 i‡(! 
	`ˇ∑bÀ
 (
CAP_SYS_ADMIN
))

482  -
EPERM
;

483 
tmp
 = 
scuŒ_q£t
;

484 
ªtvÆ
 = 
	`__gë_u£r
(
scuŒ_q£t
, (
__u£r
 *)
¨g
);

485 i‡(
ªtvÆ
 == 0)

486 
ªtvÆ
 = 
	`put_u£r
(
tmp
, (
__u£r
 *)
¨g
);

489 
SCULL_IOCHQSET
:

490 i‡(! 
	`ˇ∑bÀ
 (
CAP_SYS_ADMIN
))

491  -
EPERM
;

492 
tmp
 = 
scuŒ_q£t
;

493 
scuŒ_q£t
 = 
¨g
;

494  
tmp
;

502 
SCULL_P_IOCTSIZE
:

503 
scuŒ_p_buf„r
 = 
¨g
;

506 
SCULL_P_IOCQSIZE
:

507  
scuŒ_p_buf„r
;

511  -
ENOTTY
;

513  
ªtvÆ
;

515 
	}
}

523 
loff_t
 
	$scuŒ_Œ£ek
(
fûe
 *
fûp
, 
loff_t
 
off
, 
whí˚
)

525 
scuŒ_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

526 
loff_t
 
√wpos
;

528 
whí˚
) {

530 
√wpos
 = 
off
;

534 
√wpos
 = 
fûp
->
f_pos
 + 
off
;

538 
√wpos
 = 
dev
->
size
 + 
off
;

542  -
EINVAL
;

544 i‡(
√wpos
 < 0Ë -
EINVAL
;

545 
fûp
->
f_pos
 = 
√wpos
;

546  
√wpos
;

547 
	}
}

551 
fûe_›î©i⁄s
 
	gscuŒ_f›s
 = {

552 .
ow√r
 = 
THIS_MODULE
,

553 .
	gŒ£ek
 = 
scuŒ_Œ£ek
,

554 .
	gªad
 = 
scuŒ_ªad
,

555 .
	gwrôe
 = 
scuŒ_wrôe
,

556 .
	gu∆ocked_io˘l
 = 
scuŒ_io˘l
,

557 .
	g›í
 = 
scuŒ_›í
,

558 .
	gªÀa£
 = 
scuŒ_ªÀa£
,

570 
	$scuŒ_˛ónup_moduÀ
()

572 
i
;

573 
dev_t
 
devno
 = 
	`MKDEV
(
scuŒ_maj‹
, 
scuŒ_mö‹
);

576 i‡(
scuŒ_devi˚s
) {

577 
i
 = 0; i < 
scuŒ_ƒ_devs
; i++) {

578 
	`scuŒ_åim
(
scuŒ_devi˚s
 + 
i
);

579 
	`cdev_dñ
(&
scuŒ_devi˚s
[
i
].
cdev
);

581 
	`k‰ì
(
scuŒ_devi˚s
);

584 #ifde‡
SCULL_DEBUG


585 
	`scuŒ_ªmove_¥oc
();

589 
	`uƒegi°î_chrdev_ªgi⁄
(
devno
, 
scuŒ_ƒ_devs
);

592 
	`scuŒ_p_˛ónup
();

593 
	`scuŒ_ac˚ss_˛ónup
();

595 
	}
}

601 
	$scuŒ_£tup_cdev
(
scuŒ_dev
 *
dev
, 
ödex
)

603 
îr
, 
devno
 = 
	`MKDEV
(
scuŒ_maj‹
, 
scuŒ_mö‹
 + 
ödex
);

605 
	`cdev_öô
(&
dev
->
cdev
, &
scuŒ_f›s
);

606 
dev
->
cdev
.
ow√r
 = 
THIS_MODULE
;

607 
dev
->
cdev
.
›s
 = &
scuŒ_f›s
;

608 
îr
 = 
	`cdev_add
 (&
dev
->
cdev
, 
devno
, 1);

610 i‡(
îr
)

611 
	`¥ötk
(
KERN_NOTICE
 "Eº‹ %dáddög scuŒ%d", 
îr
, 
ödex
);

612 
	}
}

615 
	$scuŒ_öô_moduÀ
()

617 
ªsu…
, 
i
;

618 
dev_t
 
dev
 = 0;

624 i‡(
scuŒ_maj‹
) {

625 
dev
 = 
	`MKDEV
(
scuŒ_maj‹
, 
scuŒ_mö‹
);

626 
ªsu…
 = 
	`ªgi°î_chrdev_ªgi⁄
(
dev
, 
scuŒ_ƒ_devs
, "scull");

628 
ªsu…
 = 
	`Æloc_chrdev_ªgi⁄
(&
dev
, 
scuŒ_mö‹
, 
scuŒ_ƒ_devs
,

630 
scuŒ_maj‹
 = 
	`MAJOR
(
dev
);

632 i‡(
ªsu…
 < 0) {

633 
	`¥ötk
(
KERN_WARNING
 "scuŒ: c™'àgë maj‹ %d\n", 
scuŒ_maj‹
);

634  
ªsu…
;

641 
scuŒ_devi˚s
 = 
	`kmÆloc
(
scuŒ_ƒ_devs
 * (
scuŒ_dev
), 
GFP_KERNEL
);

642 i‡(!
scuŒ_devi˚s
) {

643 
ªsu…
 = -
ENOMEM
;

644 
Áû
;

646 
	`mem£t
(
scuŒ_devi˚s
, 0, 
scuŒ_ƒ_devs
 * (
scuŒ_dev
));

649 
i
 = 0; i < 
scuŒ_ƒ_devs
; i++) {

650 
scuŒ_devi˚s
[
i
].
qu™tum
 = 
scuŒ_qu™tum
;

651 
scuŒ_devi˚s
[
i
].
q£t
 = 
scuŒ_q£t
;

652 
	`£ma_öô
(&
scuŒ_devi˚s
[
i
].
£m
, 1);

653 
	`scuŒ_£tup_cdev
(&
scuŒ_devi˚s
[
i
], i);

657 
dev
 = 
	`MKDEV
(
scuŒ_maj‹
, 
scuŒ_mö‹
 + 
scuŒ_ƒ_devs
);

658 
dev
 +
	`scuŒ_p_öô
(dev);

659 
dev
 +
	`scuŒ_ac˚ss_öô
(dev);

661 #ifde‡
SCULL_DEBUG


662 
	`scuŒ_¸óã_¥oc
();

667 
Áû
:

668 
	`scuŒ_˛ónup_moduÀ
();

669  
ªsu…
;

670 
	}
}

672 
moduÀ_öô
(
scuŒ_öô_moduÀ
);

673 
moduÀ_exô
(
scuŒ_˛ónup_moduÀ
);

	@scull/pipe.c

17 
	~<löux/moduÀ.h
>

18 
	~<löux/moduÀ∑øm.h
>

20 
	~<löux/kî√l.h
>

21 
	~<löux/¶ab.h
>

22 
	~<löux/fs.h
>

23 
	~<löux/¥oc_fs.h
>

24 
	~<löux/î∫o.h
>

25 
	~<löux/ty≥s.h
>

26 
	~<löux/f˙é.h
>

27 
	~<löux/pﬁl.h
>

28 
	~<löux/cdev.h
>

29 
	~<asm/uac˚ss.h
>

30 
	~<löux/sched.h
>

32 
	~"scuŒ.h
"

34 
	sscuŒ_pùe
 {

35 
waô_queue_hód_t
 
	möq
, 
	moutq
;

36 *
	mbuf„r
, *
	míd
;

37 
	mbuf„rsize
;

38 *
	mΩ
, *
	mwp
;

39 
	mƒódîs
, 
	mnwrôîs
;

40 
Ásync_°ru˘
 *
	masync_queue
;

41 
£m≠h‹e
 
	m£m
;

42 
cdev
 
	mcdev
;

46 
	gscuŒ_p_ƒ_devs
 = 
SCULL_P_NR_DEVS
;

47 
	gscuŒ_p_buf„r
 = 
SCULL_P_BUFFER
;

48 
dev_t
 
	gscuŒ_p_devno
;

50 
moduÀ_∑øm
(
scuŒ_p_ƒ_devs
, , 0);

51 
moduÀ_∑øm
(
scuŒ_p_buf„r
, , 0);

53 
scuŒ_pùe
 *
	gscuŒ_p_devi˚s
;

55 
scuŒ_p_Ásync
(
fd
, 
fûe
 *
fûp
, 
mode
);

56 
•a˚‰ì
(
scuŒ_pùe
 *
dev
);

62 
	$scuŒ_p_›í
(
öode
 *öode, 
fûe
 *
fûp
)

64 
scuŒ_pùe
 *
dev
;

66 
dev
 = 
	`c⁄èöî_of
(
öode
->
i_cdev
, 
scuŒ_pùe
, 
cdev
);

67 
fûp
->
¥iv©e_d©a
 = 
dev
;

69 i‡(
	`down_öãºu±ibÀ
(&
dev
->
£m
))

70  -
ERESTARTSYS
;

71 i‡(!
dev
->
buf„r
) {

73 
dev
->
buf„r
 = 
	`kmÆloc
(
scuŒ_p_buf„r
, 
GFP_KERNEL
);

74 i‡(!
dev
->
buf„r
) {

75 
	`up
(&
dev
->
£m
);

76  -
ENOMEM
;

79 
dev
->
buf„rsize
 = 
scuŒ_p_buf„r
;

80 
dev
->
íd
 = dev->
buf„r
 + dev->
buf„rsize
;

81 
dev
->
Ω
 = dev->
wp
 = dev->
buf„r
;

84 i‡(
fûp
->
f_mode
 & 
FMODE_READ
)

85 
dev
->
ƒódîs
++;

86 i‡(
fûp
->
f_mode
 & 
FMODE_WRITE
)

87 
dev
->
nwrôîs
++;

88 
	`up
(&
dev
->
£m
);

90  
	`n⁄£ekabÀ_›í
(
öode
, 
fûp
);

91 
	}
}

95 
	$scuŒ_p_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

97 
scuŒ_pùe
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

100 
	`scuŒ_p_Ásync
(-1, 
fûp
, 0);

101 
	`down
(&
dev
->
£m
);

102 i‡(
fûp
->
f_mode
 & 
FMODE_READ
)

103 
dev
->
ƒódîs
--;

104 i‡(
fûp
->
f_mode
 & 
FMODE_WRITE
)

105 
dev
->
nwrôîs
--;

106 i‡(
dev
->
ƒódîs
 + dev->
nwrôîs
 == 0) {

107 
	`k‰ì
(
dev
->
buf„r
);

108 
dev
->
buf„r
 = 
NULL
;

110 
	`up
(&
dev
->
£m
);

112 
	}
}

119 
ssize_t
 
	$scuŒ_p_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

120 
loff_t
 *
f_pos
)

122 
scuŒ_pùe
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

124 i‡(
	`down_öãºu±ibÀ
(&
dev
->
£m
))

125  -
ERESTARTSYS
;

127 
dev
->
Ω
 =dev->
wp
) {

128 
	`up
(&
dev
->
£m
);

129 i‡(
fûp
->
f_Êags
 & 
O_NONBLOCK
)

130  -
EAGAIN
;

131 
	`PDEBUG
("\"%s\"Ñódög: goögÅÿ¶ìp\n", 
cuºít
->
comm
);

132 i‡(
	`waô_evít_öãºu±ibÀ
(
dev
->
öq
, (dev->
Ω
 !dev->
wp
)))

133  -
ERESTARTSYS
;

135 i‡(
	`down_öãºu±ibÀ
(&
dev
->
£m
))

136  -
ERESTARTSYS
;

139 i‡(
dev
->
wp
 > dev->
Ω
)

140 
cou¡
 = 
	`mö
(cou¡, (
size_t
)(
dev
->
wp
 - dev->
Ω
));

142 
cou¡
 = 
	`mö
(cou¡, (
size_t
)(
dev
->
íd
 - dev->
Ω
));

143 i‡(
	`c›y_to_u£r
(
buf
, 
dev
->
Ω
, 
cou¡
)) {

144 
	`up
 (&
dev
->
£m
);

145  -
EFAULT
;

147 
dev
->
Ω
 +
cou¡
;

148 i‡(
dev
->
Ω
 =dev->
íd
)

149 
dev
->
Ω
 = dev->
buf„r
;

150 
	`up
 (&
dev
->
£m
);

153 
	`wake_up_öãºu±ibÀ
(&
dev
->
outq
);

154 
	`PDEBUG
("\"%s\" didÑód %lòbyãs\n",
cuºít
->
comm
, ()
cou¡
);

155  
cou¡
;

156 
	}
}

160 
	$scuŒ_gëwrôe•a˚
(
scuŒ_pùe
 *
dev
, 
fûe
 *
fûp
)

162 
	`•a˚‰ì
(
dev
) == 0) {

163 
	`DEFINE_WAIT
(
waô
);

165 
	`up
(&
dev
->
£m
);

166 i‡(
fûp
->
f_Êags
 & 
O_NONBLOCK
)

167  -
EAGAIN
;

168 
	`PDEBUG
("\"%s\" wrôög: goögÅÿ¶ìp\n",
cuºít
->
comm
);

169 
	`¥ï¨e_to_waô
(&
dev
->
outq
, &
waô
, 
TASK_INTERRUPTIBLE
);

170 i‡(
	`•a˚‰ì
(
dev
) == 0)

171 
	`scheduÀ
();

172 
	`föish_waô
(&
dev
->
outq
, &
waô
);

173 i‡(
	`sig«l_≥ndög
(
cuºít
))

174  -
ERESTARTSYS
;

175 i‡(
	`down_öãºu±ibÀ
(&
dev
->
£m
))

176  -
ERESTARTSYS
;

179 
	}
}

182 
	$•a˚‰ì
(
scuŒ_pùe
 *
dev
)

184 i‡(
dev
->
Ω
 =dev->
wp
)

185  
dev
->
buf„rsize
 - 1;

186  ((
dev
->
Ω
 + dev->
buf„rsize
 - dev->
wp
) % dev->buffersize) - 1;

187 
	}
}

189 
ssize_t
 
	$scuŒ_p_wrôe
(
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

190 
loff_t
 *
f_pos
)

192 
scuŒ_pùe
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

193 
ªsu…
;

195 i‡(
	`down_öãºu±ibÀ
(&
dev
->
£m
))

196  -
ERESTARTSYS
;

199 
ªsu…
 = 
	`scuŒ_gëwrôe•a˚
(
dev
, 
fûp
);

200 i‡(
ªsu…
)

201  
ªsu…
;

204 
cou¡
 = 
	`mö
(cou¡, (
size_t
)
	`•a˚‰ì
(
dev
));

205 i‡(
dev
->
wp
 >dev->
Ω
)

206 
cou¡
 = 
	`mö
(cou¡, (
size_t
)(
dev
->
íd
 - dev->
wp
));

208 
cou¡
 = 
	`mö
(cou¡, (
size_t
)(
dev
->
Ω
 - dev->
wp
 - 1));

209 
	`PDEBUG
("GoögÅÿac˚± %lòbyã†tÿ%∞‰om %p\n", ()
cou¡
, 
dev
->
wp
, 
buf
);

210 i‡(
	`c›y_‰om_u£r
(
dev
->
wp
, 
buf
, 
cou¡
)) {

211 
	`up
 (&
dev
->
£m
);

212  -
EFAULT
;

214 
dev
->
wp
 +
cou¡
;

215 i‡(
dev
->
wp
 =dev->
íd
)

216 
dev
->
wp
 = dev->
buf„r
;

217 
	`up
(&
dev
->
£m
);

220 
	`wake_up_öãºu±ibÀ
(&
dev
->
öq
);

223 i‡(
dev
->
async_queue
)

224 
	`kûl_Ásync
(&
dev
->
async_queue
, 
SIGIO
, 
POLL_IN
);

225 
	`PDEBUG
("\"%s\" did wrôê%lòbyãs\n",
cuºít
->
comm
, ()
cou¡
);

226  
cou¡
;

227 
	}
}

229 
	$scuŒ_p_pﬁl
(
fûe
 *
fûp
, 
pﬁl_èbÀ
 *
waô
)

231 
scuŒ_pùe
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

232 
mask
 = 0;

239 
	`down
(&
dev
->
£m
);

240 
	`pﬁl_waô
(
fûp
, &
dev
->
öq
, 
waô
);

241 
	`pﬁl_waô
(
fûp
, &
dev
->
outq
, 
waô
);

242 i‡(
dev
->
Ω
 !dev->
wp
)

243 
mask
 |
POLLIN
 | 
POLLRDNORM
;

244 i‡(
	`•a˚‰ì
(
dev
))

245 
mask
 |
POLLOUT
 | 
POLLWRNORM
;

246 
	`up
(&
dev
->
£m
);

247  
mask
;

248 
	}
}

254 
	$scuŒ_p_Ásync
(
fd
, 
fûe
 *
fûp
, 
mode
)

256 
scuŒ_pùe
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

258  
	`Ásync_hñ≥r
(
fd
, 
fûp
, 
mode
, &
dev
->
async_queue
);

259 
	}
}

264 #ifde‡
SCULL_DEBUG


265 
	$scuŒp_¥oc_off£t
(*
buf
, **
°¨t
, 
off_t
 *
off£t
, *
Àn
)

267 i‡(*
off£t
 == 0)

269 i‡(*
off£t
 >*
Àn
) {

270 *
off£t
 -*
Àn
;

271 *
Àn
 = 0;

274 *
°¨t
 = 
buf
 + *
off£t
;

275 *
off£t
 = 0;

277 
	}
}

280 
	$scuŒ_ªad_p_mem
(*
buf
, **
°¨t
, 
off_t
 
off£t
, 
cou¡
,

281 *
eof
, *
d©a
)

283 
i
, 
Àn
;

284 
scuŒ_pùe
 *
p
;

286 
	#LIMIT
 (
PAGE_SIZE
-200Ë

	)

287 *
°¨t
 = 
buf
;

288 
Àn
 = 
	`•rötf
(
buf
, "DeÁu… buf„rsizêi†%i\n", 
scuŒ_p_buf„r
);

289 
i
 = 0; i<
scuŒ_p_ƒ_devs
 && 
Àn
 <
LIMIT
; i++) {

290 
p
 = &
scuŒ_p_devi˚s
[
i
];

291 i‡(
	`down_öãºu±ibÀ
(&
p
->
£m
))

292  -
ERESTARTSYS
;

293 
Àn
 +
	`•rötf
(
buf
+Àn, "\nDevi˚ %i: %p\n", 
i
, 
p
);

295 
Àn
 +
	`•rötf
(
buf
+Àn, " Buf„r: %∞tÿ%∞(%òbyãs)\n", 
p
->
buf„r
,Ö->
íd
,Ö->
buf„rsize
);

296 
Àn
 +
	`•rötf
(
buf
+Àn, "Ñ∞%∞ w∞%p\n", 
p
->
Ω
,Ö->
wp
);

297 
Àn
 +
	`•rötf
(
buf
+Àn, "Ñódî†%ò wrôî†%i\n", 
p
->
ƒódîs
,Ö->
nwrôîs
);

298 
	`up
(&
p
->
£m
);

299 
	`scuŒp_¥oc_off£t
(
buf
, 
°¨t
, &
off£t
, &
Àn
);

301 *
eof
 = (
Àn
 <
LIMIT
);

302  
Àn
;

303 
	}
}

314 
fûe_›î©i⁄s
 
	gscuŒ_pùe_f›s
 = {

315 .
ow√r
 = 
THIS_MODULE
,

316 .
	gŒ£ek
 = 
no_Œ£ek
,

317 .
	gªad
 = 
scuŒ_p_ªad
,

318 .
	gwrôe
 = 
scuŒ_p_wrôe
,

319 .
	gpﬁl
 = 
scuŒ_p_pﬁl
,

320 .
	gu∆ocked_io˘l
 = 
scuŒ_io˘l
,

321 .
	g›í
 = 
scuŒ_p_›í
,

322 .
	gªÀa£
 = 
scuŒ_p_ªÀa£
,

323 .
	gÁsync
 = 
scuŒ_p_Ásync
,

330 
	$scuŒ_p_£tup_cdev
(
scuŒ_pùe
 *
dev
, 
ödex
)

332 
îr
, 
devno
 = 
scuŒ_p_devno
 + 
ödex
;

334 
	`cdev_öô
(&
dev
->
cdev
, &
scuŒ_pùe_f›s
);

335 
dev
->
cdev
.
ow√r
 = 
THIS_MODULE
;

336 
îr
 = 
	`cdev_add
 (&
dev
->
cdev
, 
devno
, 1);

338 i‡(
îr
)

339 
	`¥ötk
(
KERN_NOTICE
 "Eº‹ %dáddög scuŒpùe%d", 
îr
, 
ödex
);

340 
	}
}

347 
	$scuŒ_p_öô
(
dev_t
 
fú°dev
)

349 
i
, 
ªsu…
;

351 
ªsu…
 = 
	`ªgi°î_chrdev_ªgi⁄
(
fú°dev
, 
scuŒ_p_ƒ_devs
, "scullp");

352 i‡(
ªsu…
 < 0) {

353 
	`¥ötk
(
KERN_NOTICE
 "U«bÀÅÿgë scuŒ∞ªgi⁄,Éº‹ %d\n", 
ªsu…
);

356 
scuŒ_p_devno
 = 
fú°dev
;

357 
scuŒ_p_devi˚s
 = 
	`kmÆloc
(
scuŒ_p_ƒ_devs
 * (
scuŒ_pùe
), 
GFP_KERNEL
);

358 i‡(
scuŒ_p_devi˚s
 =
NULL
) {

359 
	`uƒegi°î_chrdev_ªgi⁄
(
fú°dev
, 
scuŒ_p_ƒ_devs
);

362 
	`mem£t
(
scuŒ_p_devi˚s
, 0, 
scuŒ_p_ƒ_devs
 * (
scuŒ_pùe
));

363 
i
 = 0; i < 
scuŒ_p_ƒ_devs
; i++) {

364 
	`öô_waôqueue_hód
(&(
scuŒ_p_devi˚s
[
i
].
öq
));

365 
	`öô_waôqueue_hód
(&(
scuŒ_p_devi˚s
[
i
].
outq
));

366 
	`£ma_öô
(&
scuŒ_p_devi˚s
[
i
].
£m
, 1);

367 
	`scuŒ_p_£tup_cdev
(
scuŒ_p_devi˚s
 + 
i
, i);

369 #ifde‡
SCULL_DEBUG


370 
	`¸óã_¥oc_ªad_íåy
("scuŒpùe", 0, 
NULL
, 
scuŒ_ªad_p_mem
, NULL);

372  
scuŒ_p_ƒ_devs
;

373 
	}
}

379 
	$scuŒ_p_˛ónup
()

381 
i
;

383 #ifde‡
SCULL_DEBUG


384 
	`ªmove_¥oc_íåy
("scuŒpùe", 
NULL
);

387 i‡(!
scuŒ_p_devi˚s
)

390 
i
 = 0; i < 
scuŒ_p_ƒ_devs
; i++) {

391 
	`cdev_dñ
(&
scuŒ_p_devi˚s
[
i
].
cdev
);

392 
	`k‰ì
(
scuŒ_p_devi˚s
[
i
].
buf„r
);

394 
	`k‰ì
(
scuŒ_p_devi˚s
);

395 
	`uƒegi°î_chrdev_ªgi⁄
(
scuŒ_p_devno
, 
scuŒ_p_ƒ_devs
);

396 
scuŒ_p_devi˚s
 = 
NULL
;

397 
	}
}

	@scull/scull.h

18 #i‚de‡
_SCULL_H_


19 
	#_SCULL_H_


	)

21 
	~<löux/io˘l.h
>

27 #unde‡
PDEBUG


28 #ifde‡
SCULL_DEBUG


29 #ifde‡
__KERNEL__


31 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`¥ötk
–
KERN_DEBUG
 "scuŒ: " fmt, ##árgs)

	)

34 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt, ##árgs)

	)

37 
	#PDEBUG
(
fmt
, 
¨gs
...Ë

	)

40 #unde‡
PDEBUGG


41 
	#PDEBUGG
(
fmt
, 
¨gs
...Ë

	)

43 #i‚de‡
SCULL_MAJOR


44 
	#SCULL_MAJOR
 0

	)

47 #i‚de‡
SCULL_NR_DEVS


48 
	#SCULL_NR_DEVS
 4

	)

51 #i‚de‡
SCULL_P_NR_DEVS


52 
	#SCULL_P_NR_DEVS
 4

	)

64 #i‚de‡
SCULL_QUANTUM


65 
	#SCULL_QUANTUM
 4000

	)

68 #i‚de‡
SCULL_QSET


69 
	#SCULL_QSET
 1000

	)

75 #i‚de‡
SCULL_P_BUFFER


76 
	#SCULL_P_BUFFER
 4000

	)

82 
	sscuŒ_q£t
 {

83 **
	md©a
;

84 
scuŒ_q£t
 *
	m√xt
;

87 
	sscuŒ_dev
 {

88 
scuŒ_q£t
 *
	md©a
;

89 
	mqu™tum
;

90 
	mq£t
;

91 
	msize
;

92 
	mac˚ss_key
;

93 
£m≠h‹e
 
	m£m
;

94 
cdev
 
	mcdev
;

100 
	#TYPE
(
mö‹
Ë(((mö‹Ë>> 4Ë& 0xfË

	)

101 
	#NUM
(
mö‹
Ë((mö‹Ë& 0xfË

	)

107 
scuŒ_maj‹
;

108 
scuŒ_ƒ_devs
;

109 
scuŒ_qu™tum
;

110 
scuŒ_q£t
;

112 
scuŒ_p_buf„r
;

119 
scuŒ_p_öô
(
dev_t
 
dev
);

120 
scuŒ_p_˛ónup
();

121 
scuŒ_ac˚ss_öô
(
dev_t
 
dev
);

122 
scuŒ_ac˚ss_˛ónup
();

124 
scuŒ_åim
(
scuŒ_dev
 *
dev
);

126 
ssize_t
 
scuŒ_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

127 
loff_t
 *
f_pos
);

128 
ssize_t
 
scuŒ_wrôe
(
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

129 
loff_t
 *
f_pos
);

130 
loff_t
 
scuŒ_Œ£ek
(
fûe
 *
fûp
,Üoff_à
off
, 
whí˚
);

131 
scuŒ_io˘l
(
fûe
 *
fûp
,

132 
cmd
, 
¨g
);

140 
	#SCULL_IOC_MAGIC
 'k'

	)

143 
	#SCULL_IOCRESET
 
	`_IO
(
SCULL_IOC_MAGIC
, 0)

	)

153 
	#SCULL_IOCSQUANTUM
 
	`_IOW
(
SCULL_IOC_MAGIC
, 1, )

	)

154 
	#SCULL_IOCSQSET
 
	`_IOW
(
SCULL_IOC_MAGIC
, 2, )

	)

155 
	#SCULL_IOCTQUANTUM
 
	`_IO
(
SCULL_IOC_MAGIC
, 3)

	)

156 
	#SCULL_IOCTQSET
 
	`_IO
(
SCULL_IOC_MAGIC
, 4)

	)

157 
	#SCULL_IOCGQUANTUM
 
	`_IOR
(
SCULL_IOC_MAGIC
, 5, )

	)

158 
	#SCULL_IOCGQSET
 
	`_IOR
(
SCULL_IOC_MAGIC
, 6, )

	)

159 
	#SCULL_IOCQQUANTUM
 
	`_IO
(
SCULL_IOC_MAGIC
, 7)

	)

160 
	#SCULL_IOCQQSET
 
	`_IO
(
SCULL_IOC_MAGIC
, 8)

	)

161 
	#SCULL_IOCXQUANTUM
 
	`_IOWR
(
SCULL_IOC_MAGIC
, 9, )

	)

162 
	#SCULL_IOCXQSET
 
	`_IOWR
(
SCULL_IOC_MAGIC
,10, )

	)

163 
	#SCULL_IOCHQUANTUM
 
	`_IO
(
SCULL_IOC_MAGIC
, 11)

	)

164 
	#SCULL_IOCHQSET
 
	`_IO
(
SCULL_IOC_MAGIC
, 12)

	)

171 
	#SCULL_P_IOCTSIZE
 
	`_IO
(
SCULL_IOC_MAGIC
, 13)

	)

172 
	#SCULL_P_IOCQSIZE
 
	`_IO
(
SCULL_IOC_MAGIC
, 14)

	)

175 
	#SCULL_IOC_MAXNR
 14

	)

	@scullc/main.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/moduÀ∑øm.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/fs.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/¥oc_fs.h
>

28 
	~<löux/f˙é.h
>

29 
	~<löux/aio.h
>

30 
	~<asm/uac˚ss.h
>

31 
	~"scuŒc.h
"

34 
	gscuŒc_maj‹
 = 
SCULLC_MAJOR
;

35 
	gscuŒc_devs
 = 
SCULLC_DEVS
;

36 
	gscuŒc_q£t
 = 
SCULLC_QSET
;

37 
	gscuŒc_qu™tum
 = 
SCULLC_QUANTUM
;

39 
moduÀ_∑øm
(
scuŒc_maj‹
, , 0);

40 
moduÀ_∑øm
(
scuŒc_devs
, , 0);

41 
moduÀ_∑øm
(
scuŒc_q£t
, , 0);

42 
moduÀ_∑øm
(
scuŒc_qu™tum
, , 0);

43 
MODULE_AUTHOR
("Alessandro Rubini");

44 
MODULE_LICENSE
("Dual BSD/GPL");

46 
scuŒc_dev
 *
	gscuŒc_devi˚s
;

48 
scuŒc_åim
(
scuŒc_dev
 *
dev
);

49 
scuŒc_˛ónup
();

52 
kmem_ˇche_t
 *
	gscuŒc_ˇche
;

58 #ifde‡
SCULLC_USE_PROC


63 
	$scuŒc_¥oc_off£t
(*
buf
, **
°¨t
, 
off_t
 *
off£t
, *
Àn
)

65 i‡(*
off£t
 == 0)

67 i‡(*
off£t
 >*
Àn
) {

69 *
off£t
 -*
Àn
;

70 *
Àn
 = 0;

73 *
°¨t
 = 
buf
 + *
off£t
;

74 *
off£t
 = 0;

76 
	}
}

79 
	$scuŒc_ªad_¥ocmem
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

80 
cou¡
, *
eof
, *
d©a
)

82 
i
, 
j
, 
qu™tum
, 
q£t
, 
Àn
 = 0;

83 
limô
 = 
cou¡
 - 80;

84 
scuŒc_dev
 *
d
;

86 *
°¨t
 = 
buf
;

87 
i
 = 0; i < 
scuŒc_devs
; i++) {

88 
d
 = &
scuŒc_devi˚s
[
i
];

89 i‡(
	`down_öãºu±ibÀ
 (&
d
->
£m
))

90  -
ERESTARTSYS
;

91 
q£t
 = 
d
->qset;

92 
qu™tum
=
d
->quantum;

93 
Àn
 +
	`•rötf
(
buf
+len,"\nDevice %i: qset %i, quantum %i, sz %li\n",

94 
i
, 
q£t
, 
qu™tum
, ()(
d
->
size
));

95 ; 
d
; d = d->
√xt
) {

96 
Àn
 +
	`•rötf
(
buf
+Àn," iãmáà%p, q£à© %p\n",
d
,d->
d©a
);

97 
	`scuŒc_¥oc_off£t
 (
buf
, 
°¨t
, &
off£t
, &
Àn
);

98 i‡(
Àn
 > 
limô
)

99 
out
;

100 i‡(
d
->
d©a
 && !d->
√xt
)

101 
j
 = 0; j < 
q£t
; j++) {

102 i‡(
d
->
d©a
[
j
])

103 
Àn
 +
	`•rötf
(
buf
+Àn," % 4i:%8p\n",
j
,
d
->
d©a
[j]);

104 
	`scuŒc_¥oc_off£t
 (
buf
, 
°¨t
, &
off£t
, &
Àn
);

105 i‡(
Àn
 > 
limô
)

106 
out
;

109 
out
:

110 
	`up
 (&
scuŒc_devi˚s
[
i
].
£m
);

111 i‡(
Àn
 > 
limô
)

114 *
eof
 = 1;

115  
Àn
;

116 
	}
}

124 
	$scuŒc_›í
 (
öode
 *öode, 
fûe
 *
fûp
)

126 
scuŒc_dev
 *
dev
;

129 
dev
 = 
	`c⁄èöî_of
(
öode
->
i_cdev
, 
scuŒc_dev
, 
cdev
);

132 i‡–(
fûp
->
f_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

133 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

134  -
ERESTARTSYS
;

135 
	`scuŒc_åim
(
dev
);

136 
	`up
 (&
dev
->
£m
);

140 
fûp
->
¥iv©e_d©a
 = 
dev
;

143 
	}
}

145 
	$scuŒc_ªÀa£
 (
öode
 *öode, 
fûe
 *
fûp
)

148 
	}
}

153 
scuŒc_dev
 *
	$scuŒc_fﬁlow
(
scuŒc_dev
 *
dev
, 
n
)

155 
n
--) {

156 i‡(!
dev
->
√xt
) {

157 
dev
->
√xt
 = 
	`kmÆloc
((
scuŒc_dev
), 
GFP_KERNEL
);

158 
	`mem£t
(
dev
->
√xt
, 0, (
scuŒc_dev
));

160 
dev
 = dev->
√xt
;

163  
dev
;

164 
	}
}

170 
ssize_t
 
	$scuŒc_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

171 
loff_t
 *
f_pos
)

173 
scuŒc_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

174 
scuŒc_dev
 *
d±r
;

175 
qu™tum
 = 
dev
->quantum;

176 
q£t
 = 
dev
->qset;

177 
ôemsize
 = 
qu™tum
 * 
q£t
;

178 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

179 
ssize_t
 
ªtvÆ
 = 0;

181 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

182  -
ERESTARTSYS
;

183 i‡(*
f_pos
 > 
dev
->
size
)

184 
nŸhög
;

185 i‡(*
f_pos
 + 
cou¡
 > 
dev
->
size
)

186 
cou¡
 = 
dev
->
size
 - *
f_pos
;

188 
ôem
 = ((Ë*
f_pos
Ë/ 
ôemsize
;

189 
ª°
 = ((Ë*
f_pos
Ë% 
ôemsize
;

190 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

193 
d±r
 = 
	`scuŒc_fﬁlow
(
dev
, 
ôem
);

195 i‡(!
d±r
->
d©a
)

196 
nŸhög
;

197 i‡(!
d±r
->
d©a
[
s_pos
])

198 
nŸhög
;

199 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

200 
cou¡
 = 
qu™tum
 - 
q_pos
;

202 i‡(
	`c›y_to_u£r
 (
buf
, 
d±r
->
d©a
[
s_pos
]+
q_pos
, 
cou¡
)) {

203 
ªtvÆ
 = -
EFAULT
;

204 
nŸhög
;

206 
	`up
 (&
dev
->
£m
);

208 *
f_pos
 +
cou¡
;

209  
cou¡
;

211 
nŸhög
:

212 
	`up
 (&
dev
->
£m
);

213  
ªtvÆ
;

214 
	}
}

218 
ssize_t
 
	$scuŒc_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

219 
loff_t
 *
f_pos
)

221 
scuŒc_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

222 
scuŒc_dev
 *
d±r
;

223 
qu™tum
 = 
dev
->quantum;

224 
q£t
 = 
dev
->qset;

225 
ôemsize
 = 
qu™tum
 * 
q£t
;

226 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

227 
ssize_t
 
ªtvÆ
 = -
ENOMEM
;

229 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

230  -
ERESTARTSYS
;

233 
ôem
 = ((Ë*
f_pos
Ë/ 
ôemsize
;

234 
ª°
 = ((Ë*
f_pos
Ë% 
ôemsize
;

235 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

238 
d±r
 = 
	`scuŒc_fﬁlow
(
dev
, 
ôem
);

239 i‡(!
d±r
->
d©a
) {

240 
d±r
->
d©a
 = 
	`kmÆloc
(
q£t
 * (*), 
GFP_KERNEL
);

241 i‡(!
d±r
->
d©a
)

242 
nomem
;

243 
	`mem£t
(
d±r
->
d©a
, 0, 
q£t
 * (*));

246 i‡(!
d±r
->
d©a
[
s_pos
]) {

247 
d±r
->
d©a
[
s_pos
] = 
	`kmem_ˇche_Æloc
(
scuŒc_ˇche
, 
GFP_KERNEL
);

248 i‡(!
d±r
->
d©a
[
s_pos
])

249 
nomem
;

250 
	`mem£t
(
d±r
->
d©a
[
s_pos
], 0, 
scuŒc_qu™tum
);

252 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

253 
cou¡
 = 
qu™tum
 - 
q_pos
;

254 i‡(
	`c›y_‰om_u£r
 (
d±r
->
d©a
[
s_pos
]+
q_pos
, 
buf
, 
cou¡
)) {

255 
ªtvÆ
 = -
EFAULT
;

256 
nomem
;

258 *
f_pos
 +
cou¡
;

261 i‡(
dev
->
size
 < *
f_pos
)

262 
dev
->
size
 = *
f_pos
;

263 
	`up
 (&
dev
->
£m
);

264  
cou¡
;

266 
nomem
:

267 
	`up
 (&
dev
->
£m
);

268  
ªtvÆ
;

269 
	}
}

275 
	$scuŒc_io˘l
 (
öode
 *öode, 
fûe
 *
fûp
,

276 
cmd
, 
¨g
)

279 
îr
 = 0, 
ªt
 = 0, 
tmp
;

282 i‡(
	`_IOC_TYPE
(
cmd
Ë!
SCULLC_IOC_MAGIC
Ë -
ENOTTY
;

283 i‡(
	`_IOC_NR
(
cmd
Ë> 
SCULLC_IOC_MAXNR
Ë -
ENOTTY
;

291 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_READ
)

292 
îr
 = !
	`ac˚ss_ok
(
VERIFY_WRITE
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

293 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_WRITE
)

294 
îr
 = !
	`ac˚ss_ok
(
VERIFY_READ
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

295 i‡(
îr
)

296  -
EFAULT
;

298 
cmd
) {

300 
SCULLC_IOCRESET
:

301 
scuŒc_q£t
 = 
SCULLC_QSET
;

302 
scuŒc_qu™tum
 = 
SCULLC_QUANTUM
;

305 
SCULLC_IOCSQUANTUM
:

306 
ªt
 = 
	`__gë_u£r
(
scuŒc_qu™tum
, (
__u£r
 *Ë
¨g
);

309 
SCULLC_IOCTQUANTUM
:

310 
scuŒc_qu™tum
 = 
¨g
;

313 
SCULLC_IOCGQUANTUM
:

314 
ªt
 = 
	`__put_u£r
 (
scuŒc_qu™tum
, (
__u£r
 *Ë
¨g
);

317 
SCULLC_IOCQQUANTUM
:

318  
scuŒc_qu™tum
;

320 
SCULLC_IOCXQUANTUM
:

321 
tmp
 = 
scuŒc_qu™tum
;

322 
ªt
 = 
	`__gë_u£r
(
scuŒc_qu™tum
, (
__u£r
 *Ë
¨g
);

323 i‡(
ªt
 == 0)

324 
ªt
 = 
	`__put_u£r
(
tmp
, (
__u£r
 *Ë
¨g
);

327 
SCULLC_IOCHQUANTUM
:

328 
tmp
 = 
scuŒc_qu™tum
;

329 
scuŒc_qu™tum
 = 
¨g
;

330  
tmp
;

332 
SCULLC_IOCSQSET
:

333 
ªt
 = 
	`__gë_u£r
(
scuŒc_q£t
, (
__u£r
 *Ë
¨g
);

336 
SCULLC_IOCTQSET
:

337 
scuŒc_q£t
 = 
¨g
;

340 
SCULLC_IOCGQSET
:

341 
ªt
 = 
	`__put_u£r
(
scuŒc_q£t
, (
__u£r
 *)
¨g
);

344 
SCULLC_IOCQQSET
:

345  
scuŒc_q£t
;

347 
SCULLC_IOCXQSET
:

348 
tmp
 = 
scuŒc_q£t
;

349 
ªt
 = 
	`__gë_u£r
(
scuŒc_q£t
, (
__u£r
 *)
¨g
);

350 i‡(
ªt
 == 0)

351 
ªt
 = 
	`__put_u£r
(
tmp
, (
__u£r
 *)
¨g
);

354 
SCULLC_IOCHQSET
:

355 
tmp
 = 
scuŒc_q£t
;

356 
scuŒc_q£t
 = 
¨g
;

357  
tmp
;

360  -
ENOTTY
;

363  
ªt
;

364 
	}
}

370 
loff_t
 
	$scuŒc_Œ£ek
 (
fûe
 *
fûp
, 
loff_t
 
off
, 
whí˚
)

372 
scuŒc_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

373 
√wpos
;

375 
whí˚
) {

377 
√wpos
 = 
off
;

381 
√wpos
 = 
fûp
->
f_pos
 + 
off
;

385 
√wpos
 = 
dev
->
size
 + 
off
;

389  -
EINVAL
;

391 i‡(
√wpos
<0Ë -
EINVAL
;

392 
fûp
->
f_pos
 = 
√wpos
;

393  
√wpos
;

394 
	}
}

401 
	sasync_w‹k
 {

402 
kiocb
 *
	miocb
;

403 
	mªsu…
;

404 
w‹k_°ru˘
 
	mw‹k
;

410 
	$scuŒc_do_de„ºed_›
(*
p
)

412 
async_w‹k
 *
°uff
 = (async_w‹k *Ë
p
;

413 
	`aio_com∂ëe
(
°uff
->
iocb
, stuff->
ªsu…
, 0);

414 
	`k‰ì
(
°uff
);

415 
	}
}

418 
	$scuŒc_de„r_›
(
wrôe
, 
kiocb
 *
iocb
, 
__u£r
 *
buf
,

419 
size_t
 
cou¡
, 
loff_t
 
pos
)

421 
async_w‹k
 *
°uff
;

422 
ªsu…
;

425 i‡(
wrôe
)

426 
ªsu…
 = 
	`scuŒc_wrôe
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

428 
ªsu…
 = 
	`scuŒc_ªad
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

431 i‡(
	`is_sync_kiocb
(
iocb
))

432  
ªsu…
;

435 
°uff
 = 
	`kmÆloc
 ( (*°uff), 
GFP_KERNEL
);

436 i‡(
°uff
 =
NULL
)

437  
ªsu…
;

438 
°uff
->
iocb
 = iocb;

439 
°uff
->
ªsu…
 =Ñesult;

440 
	`INIT_WORK
(&
°uff
->
w‹k
, 
scuŒc_do_de„ºed_›
, stuff);

441 
	`scheduÀ_dñayed_w‹k
(&
°uff
->
w‹k
, 
HZ
/100);

442  -
EIOCBQUEUED
;

443 
	}
}

446 
ssize_t
 
	$scuŒc_aio_ªad
(
kiocb
 *
iocb
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

447 
loff_t
 
pos
)

449  
	`scuŒc_de„r_›
(0, 
iocb
, 
buf
, 
cou¡
, 
pos
);

450 
	}
}

452 
ssize_t
 
	$scuŒc_aio_wrôe
(
kiocb
 *
iocb
, c⁄° 
__u£r
 *
buf
,

453 
size_t
 
cou¡
, 
loff_t
 
pos
)

455  
	`scuŒc_de„r_›
(1, 
iocb
, (
__u£r
 *Ë
buf
, 
cou¡
, 
pos
);

456 
	}
}

465 
fûe_›î©i⁄s
 
	gscuŒc_f›s
 = {

466 .
ow√r
 = 
THIS_MODULE
,

467 .
	gŒ£ek
 = 
scuŒc_Œ£ek
,

468 .
	gªad
 = 
scuŒc_ªad
,

469 .
	gwrôe
 = 
scuŒc_wrôe
,

470 .
	gio˘l
 = 
scuŒc_io˘l
,

471 .
	g›í
 = 
scuŒc_›í
,

472 .
	gªÀa£
 = 
scuŒc_ªÀa£
,

473 .
	gaio_ªad
 = 
scuŒc_aio_ªad
,

474 .
	gaio_wrôe
 = 
scuŒc_aio_wrôe
,

477 
	$scuŒc_åim
(
scuŒc_dev
 *
dev
)

479 
scuŒc_dev
 *
√xt
, *
d±r
;

480 
q£t
 = 
dev
->qset;

481 
i
;

483 i‡(
dev
->
vmas
)

484  -
EBUSY
;

486 
d±r
 = 
dev
; d±r; d±∏
√xt
) {

487 i‡(
d±r
->
d©a
) {

488 
i
 = 0; i < 
q£t
; i++)

489 i‡(
d±r
->
d©a
[
i
])

490 
	`kmem_ˇche_‰ì
(
scuŒc_ˇche
, 
d±r
->
d©a
[
i
]);

492 
	`k‰ì
(
d±r
->
d©a
);

493 
d±r
->
d©a
=
NULL
;

495 
√xt
=
d±r
->next;

496 i‡(
d±r
 !
dev
Ë
	`k‰ì
(dptr);

498 
dev
->
size
 = 0;

499 
dev
->
q£t
 = 
scuŒc_q£t
;

500 
dev
->
qu™tum
 = 
scuŒc_qu™tum
;

501 
dev
->
√xt
 = 
NULL
;

503 
	}
}

506 
	$scuŒc_£tup_cdev
(
scuŒc_dev
 *
dev
, 
ödex
)

508 
îr
, 
devno
 = 
	`MKDEV
(
scuŒc_maj‹
, 
ödex
);

510 
	`cdev_öô
(&
dev
->
cdev
, &
scuŒc_f›s
);

511 
dev
->
cdev
.
ow√r
 = 
THIS_MODULE
;

512 
dev
->
cdev
.
›s
 = &
scuŒc_f›s
;

513 
îr
 = 
	`cdev_add
 (&
dev
->
cdev
, 
devno
, 1);

515 i‡(
îr
)

516 
	`¥ötk
(
KERN_NOTICE
 "Eº‹ %dáddög scuŒ%d", 
îr
, 
ödex
);

517 
	}
}

525 
	$scuŒc_öô
()

527 
ªsu…
, 
i
;

528 
dev_t
 
dev
 = 
	`MKDEV
(
scuŒc_maj‹
, 0);

533 i‡(
scuŒc_maj‹
)

534 
ªsu…
 = 
	`ªgi°î_chrdev_ªgi⁄
(
dev
, 
scuŒc_devs
, "scullc");

536 
ªsu…
 = 
	`Æloc_chrdev_ªgi⁄
(&
dev
, 0, 
scuŒc_devs
, "scullc");

537 
scuŒc_maj‹
 = 
	`MAJOR
(
dev
);

539 i‡(
ªsu…
 < 0)

540  
ªsu…
;

547 
scuŒc_devi˚s
 = 
	`kmÆloc
(
scuŒc_devs
* (
scuŒc_dev
), 
GFP_KERNEL
);

548 i‡(!
scuŒc_devi˚s
) {

549 
ªsu…
 = -
ENOMEM
;

550 
Áû_mÆloc
;

552 
	`mem£t
(
scuŒc_devi˚s
, 0, 
scuŒc_devs
* (
scuŒc_dev
));

553 
i
 = 0; i < 
scuŒc_devs
; i++) {

554 
scuŒc_devi˚s
[
i
].
qu™tum
 = 
scuŒc_qu™tum
;

555 
scuŒc_devi˚s
[
i
].
q£t
 = 
scuŒc_q£t
;

556 
	`£ma_öô
 (&
scuŒc_devi˚s
[
i
].
£m
, 1);

557 
	`scuŒc_£tup_cdev
(
scuŒc_devi˚s
 + 
i
, i);

560 
scuŒc_ˇche
 = 
	`kmem_ˇche_¸óã
("scuŒc", 
scuŒc_qu™tum
,

561 0, 
SLAB_HWCACHE_ALIGN
, 
NULL
, NULL);

562 i‡(!
scuŒc_ˇche
) {

563 
	`scuŒc_˛ónup
();

564  -
ENOMEM
;

567 #ifde‡
SCULLC_USE_PROC


568 
	`¸óã_¥oc_ªad_íåy
("scuŒcmem", 0, 
NULL
, 
scuŒc_ªad_¥ocmem
, NULL);

572 
Áû_mÆloc
:

573 
	`uƒegi°î_chrdev_ªgi⁄
(
dev
, 
scuŒc_devs
);

574  
ªsu…
;

575 
	}
}

579 
	$scuŒc_˛ónup
()

581 
i
;

583 #ifde‡
SCULLC_USE_PROC


584 
	`ªmove_¥oc_íåy
("scuŒcmem", 
NULL
);

587 
i
 = 0; i < 
scuŒc_devs
; i++) {

588 
	`cdev_dñ
(&
scuŒc_devi˚s
[
i
].
cdev
);

589 
	`scuŒc_åim
(
scuŒc_devi˚s
 + 
i
);

591 
	`k‰ì
(
scuŒc_devi˚s
);

593 i‡(
scuŒc_ˇche
)

594 
	`kmem_ˇche_de°roy
(
scuŒc_ˇche
);

595 
	`uƒegi°î_chrdev_ªgi⁄
(
	`MKDEV
 (
scuŒc_maj‹
, 0), 
scuŒc_devs
);

596 
	}
}

599 
moduÀ_öô
(
scuŒc_öô
);

600 
moduÀ_exô
(
scuŒc_˛ónup
);

	@scullc/mmap.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

21 
	~<löux/mm.h
>

22 
	~<löux/î∫o.h
>

23 
	~<asm/pgèbÀ.h
>

25 
	~"scuŒc.h
"

33 
	$scuŒc_vma_›í
(
vm_¨ó_°ru˘
 *
vma
)

35 
scuŒc_dev
 *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

37 
dev
->
vmas
++;

38 
	}
}

40 
	$scuŒc_vma_˛o£
(
vm_¨ó_°ru˘
 *
vma
)

42 
scuŒc_dev
 *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

44 
dev
->
vmas
--;

45 
	}
}

60 
∑ge
 *
	$scuŒc_vma_n›age
(
vm_¨ó_°ru˘
 *
vma
,

61 
addªss
, *
ty≥
)

63 
off£t
;

64 
scuŒc_dev
 *
±r
, *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

65 
∑ge
 *∑gê
NOPAGE_SIGBUS
;

66 *
∑gïå
 = 
NULL
;

68 
	`down
(&
dev
->
£m
);

69 
off£t
 = (
addªss
 - 
vma
->
vm_°¨t
Ë+ (vma->
vm_pgoff
 << 
PAGE_SHIFT
);

70 i‡(
off£t
 >
dev
->
size
Ë
out
;

77 
off£t
 >>
PAGE_SHIFT
;

78 
±r
 = 
dev
;Öå && 
off£t
 >dev->
q£t
;) {

79 
±r
 =Öå->
√xt
;

80 
off£t
 -
dev
->
q£t
;

82 i‡(
±r
 &&Öå->
d©a
Ë
∑gïå
 =Öå->d©a[
off£t
];

83 i‡(!
∑gïå
Ë
out
;

86 
	`gë_∑ge
(
∑ge
);

87 i‡(
ty≥
)

88 *
ty≥
 = 
VM_FAULT_MINOR
;

89 
out
:

90 
	`up
(&
dev
->
£m
);

91  
∑ge
;

92 
	}
}

96 
vm_›î©i⁄s_°ru˘
 
	gscuŒc_vm_›s
 = {

97 .
›í
 = 
scuŒc_vma_›í
,

98 .
	g˛o£
 = 
scuŒc_vma_˛o£
,

99 .
	gn›age
 = 
scuŒc_vma_n›age
,

103 
	$scuŒc_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

105 
öode
 *öodê
fûp
->
f_díåy
->
d_öode
;

108 i‡(
scuŒc_devi˚s
[
	`imö‹
(
öode
)].
‹dî
)

109  -
ENODEV
;

112 
vma
->
vm_›s
 = &
scuŒc_vm_›s
;

113 
vma
->
vm_Êags
 |
VM_RESERVED
;

114 
vma
->
vm_¥iv©e_d©a
 = 
fûp
->
¥iv©e_d©a
;

115 
	`scuŒc_vma_›í
(
vma
);

117 
	}
}

	@scullc/scullc.h

16 
	~<löux/io˘l.h
>

17 
	~<löux/cdev.h
>

23 #unde‡
PDEBUG


24 #ifde‡
SCULLC_DEBUG


25 #ifde‡
__KERNEL__


27 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`¥ötk
–
KERN_DEBUG
 "scuŒc: " fmt, ##árgs)

	)

30 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt, ##árgs)

	)

33 
	#PDEBUG
(
fmt
, 
¨gs
...Ë

	)

36 #unde‡
PDEBUGG


37 
	#PDEBUGG
(
fmt
, 
¨gs
...Ë

	)

39 
	#SCULLC_MAJOR
 0

	)

41 
	#SCULLC_DEVS
 4

	)

52 
	#SCULLC_QUANTUM
 4000

	)

53 
	#SCULLC_QSET
 500

	)

55 
	sscuŒc_dev
 {

56 **
	md©a
;

57 
scuŒc_dev
 *
	m√xt
;

58 
	mvmas
;

59 
	mqu™tum
;

60 
	mq£t
;

61 
size_t
 
	msize
;

62 
£m≠h‹e
 
	m£m
;

63 
cdev
 
	mcdev
;

66 
scuŒc_dev
 *
scuŒc_devi˚s
;

68 
fûe_›î©i⁄s
 
scuŒc_f›s
;

73 
scuŒc_maj‹
;

74 
scuŒc_devs
;

75 
scuŒc_‹dî
;

76 
scuŒc_q£t
;

81 
scuŒc_åim
(
scuŒc_dev
 *
dev
);

82 
scuŒc_dev
 *
scuŒc_fﬁlow
(scuŒc_dev *
dev
, 
n
);

85 #ifde‡
SCULLC_DEBUG


86 
	#SCULLC_USE_PROC


	)

94 
	#SCULLC_IOC_MAGIC
 'K'

	)

96 
	#SCULLC_IOCRESET
 
	`_IO
(
SCULLC_IOC_MAGIC
, 0)

	)

106 
	#SCULLC_IOCSQUANTUM
 
	`_IOW
(
SCULLC_IOC_MAGIC
, 1, )

	)

107 
	#SCULLC_IOCTQUANTUM
 
	`_IO
(
SCULLC_IOC_MAGIC
, 2)

	)

108 
	#SCULLC_IOCGQUANTUM
 
	`_IOR
(
SCULLC_IOC_MAGIC
, 3, )

	)

109 
	#SCULLC_IOCQQUANTUM
 
	`_IO
(
SCULLC_IOC_MAGIC
, 4)

	)

110 
	#SCULLC_IOCXQUANTUM
 
	`_IOWR
(
SCULLC_IOC_MAGIC
, 5, )

	)

111 
	#SCULLC_IOCHQUANTUM
 
	`_IO
(
SCULLC_IOC_MAGIC
, 6)

	)

112 
	#SCULLC_IOCSQSET
 
	`_IOW
(
SCULLC_IOC_MAGIC
, 7, )

	)

113 
	#SCULLC_IOCTQSET
 
	`_IO
(
SCULLC_IOC_MAGIC
, 8)

	)

114 
	#SCULLC_IOCGQSET
 
	`_IOR
(
SCULLC_IOC_MAGIC
, 9, )

	)

115 
	#SCULLC_IOCQQSET
 
	`_IO
(
SCULLC_IOC_MAGIC
, 10)

	)

116 
	#SCULLC_IOCXQSET
 
	`_IOWR
(
SCULLC_IOC_MAGIC
,11, )

	)

117 
	#SCULLC_IOCHQSET
 
	`_IO
(
SCULLC_IOC_MAGIC
, 12)

	)

119 
	#SCULLC_IOC_MAXNR
 12

	)

	@sculld/main.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/moduÀ∑øm.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/fs.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/¥oc_fs.h
>

28 
	~<löux/f˙é.h
>

29 
	~<löux/aio.h
>

30 
	~<asm/uac˚ss.h
>

31 
	~"scuŒd.h
"

34 
	gscuŒd_maj‹
 = 
SCULLD_MAJOR
;

35 
	gscuŒd_devs
 = 
SCULLD_DEVS
;

36 
	gscuŒd_q£t
 = 
SCULLD_QSET
;

37 
	gscuŒd_‹dî
 = 
SCULLD_ORDER
;

39 
moduÀ_∑øm
(
scuŒd_maj‹
, , 0);

40 
moduÀ_∑øm
(
scuŒd_devs
, , 0);

41 
moduÀ_∑øm
(
scuŒd_q£t
, , 0);

42 
moduÀ_∑øm
(
scuŒd_‹dî
, , 0);

43 
MODULE_AUTHOR
("Alessandro Rubini");

44 
MODULE_LICENSE
("Dual BSD/GPL");

46 
scuŒd_dev
 *
	gscuŒd_devi˚s
;

48 
scuŒd_åim
(
scuŒd_dev
 *
dev
);

49 
scuŒd_˛ónup
();

55 
ldd_drivî
 
	gscuŒd_drivî
 = {

56 .
vîsi⁄
 = "$Revision: 1.21 $",

57 .
	gmoduÀ
 = 
THIS_MODULE
,

58 .
	gdrivî
 = {

59 .
«me
 = "sculld",

65 #ifde‡
SCULLD_USE_PROC


70 
	$scuŒd_¥oc_off£t
(*
buf
, **
°¨t
, 
off_t
 *
off£t
, *
Àn
)

72 i‡(*
off£t
 == 0)

74 i‡(*
off£t
 >*
Àn
) {

76 *
off£t
 -*
Àn
;

77 *
Àn
 = 0;

80 *
°¨t
 = 
buf
 + *
off£t
;

81 *
off£t
 = 0;

83 
	}
}

86 
	$scuŒd_ªad_¥ocmem
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

87 
cou¡
, *
eof
, *
d©a
)

89 
i
, 
j
, 
‹dî
, 
q£t
, 
Àn
 = 0;

90 
limô
 = 
cou¡
 - 80;

91 
scuŒd_dev
 *
d
;

93 *
°¨t
 = 
buf
;

94 
i
 = 0; i < 
scuŒd_devs
; i++) {

95 
d
 = &
scuŒd_devi˚s
[
i
];

96 i‡(
	`down_öãºu±ibÀ
 (&
d
->
£m
))

97  -
ERESTARTSYS
;

98 
q£t
 = 
d
->qset;

99 
‹dî
 = 
d
->order;

100 
Àn
 +
	`•rötf
(
buf
+len,"\nDevice %i: qset %i, order %i, sz %li\n",

101 
i
, 
q£t
, 
‹dî
, ()(
d
->
size
));

102 ; 
d
; d = d->
√xt
) {

103 
Àn
 +
	`•rötf
(
buf
+Àn," iãmáà%p, q£à© %p\n",
d
,d->
d©a
);

104 
	`scuŒd_¥oc_off£t
 (
buf
, 
°¨t
, &
off£t
, &
Àn
);

105 i‡(
Àn
 > 
limô
)

106 
out
;

107 i‡(
d
->
d©a
 && !d->
√xt
)

108 
j
 = 0; j < 
q£t
; j++) {

109 i‡(
d
->
d©a
[
j
])

110 
Àn
 +
	`•rötf
(
buf
+Àn," % 4i:%8p\n",
j
,
d
->
d©a
[j]);

111 
	`scuŒd_¥oc_off£t
 (
buf
, 
°¨t
, &
off£t
, &
Àn
);

112 i‡(
Àn
 > 
limô
)

113 
out
;

116 
out
:

117 
	`up
 (&
scuŒd_devi˚s
[
i
].
£m
);

118 i‡(
Àn
 > 
limô
)

121 *
eof
 = 1;

122  
Àn
;

123 
	}
}

131 
	$scuŒd_›í
 (
öode
 *öode, 
fûe
 *
fûp
)

133 
scuŒd_dev
 *
dev
;

136 
dev
 = 
	`c⁄èöî_of
(
öode
->
i_cdev
, 
scuŒd_dev
, 
cdev
);

139 i‡–(
fûp
->
f_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

140 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

141  -
ERESTARTSYS
;

142 
	`scuŒd_åim
(
dev
);

143 
	`up
 (&
dev
->
£m
);

147 
fûp
->
¥iv©e_d©a
 = 
dev
;

150 
	}
}

152 
	$scuŒd_ªÀa£
 (
öode
 *öode, 
fûe
 *
fûp
)

155 
	}
}

160 
scuŒd_dev
 *
	$scuŒd_fﬁlow
(
scuŒd_dev
 *
dev
, 
n
)

162 
n
--) {

163 i‡(!
dev
->
√xt
) {

164 
dev
->
√xt
 = 
	`kmÆloc
((
scuŒd_dev
), 
GFP_KERNEL
);

165 
	`mem£t
(
dev
->
√xt
, 0, (
scuŒd_dev
));

167 
dev
 = dev->
√xt
;

170  
dev
;

171 
	}
}

177 
ssize_t
 
	$scuŒd_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

178 
loff_t
 *
f_pos
)

180 
scuŒd_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

181 
scuŒd_dev
 *
d±r
;

182 
qu™tum
 = 
PAGE_SIZE
 << 
dev
->
‹dî
;

183 
q£t
 = 
dev
->qset;

184 
ôemsize
 = 
qu™tum
 * 
q£t
;

185 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

186 
ssize_t
 
ªtvÆ
 = 0;

188 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

189  -
ERESTARTSYS
;

190 i‡(*
f_pos
 > 
dev
->
size
)

191 
nŸhög
;

192 i‡(*
f_pos
 + 
cou¡
 > 
dev
->
size
)

193 
cou¡
 = 
dev
->
size
 - *
f_pos
;

195 
ôem
 = ((Ë*
f_pos
Ë/ 
ôemsize
;

196 
ª°
 = ((Ë*
f_pos
Ë% 
ôemsize
;

197 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

200 
d±r
 = 
	`scuŒd_fﬁlow
(
dev
, 
ôem
);

202 i‡(!
d±r
->
d©a
)

203 
nŸhög
;

204 i‡(!
d±r
->
d©a
[
s_pos
])

205 
nŸhög
;

206 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

207 
cou¡
 = 
qu™tum
 - 
q_pos
;

209 i‡(
	`c›y_to_u£r
 (
buf
, 
d±r
->
d©a
[
s_pos
]+
q_pos
, 
cou¡
)) {

210 
ªtvÆ
 = -
EFAULT
;

211 
nŸhög
;

213 
	`up
 (&
dev
->
£m
);

215 *
f_pos
 +
cou¡
;

216  
cou¡
;

218 
nŸhög
:

219 
	`up
 (&
dev
->
£m
);

220  
ªtvÆ
;

221 
	}
}

225 
ssize_t
 
	$scuŒd_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

226 
loff_t
 *
f_pos
)

228 
scuŒd_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

229 
scuŒd_dev
 *
d±r
;

230 
qu™tum
 = 
PAGE_SIZE
 << 
dev
->
‹dî
;

231 
q£t
 = 
dev
->qset;

232 
ôemsize
 = 
qu™tum
 * 
q£t
;

233 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

234 
ssize_t
 
ªtvÆ
 = -
ENOMEM
;

236 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

237  -
ERESTARTSYS
;

240 
ôem
 = ((Ë*
f_pos
Ë/ 
ôemsize
;

241 
ª°
 = ((Ë*
f_pos
Ë% 
ôemsize
;

242 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

245 
d±r
 = 
	`scuŒd_fﬁlow
(
dev
, 
ôem
);

246 i‡(!
d±r
->
d©a
) {

247 
d±r
->
d©a
 = 
	`kmÆloc
(
q£t
 * (*), 
GFP_KERNEL
);

248 i‡(!
d±r
->
d©a
)

249 
nomem
;

250 
	`mem£t
(
d±r
->
d©a
, 0, 
q£t
 * (*));

253 i‡(!
d±r
->
d©a
[
s_pos
]) {

254 
d±r
->
d©a
[
s_pos
] =

255 (*)
	`__gë_‰ì_∑ges
(
GFP_KERNEL
, 
d±r
->
‹dî
);

256 i‡(!
d±r
->
d©a
[
s_pos
])

257 
nomem
;

258 
	`mem£t
(
d±r
->
d©a
[
s_pos
], 0, 
PAGE_SIZE
 << d±r->
‹dî
);

260 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

261 
cou¡
 = 
qu™tum
 - 
q_pos
;

262 i‡(
	`c›y_‰om_u£r
 (
d±r
->
d©a
[
s_pos
]+
q_pos
, 
buf
, 
cou¡
)) {

263 
ªtvÆ
 = -
EFAULT
;

264 
nomem
;

266 *
f_pos
 +
cou¡
;

269 i‡(
dev
->
size
 < *
f_pos
)

270 
dev
->
size
 = *
f_pos
;

271 
	`up
 (&
dev
->
£m
);

272  
cou¡
;

274 
nomem
:

275 
	`up
 (&
dev
->
£m
);

276  
ªtvÆ
;

277 
	}
}

283 
	$scuŒd_io˘l
 (
öode
 *öode, 
fûe
 *
fûp
,

284 
cmd
, 
¨g
)

287 
îr
 = 0, 
ªt
 = 0, 
tmp
;

290 i‡(
	`_IOC_TYPE
(
cmd
Ë!
SCULLD_IOC_MAGIC
Ë -
ENOTTY
;

291 i‡(
	`_IOC_NR
(
cmd
Ë> 
SCULLD_IOC_MAXNR
Ë -
ENOTTY
;

299 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_READ
)

300 
îr
 = !
	`ac˚ss_ok
(
VERIFY_WRITE
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

301 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_WRITE
)

302 
îr
 = !
	`ac˚ss_ok
(
VERIFY_READ
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

303 i‡(
îr
)

304  -
EFAULT
;

306 
cmd
) {

308 
SCULLD_IOCRESET
:

309 
scuŒd_q£t
 = 
SCULLD_QSET
;

310 
scuŒd_‹dî
 = 
SCULLD_ORDER
;

313 
SCULLD_IOCSORDER
:

314 
ªt
 = 
	`__gë_u£r
(
scuŒd_‹dî
, (
__u£r
 *Ë
¨g
);

317 
SCULLD_IOCTORDER
:

318 
scuŒd_‹dî
 = 
¨g
;

321 
SCULLD_IOCGORDER
:

322 
ªt
 = 
	`__put_u£r
 (
scuŒd_‹dî
, (
__u£r
 *Ë
¨g
);

325 
SCULLD_IOCQORDER
:

326  
scuŒd_‹dî
;

328 
SCULLD_IOCXORDER
:

329 
tmp
 = 
scuŒd_‹dî
;

330 
ªt
 = 
	`__gë_u£r
(
scuŒd_‹dî
, (
__u£r
 *Ë
¨g
);

331 i‡(
ªt
 == 0)

332 
ªt
 = 
	`__put_u£r
(
tmp
, (
__u£r
 *Ë
¨g
);

335 
SCULLD_IOCHORDER
:

336 
tmp
 = 
scuŒd_‹dî
;

337 
scuŒd_‹dî
 = 
¨g
;

338  
tmp
;

340 
SCULLD_IOCSQSET
:

341 
ªt
 = 
	`__gë_u£r
(
scuŒd_q£t
, (
__u£r
 *Ë
¨g
);

344 
SCULLD_IOCTQSET
:

345 
scuŒd_q£t
 = 
¨g
;

348 
SCULLD_IOCGQSET
:

349 
ªt
 = 
	`__put_u£r
(
scuŒd_q£t
, (
__u£r
 *)
¨g
);

352 
SCULLD_IOCQQSET
:

353  
scuŒd_q£t
;

355 
SCULLD_IOCXQSET
:

356 
tmp
 = 
scuŒd_q£t
;

357 
ªt
 = 
	`__gë_u£r
(
scuŒd_q£t
, (
__u£r
 *)
¨g
);

358 i‡(
ªt
 == 0)

359 
ªt
 = 
	`__put_u£r
(
tmp
, (
__u£r
 *)
¨g
);

362 
SCULLD_IOCHQSET
:

363 
tmp
 = 
scuŒd_q£t
;

364 
scuŒd_q£t
 = 
¨g
;

365  
tmp
;

368  -
ENOTTY
;

371  
ªt
;

372 
	}
}

378 
loff_t
 
	$scuŒd_Œ£ek
 (
fûe
 *
fûp
, 
loff_t
 
off
, 
whí˚
)

380 
scuŒd_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

381 
√wpos
;

383 
whí˚
) {

385 
√wpos
 = 
off
;

389 
√wpos
 = 
fûp
->
f_pos
 + 
off
;

393 
√wpos
 = 
dev
->
size
 + 
off
;

397  -
EINVAL
;

399 i‡(
√wpos
<0Ë -
EINVAL
;

400 
fûp
->
f_pos
 = 
√wpos
;

401  
√wpos
;

402 
	}
}

409 
	sasync_w‹k
 {

410 
kiocb
 *
	miocb
;

411 
	mªsu…
;

412 
w‹k_°ru˘
 
	mw‹k
;

418 
	$scuŒd_do_de„ºed_›
(*
p
)

420 
async_w‹k
 *
°uff
 = (async_w‹k *Ë
p
;

421 
	`aio_com∂ëe
(
°uff
->
iocb
, stuff->
ªsu…
, 0);

422 
	`k‰ì
(
°uff
);

423 
	}
}

426 
	$scuŒd_de„r_›
(
wrôe
, 
kiocb
 *
iocb
, 
__u£r
 *
buf
,

427 
size_t
 
cou¡
, 
loff_t
 
pos
)

429 
async_w‹k
 *
°uff
;

430 
ªsu…
;

433 i‡(
wrôe
)

434 
ªsu…
 = 
	`scuŒd_wrôe
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

436 
ªsu…
 = 
	`scuŒd_ªad
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

439 i‡(
	`is_sync_kiocb
(
iocb
))

440  
ªsu…
;

443 
°uff
 = 
	`kmÆloc
 ( (*°uff), 
GFP_KERNEL
);

444 i‡(
°uff
 =
NULL
)

445  
ªsu…
;

446 
°uff
->
iocb
 = iocb;

447 
°uff
->
ªsu…
 =Ñesult;

448 
	`INIT_WORK
(&
°uff
->
w‹k
, 
scuŒd_do_de„ºed_›
, stuff);

449 
	`scheduÀ_dñayed_w‹k
(&
°uff
->
w‹k
, 
HZ
/100);

450  -
EIOCBQUEUED
;

451 
	}
}

454 
ssize_t
 
	$scuŒd_aio_ªad
(
kiocb
 *
iocb
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

455 
loff_t
 
pos
)

457  
	`scuŒd_de„r_›
(0, 
iocb
, 
buf
, 
cou¡
, 
pos
);

458 
	}
}

460 
ssize_t
 
	$scuŒd_aio_wrôe
(
kiocb
 *
iocb
, c⁄° 
__u£r
 *
buf
,

461 
size_t
 
cou¡
, 
loff_t
 
pos
)

463  
	`scuŒd_de„r_›
(1, 
iocb
, (
__u£r
 *Ë
buf
, 
cou¡
, 
pos
);

464 
	}
}

471 
scuŒd_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
);

478 
fûe_›î©i⁄s
 
	gscuŒd_f›s
 = {

479 .
ow√r
 = 
THIS_MODULE
,

480 .
	gŒ£ek
 = 
scuŒd_Œ£ek
,

481 .
	gªad
 = 
scuŒd_ªad
,

482 .
	gwrôe
 = 
scuŒd_wrôe
,

483 .
	gio˘l
 = 
scuŒd_io˘l
,

484 .
	gmm≠
 = 
scuŒd_mm≠
,

485 .
	g›í
 = 
scuŒd_›í
,

486 .
	gªÀa£
 = 
scuŒd_ªÀa£
,

487 .
	gaio_ªad
 = 
scuŒd_aio_ªad
,

488 .
	gaio_wrôe
 = 
scuŒd_aio_wrôe
,

491 
	$scuŒd_åim
(
scuŒd_dev
 *
dev
)

493 
scuŒd_dev
 *
√xt
, *
d±r
;

494 
q£t
 = 
dev
->qset;

495 
i
;

497 i‡(
dev
->
vmas
)

498  -
EBUSY
;

500 
d±r
 = 
dev
; d±r; d±∏
√xt
) {

501 i‡(
d±r
->
d©a
) {

503 
i
 = 0; i < 
q£t
; i++)

504 i‡(
d±r
->
d©a
[
i
])

505 
	`‰ì_∑ges
(()(
d±r
->
d©a
[
i
]),

506 
d±r
->
‹dî
);

508 
	`k‰ì
(
d±r
->
d©a
);

509 
d±r
->
d©a
=
NULL
;

511 
√xt
=
d±r
->next;

512 i‡(
d±r
 !
dev
Ë
	`k‰ì
(dptr);

514 
dev
->
size
 = 0;

515 
dev
->
q£t
 = 
scuŒd_q£t
;

516 
dev
->
‹dî
 = 
scuŒd_‹dî
;

517 
dev
->
√xt
 = 
NULL
;

519 
	}
}

522 
	$scuŒd_£tup_cdev
(
scuŒd_dev
 *
dev
, 
ödex
)

524 
îr
, 
devno
 = 
	`MKDEV
(
scuŒd_maj‹
, 
ödex
);

526 
	`cdev_öô
(&
dev
->
cdev
, &
scuŒd_f›s
);

527 
dev
->
cdev
.
ow√r
 = 
THIS_MODULE
;

528 
dev
->
cdev
.
›s
 = &
scuŒd_f›s
;

529 
îr
 = 
	`cdev_add
 (&
dev
->
cdev
, 
devno
, 1);

531 i‡(
îr
)

532 
	`¥ötk
(
KERN_NOTICE
 "Eº‹ %dáddög scuŒ%d", 
îr
, 
ödex
);

533 
	}
}

535 
ssize_t
 
	$scuŒd_show_dev
(
devi˚
 *
ddev
, *
buf
)

537 
scuŒd_dev
 *
dev
 = 
ddev
->
drivî_d©a
;

539  
	`¥öt_dev_t
(
buf
, 
dev
->
cdev
.dev);

540 
	}
}

542 
DEVICE_ATTR
(
dev
, 
S_IRUGO
, 
scuŒd_show_dev
, 
NULL
);

544 
	$scuŒd_ªgi°î_dev
(
scuŒd_dev
 *
dev
, 
ödex
)

546 
	`•rötf
(
dev
->
dev«me
, "scuŒd%d", 
ödex
);

547 
dev
->
ldev
.
«me
 = dev->
dev«me
;

548 
dev
->
ldev
.
drivî
 = &
scuŒd_drivî
;

549 
dev
->
ldev
.dev.
drivî_d©a
 = dev;

550 
	`ªgi°î_ldd_devi˚
(&
dev
->
ldev
);

551 
	`devi˚_¸óã_fûe
(&
dev
->
ldev
.dev, &
dev_©å_dev
);

552 
	}
}

559 
	$scuŒd_öô
()

561 
ªsu…
, 
i
;

562 
dev_t
 
dev
 = 
	`MKDEV
(
scuŒd_maj‹
, 0);

567 i‡(
scuŒd_maj‹
)

568 
ªsu…
 = 
	`ªgi°î_chrdev_ªgi⁄
(
dev
, 
scuŒd_devs
, "sculld");

570 
ªsu…
 = 
	`Æloc_chrdev_ªgi⁄
(&
dev
, 0, 
scuŒd_devs
, "sculld");

571 
scuŒd_maj‹
 = 
	`MAJOR
(
dev
);

573 i‡(
ªsu…
 < 0)

574  
ªsu…
;

579 
	`ªgi°î_ldd_drivî
(&
scuŒd_drivî
);

585 
scuŒd_devi˚s
 = 
	`kmÆloc
(
scuŒd_devs
* (
scuŒd_dev
), 
GFP_KERNEL
);

586 i‡(!
scuŒd_devi˚s
) {

587 
ªsu…
 = -
ENOMEM
;

588 
Áû_mÆloc
;

590 
	`mem£t
(
scuŒd_devi˚s
, 0, 
scuŒd_devs
* (
scuŒd_dev
));

591 
i
 = 0; i < 
scuŒd_devs
; i++) {

592 
scuŒd_devi˚s
[
i
].
‹dî
 = 
scuŒd_‹dî
;

593 
scuŒd_devi˚s
[
i
].
q£t
 = 
scuŒd_q£t
;

594 
	`£ma_öô
 (&
scuŒd_devi˚s
[
i
].
£m
, 1);

595 
	`scuŒd_£tup_cdev
(
scuŒd_devi˚s
 + 
i
, i);

596 
	`scuŒd_ªgi°î_dev
(
scuŒd_devi˚s
 + 
i
, i);

600 #ifde‡
SCULLD_USE_PROC


601 
	`¸óã_¥oc_ªad_íåy
("scuŒdmem", 0, 
NULL
, 
scuŒd_ªad_¥ocmem
, NULL);

605 
Áû_mÆloc
:

606 
	`uƒegi°î_chrdev_ªgi⁄
(
dev
, 
scuŒd_devs
);

607  
ªsu…
;

608 
	}
}

612 
	$scuŒd_˛ónup
()

614 
i
;

616 #ifde‡
SCULLD_USE_PROC


617 
	`ªmove_¥oc_íåy
("scuŒdmem", 
NULL
);

620 
i
 = 0; i < 
scuŒd_devs
; i++) {

621 
	`uƒegi°î_ldd_devi˚
(&
scuŒd_devi˚s
[
i
].
ldev
);

622 
	`cdev_dñ
(&
scuŒd_devi˚s
[
i
].
cdev
);

623 
	`scuŒd_åim
(
scuŒd_devi˚s
 + 
i
);

625 
	`k‰ì
(
scuŒd_devi˚s
);

626 
	`uƒegi°î_ldd_drivî
(&
scuŒd_drivî
);

627 
	`uƒegi°î_chrdev_ªgi⁄
(
	`MKDEV
 (
scuŒd_maj‹
, 0), 
scuŒd_devs
);

628 
	}
}

631 
moduÀ_öô
(
scuŒd_öô
);

632 
moduÀ_exô
(
scuŒd_˛ónup
);

	@sculld/mmap.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

21 
	~<löux/mm.h
>

22 
	~<löux/î∫o.h
>

23 
	~<asm/pgèbÀ.h
>

25 
	~"scuŒd.h
"

33 
	$scuŒd_vma_›í
(
vm_¨ó_°ru˘
 *
vma
)

35 
scuŒd_dev
 *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

37 
dev
->
vmas
++;

38 
	}
}

40 
	$scuŒd_vma_˛o£
(
vm_¨ó_°ru˘
 *
vma
)

42 
scuŒd_dev
 *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

44 
dev
->
vmas
--;

45 
	}
}

60 
∑ge
 *
	$scuŒd_vma_n›age
(
vm_¨ó_°ru˘
 *
vma
,

61 
addªss
, *
ty≥
)

63 
off£t
;

64 
scuŒd_dev
 *
±r
, *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

65 
∑ge
 *∑gê
NOPAGE_SIGBUS
;

66 *
∑gïå
 = 
NULL
;

68 
	`down
(&
dev
->
£m
);

69 
off£t
 = (
addªss
 - 
vma
->
vm_°¨t
Ë+ (vma->
vm_pgoff
 << 
PAGE_SHIFT
);

70 i‡(
off£t
 >
dev
->
size
Ë
out
;

77 
off£t
 >>
PAGE_SHIFT
;

78 
±r
 = 
dev
;Öå && 
off£t
 >dev->
q£t
;) {

79 
±r
 =Öå->
√xt
;

80 
off£t
 -
dev
->
q£t
;

82 i‡(
±r
 &&Öå->
d©a
Ë
∑gïå
 =Öå->d©a[
off£t
];

83 i‡(!
∑gïå
Ë
out
;

86 
	`gë_∑ge
(
∑ge
);

87 i‡(
ty≥
)

88 *
ty≥
 = 
VM_FAULT_MINOR
;

89 
out
:

90 
	`up
(&
dev
->
£m
);

91  
∑ge
;

92 
	}
}

96 
vm_›î©i⁄s_°ru˘
 
	gscuŒd_vm_›s
 = {

97 .
›í
 = 
scuŒd_vma_›í
,

98 .
	g˛o£
 = 
scuŒd_vma_˛o£
,

99 .
	gn›age
 = 
scuŒd_vma_n›age
,

103 
	$scuŒd_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

105 
öode
 *öodê
fûp
->
f_díåy
->
d_öode
;

108 i‡(
scuŒd_devi˚s
[
	`imö‹
(
öode
)].
‹dî
)

109  -
ENODEV
;

112 
vma
->
vm_›s
 = &
scuŒd_vm_›s
;

113 
vma
->
vm_Êags
 |
VM_RESERVED
;

114 
vma
->
vm_¥iv©e_d©a
 = 
fûp
->
¥iv©e_d©a
;

115 
	`scuŒd_vma_›í
(
vma
);

117 
	}
}

	@sculld/sculld.h

16 
	~<löux/io˘l.h
>

17 
	~<löux/cdev.h
>

18 
	~<löux/devi˚.h
>

19 
	~"../ö˛ude/lddbus.h
"

25 #unde‡
PDEBUG


26 #ifde‡
SCULLD_DEBUG


27 #ifde‡
__KERNEL__


29 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`¥ötk
–
KERN_DEBUG
 "scuŒd: " fmt, ##árgs)

	)

32 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt, ##árgs)

	)

35 
	#PDEBUG
(
fmt
, 
¨gs
...Ë

	)

38 #unde‡
PDEBUGG


39 
	#PDEBUGG
(
fmt
, 
¨gs
...Ë

	)

41 
	#SCULLD_MAJOR
 0

	)

43 
	#SCULLD_DEVS
 4

	)

54 
	#SCULLD_ORDER
 0

	)

55 
	#SCULLD_QSET
 500

	)

57 
	sscuŒd_dev
 {

58 **
	md©a
;

59 
scuŒd_dev
 *
	m√xt
;

60 
	mvmas
;

61 
	m‹dî
;

62 
	mq£t
;

63 
size_t
 
	msize
;

64 
£m≠h‹e
 
	m£m
;

65 
cdev
 
	mcdev
;

66 
	mdev«me
[20];

67 
ldd_devi˚
 
	mldev
;

70 
scuŒd_dev
 *
scuŒd_devi˚s
;

72 
fûe_›î©i⁄s
 
scuŒd_f›s
;

77 
scuŒd_maj‹
;

78 
scuŒd_devs
;

79 
scuŒd_‹dî
;

80 
scuŒd_q£t
;

85 
scuŒd_åim
(
scuŒd_dev
 *
dev
);

86 
scuŒd_dev
 *
scuŒd_fﬁlow
(scuŒd_dev *
dev
, 
n
);

89 #ifde‡
SCULLD_DEBUG


90 
	#SCULLD_USE_PROC


	)

98 
	#SCULLD_IOC_MAGIC
 'K'

	)

100 
	#SCULLD_IOCRESET
 
	`_IO
(
SCULLD_IOC_MAGIC
, 0)

	)

110 
	#SCULLD_IOCSORDER
 
	`_IOW
(
SCULLD_IOC_MAGIC
, 1, )

	)

111 
	#SCULLD_IOCTORDER
 
	`_IO
(
SCULLD_IOC_MAGIC
, 2)

	)

112 
	#SCULLD_IOCGORDER
 
	`_IOR
(
SCULLD_IOC_MAGIC
, 3, )

	)

113 
	#SCULLD_IOCQORDER
 
	`_IO
(
SCULLD_IOC_MAGIC
, 4)

	)

114 
	#SCULLD_IOCXORDER
 
	`_IOWR
(
SCULLD_IOC_MAGIC
, 5, )

	)

115 
	#SCULLD_IOCHORDER
 
	`_IO
(
SCULLD_IOC_MAGIC
, 6)

	)

116 
	#SCULLD_IOCSQSET
 
	`_IOW
(
SCULLD_IOC_MAGIC
, 7, )

	)

117 
	#SCULLD_IOCTQSET
 
	`_IO
(
SCULLD_IOC_MAGIC
, 8)

	)

118 
	#SCULLD_IOCGQSET
 
	`_IOR
(
SCULLD_IOC_MAGIC
, 9, )

	)

119 
	#SCULLD_IOCQQSET
 
	`_IO
(
SCULLD_IOC_MAGIC
, 10)

	)

120 
	#SCULLD_IOCXQSET
 
	`_IOWR
(
SCULLD_IOC_MAGIC
,11, )

	)

121 
	#SCULLD_IOCHQSET
 
	`_IO
(
SCULLD_IOC_MAGIC
, 12)

	)

123 
	#SCULLD_IOC_MAXNR
 12

	)

	@scullp/main.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/moduÀ∑øm.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/fs.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/¥oc_fs.h
>

28 
	~<löux/f˙é.h
>

29 
	~<löux/aio.h
>

30 
	~<asm/uac˚ss.h
>

31 
	~"scuŒp.h
"

34 
	gscuŒp_maj‹
 = 
SCULLP_MAJOR
;

35 
	gscuŒp_devs
 = 
SCULLP_DEVS
;

36 
	gscuŒp_q£t
 = 
SCULLP_QSET
;

37 
	gscuŒp_‹dî
 = 
SCULLP_ORDER
;

39 
moduÀ_∑øm
(
scuŒp_maj‹
, , 0);

40 
moduÀ_∑øm
(
scuŒp_devs
, , 0);

41 
moduÀ_∑øm
(
scuŒp_q£t
, , 0);

42 
moduÀ_∑øm
(
scuŒp_‹dî
, , 0);

43 
MODULE_AUTHOR
("Alessandro Rubini");

44 
MODULE_LICENSE
("Dual BSD/GPL");

46 
scuŒp_dev
 *
	gscuŒp_devi˚s
;

48 
scuŒp_åim
(
scuŒp_dev
 *
dev
);

49 
scuŒp_˛ónup
();

56 #ifde‡
SCULLP_USE_PROC


61 
	$scuŒp_¥oc_off£t
(*
buf
, **
°¨t
, 
off_t
 *
off£t
, *
Àn
)

63 i‡(*
off£t
 == 0)

65 i‡(*
off£t
 >*
Àn
) {

67 *
off£t
 -*
Àn
;

68 *
Àn
 = 0;

71 *
°¨t
 = 
buf
 + *
off£t
;

72 *
off£t
 = 0;

74 
	}
}

77 
	$scuŒp_ªad_¥ocmem
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

78 
cou¡
, *
eof
, *
d©a
)

80 
i
, 
j
, 
‹dî
, 
q£t
, 
Àn
 = 0;

81 
limô
 = 
cou¡
 - 80;

82 
scuŒp_dev
 *
d
;

84 *
°¨t
 = 
buf
;

85 
i
 = 0; i < 
scuŒp_devs
; i++) {

86 
d
 = &
scuŒp_devi˚s
[
i
];

87 i‡(
	`down_öãºu±ibÀ
 (&
d
->
£m
))

88  -
ERESTARTSYS
;

89 
q£t
 = 
d
->qset;

90 
‹dî
 = 
d
->order;

91 
Àn
 +
	`•rötf
(
buf
+len,"\nDevice %i: qset %i, order %i, sz %li\n",

92 
i
, 
q£t
, 
‹dî
, ()(
d
->
size
));

93 ; 
d
; d = d->
√xt
) {

94 
Àn
 +
	`•rötf
(
buf
+Àn," iãmáà%p, q£à© %p\n",
d
,d->
d©a
);

95 
	`scuŒp_¥oc_off£t
 (
buf
, 
°¨t
, &
off£t
, &
Àn
);

96 i‡(
Àn
 > 
limô
)

97 
out
;

98 i‡(
d
->
d©a
 && !d->
√xt
)

99 
j
 = 0; j < 
q£t
; j++) {

100 i‡(
d
->
d©a
[
j
])

101 
Àn
 +
	`•rötf
(
buf
+Àn," % 4i:%8p\n",
j
,
d
->
d©a
[j]);

102 
	`scuŒp_¥oc_off£t
 (
buf
, 
°¨t
, &
off£t
, &
Àn
);

103 i‡(
Àn
 > 
limô
)

104 
out
;

107 
out
:

108 
	`up
 (&
scuŒp_devi˚s
[
i
].
£m
);

109 i‡(
Àn
 > 
limô
)

112 *
eof
 = 1;

113  
Àn
;

114 
	}
}

122 
	$scuŒp_›í
 (
öode
 *öode, 
fûe
 *
fûp
)

124 
scuŒp_dev
 *
dev
;

127 
dev
 = 
	`c⁄èöî_of
(
öode
->
i_cdev
, 
scuŒp_dev
, 
cdev
);

130 i‡–(
fûp
->
f_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

131 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

132  -
ERESTARTSYS
;

133 
	`scuŒp_åim
(
dev
);

134 
	`up
 (&
dev
->
£m
);

138 
fûp
->
¥iv©e_d©a
 = 
dev
;

141 
	}
}

143 
	$scuŒp_ªÀa£
 (
öode
 *öode, 
fûe
 *
fûp
)

146 
	}
}

151 
scuŒp_dev
 *
	$scuŒp_fﬁlow
(
scuŒp_dev
 *
dev
, 
n
)

153 
n
--) {

154 i‡(!
dev
->
√xt
) {

155 
dev
->
√xt
 = 
	`kmÆloc
((
scuŒp_dev
), 
GFP_KERNEL
);

156 
	`mem£t
(
dev
->
√xt
, 0, (
scuŒp_dev
));

158 
dev
 = dev->
√xt
;

161  
dev
;

162 
	}
}

168 
ssize_t
 
	$scuŒp_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

169 
loff_t
 *
f_pos
)

171 
scuŒp_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

172 
scuŒp_dev
 *
d±r
;

173 
qu™tum
 = 
PAGE_SIZE
 << 
dev
->
‹dî
;

174 
q£t
 = 
dev
->qset;

175 
ôemsize
 = 
qu™tum
 * 
q£t
;

176 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

177 
ssize_t
 
ªtvÆ
 = 0;

179 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

180  -
ERESTARTSYS
;

181 i‡(*
f_pos
 > 
dev
->
size
)

182 
nŸhög
;

183 i‡(*
f_pos
 + 
cou¡
 > 
dev
->
size
)

184 
cou¡
 = 
dev
->
size
 - *
f_pos
;

186 
ôem
 = ((Ë*
f_pos
Ë/ 
ôemsize
;

187 
ª°
 = ((Ë*
f_pos
Ë% 
ôemsize
;

188 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

191 
d±r
 = 
	`scuŒp_fﬁlow
(
dev
, 
ôem
);

193 i‡(!
d±r
->
d©a
)

194 
nŸhög
;

195 i‡(!
d±r
->
d©a
[
s_pos
])

196 
nŸhög
;

197 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

198 
cou¡
 = 
qu™tum
 - 
q_pos
;

200 i‡(
	`c›y_to_u£r
 (
buf
, 
d±r
->
d©a
[
s_pos
]+
q_pos
, 
cou¡
)) {

201 
ªtvÆ
 = -
EFAULT
;

202 
nŸhög
;

204 
	`up
 (&
dev
->
£m
);

206 *
f_pos
 +
cou¡
;

207  
cou¡
;

209 
nŸhög
:

210 
	`up
 (&
dev
->
£m
);

211  
ªtvÆ
;

212 
	}
}

216 
ssize_t
 
	$scuŒp_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

217 
loff_t
 *
f_pos
)

219 
scuŒp_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

220 
scuŒp_dev
 *
d±r
;

221 
qu™tum
 = 
PAGE_SIZE
 << 
dev
->
‹dî
;

222 
q£t
 = 
dev
->qset;

223 
ôemsize
 = 
qu™tum
 * 
q£t
;

224 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

225 
ssize_t
 
ªtvÆ
 = -
ENOMEM
;

227 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

228  -
ERESTARTSYS
;

231 
ôem
 = ((Ë*
f_pos
Ë/ 
ôemsize
;

232 
ª°
 = ((Ë*
f_pos
Ë% 
ôemsize
;

233 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

236 
d±r
 = 
	`scuŒp_fﬁlow
(
dev
, 
ôem
);

237 i‡(!
d±r
->
d©a
) {

238 
d±r
->
d©a
 = 
	`kmÆloc
(
q£t
 * (*), 
GFP_KERNEL
);

239 i‡(!
d±r
->
d©a
)

240 
nomem
;

241 
	`mem£t
(
d±r
->
d©a
, 0, 
q£t
 * (*));

244 i‡(!
d±r
->
d©a
[
s_pos
]) {

245 
d±r
->
d©a
[
s_pos
] =

246 (*)
	`__gë_‰ì_∑ges
(
GFP_KERNEL
, 
d±r
->
‹dî
);

247 i‡(!
d±r
->
d©a
[
s_pos
])

248 
nomem
;

249 
	`mem£t
(
d±r
->
d©a
[
s_pos
], 0, 
PAGE_SIZE
 << d±r->
‹dî
);

251 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

252 
cou¡
 = 
qu™tum
 - 
q_pos
;

253 i‡(
	`c›y_‰om_u£r
 (
d±r
->
d©a
[
s_pos
]+
q_pos
, 
buf
, 
cou¡
)) {

254 
ªtvÆ
 = -
EFAULT
;

255 
nomem
;

257 *
f_pos
 +
cou¡
;

260 i‡(
dev
->
size
 < *
f_pos
)

261 
dev
->
size
 = *
f_pos
;

262 
	`up
 (&
dev
->
£m
);

263  
cou¡
;

265 
nomem
:

266 
	`up
 (&
dev
->
£m
);

267  
ªtvÆ
;

268 
	}
}

274 
	$scuŒp_io˘l
 (
öode
 *öode, 
fûe
 *
fûp
,

275 
cmd
, 
¨g
)

278 
îr
 = 0, 
ªt
 = 0, 
tmp
;

281 i‡(
	`_IOC_TYPE
(
cmd
Ë!
SCULLP_IOC_MAGIC
Ë -
ENOTTY
;

282 i‡(
	`_IOC_NR
(
cmd
Ë> 
SCULLP_IOC_MAXNR
Ë -
ENOTTY
;

290 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_READ
)

291 
îr
 = !
	`ac˚ss_ok
(
VERIFY_WRITE
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

292 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_WRITE
)

293 
îr
 = !
	`ac˚ss_ok
(
VERIFY_READ
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

294 i‡(
îr
)

295  -
EFAULT
;

297 
cmd
) {

299 
SCULLP_IOCRESET
:

300 
scuŒp_q£t
 = 
SCULLP_QSET
;

301 
scuŒp_‹dî
 = 
SCULLP_ORDER
;

304 
SCULLP_IOCSORDER
:

305 
ªt
 = 
	`__gë_u£r
(
scuŒp_‹dî
, (
__u£r
 *Ë
¨g
);

308 
SCULLP_IOCTORDER
:

309 
scuŒp_‹dî
 = 
¨g
;

312 
SCULLP_IOCGORDER
:

313 
ªt
 = 
	`__put_u£r
 (
scuŒp_‹dî
, (
__u£r
 *Ë
¨g
);

316 
SCULLP_IOCQORDER
:

317  
scuŒp_‹dî
;

319 
SCULLP_IOCXORDER
:

320 
tmp
 = 
scuŒp_‹dî
;

321 
ªt
 = 
	`__gë_u£r
(
scuŒp_‹dî
, (
__u£r
 *Ë
¨g
);

322 i‡(
ªt
 == 0)

323 
ªt
 = 
	`__put_u£r
(
tmp
, (
__u£r
 *Ë
¨g
);

326 
SCULLP_IOCHORDER
:

327 
tmp
 = 
scuŒp_‹dî
;

328 
scuŒp_‹dî
 = 
¨g
;

329  
tmp
;

331 
SCULLP_IOCSQSET
:

332 
ªt
 = 
	`__gë_u£r
(
scuŒp_q£t
, (
__u£r
 *Ë
¨g
);

335 
SCULLP_IOCTQSET
:

336 
scuŒp_q£t
 = 
¨g
;

339 
SCULLP_IOCGQSET
:

340 
ªt
 = 
	`__put_u£r
(
scuŒp_q£t
, (
__u£r
 *)
¨g
);

343 
SCULLP_IOCQQSET
:

344  
scuŒp_q£t
;

346 
SCULLP_IOCXQSET
:

347 
tmp
 = 
scuŒp_q£t
;

348 
ªt
 = 
	`__gë_u£r
(
scuŒp_q£t
, (
__u£r
 *)
¨g
);

349 i‡(
ªt
 == 0)

350 
ªt
 = 
	`__put_u£r
(
tmp
, (
__u£r
 *)
¨g
);

353 
SCULLP_IOCHQSET
:

354 
tmp
 = 
scuŒp_q£t
;

355 
scuŒp_q£t
 = 
¨g
;

356  
tmp
;

359  -
ENOTTY
;

362  
ªt
;

363 
	}
}

369 
loff_t
 
	$scuŒp_Œ£ek
 (
fûe
 *
fûp
, 
loff_t
 
off
, 
whí˚
)

371 
scuŒp_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

372 
√wpos
;

374 
whí˚
) {

376 
√wpos
 = 
off
;

380 
√wpos
 = 
fûp
->
f_pos
 + 
off
;

384 
√wpos
 = 
dev
->
size
 + 
off
;

388  -
EINVAL
;

390 i‡(
√wpos
<0Ë -
EINVAL
;

391 
fûp
->
f_pos
 = 
√wpos
;

392  
√wpos
;

393 
	}
}

400 
	sasync_w‹k
 {

401 
kiocb
 *
	miocb
;

402 
	mªsu…
;

403 
w‹k_°ru˘
 
	mw‹k
;

409 
	$scuŒp_do_de„ºed_›
(*
p
)

411 
async_w‹k
 *
°uff
 = (async_w‹k *Ë
p
;

412 
	`aio_com∂ëe
(
°uff
->
iocb
, stuff->
ªsu…
, 0);

413 
	`k‰ì
(
°uff
);

414 
	}
}

417 
	$scuŒp_de„r_›
(
wrôe
, 
kiocb
 *
iocb
, 
__u£r
 *
buf
,

418 
size_t
 
cou¡
, 
loff_t
 
pos
)

420 
async_w‹k
 *
°uff
;

421 
ªsu…
;

424 i‡(
wrôe
)

425 
ªsu…
 = 
	`scuŒp_wrôe
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

427 
ªsu…
 = 
	`scuŒp_ªad
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

430 i‡(
	`is_sync_kiocb
(
iocb
))

431  
ªsu…
;

434 
°uff
 = 
	`kmÆloc
 ( (*°uff), 
GFP_KERNEL
);

435 i‡(
°uff
 =
NULL
)

436  
ªsu…
;

437 
°uff
->
iocb
 = iocb;

438 
°uff
->
ªsu…
 =Ñesult;

439 
	`INIT_WORK
(&
°uff
->
w‹k
, 
scuŒp_do_de„ºed_›
, stuff);

440 
	`scheduÀ_dñayed_w‹k
(&
°uff
->
w‹k
, 
HZ
/100);

441  -
EIOCBQUEUED
;

442 
	}
}

445 
ssize_t
 
	$scuŒp_aio_ªad
(
kiocb
 *
iocb
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

446 
loff_t
 
pos
)

448  
	`scuŒp_de„r_›
(0, 
iocb
, 
buf
, 
cou¡
, 
pos
);

449 
	}
}

451 
ssize_t
 
	$scuŒp_aio_wrôe
(
kiocb
 *
iocb
, c⁄° 
__u£r
 *
buf
,

452 
size_t
 
cou¡
, 
loff_t
 
pos
)

454  
	`scuŒp_de„r_›
(1, 
iocb
, (
__u£r
 *Ë
buf
, 
cou¡
, 
pos
);

455 
	}
}

462 
scuŒp_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
);

469 
fûe_›î©i⁄s
 
	gscuŒp_f›s
 = {

470 .
ow√r
 = 
THIS_MODULE
,

471 .
	gŒ£ek
 = 
scuŒp_Œ£ek
,

472 .
	gªad
 = 
scuŒp_ªad
,

473 .
	gwrôe
 = 
scuŒp_wrôe
,

474 .
	gio˘l
 = 
scuŒp_io˘l
,

475 .
	gmm≠
 = 
scuŒp_mm≠
,

476 .
	g›í
 = 
scuŒp_›í
,

477 .
	gªÀa£
 = 
scuŒp_ªÀa£
,

478 .
	gaio_ªad
 = 
scuŒp_aio_ªad
,

479 .
	gaio_wrôe
 = 
scuŒp_aio_wrôe
,

482 
	$scuŒp_åim
(
scuŒp_dev
 *
dev
)

484 
scuŒp_dev
 *
√xt
, *
d±r
;

485 
q£t
 = 
dev
->qset;

486 
i
;

488 i‡(
dev
->
vmas
)

489  -
EBUSY
;

491 
d±r
 = 
dev
; d±r; d±∏
√xt
) {

492 i‡(
d±r
->
d©a
) {

494 
i
 = 0; i < 
q£t
; i++)

495 i‡(
d±r
->
d©a
[
i
])

496 
	`‰ì_∑ges
(()(
d±r
->
d©a
[
i
]),

497 
d±r
->
‹dî
);

499 
	`k‰ì
(
d±r
->
d©a
);

500 
d±r
->
d©a
=
NULL
;

502 
√xt
=
d±r
->next;

503 i‡(
d±r
 !
dev
Ë
	`k‰ì
(dptr);

505 
dev
->
size
 = 0;

506 
dev
->
q£t
 = 
scuŒp_q£t
;

507 
dev
->
‹dî
 = 
scuŒp_‹dî
;

508 
dev
->
√xt
 = 
NULL
;

510 
	}
}

513 
	$scuŒp_£tup_cdev
(
scuŒp_dev
 *
dev
, 
ödex
)

515 
îr
, 
devno
 = 
	`MKDEV
(
scuŒp_maj‹
, 
ödex
);

517 
	`cdev_öô
(&
dev
->
cdev
, &
scuŒp_f›s
);

518 
dev
->
cdev
.
ow√r
 = 
THIS_MODULE
;

519 
dev
->
cdev
.
›s
 = &
scuŒp_f›s
;

520 
îr
 = 
	`cdev_add
 (&
dev
->
cdev
, 
devno
, 1);

522 i‡(
îr
)

523 
	`¥ötk
(
KERN_NOTICE
 "Eº‹ %dáddög scuŒ%d", 
îr
, 
ödex
);

524 
	}
}

532 
	$scuŒp_öô
()

534 
ªsu…
, 
i
;

535 
dev_t
 
dev
 = 
	`MKDEV
(
scuŒp_maj‹
, 0);

540 i‡(
scuŒp_maj‹
)

541 
ªsu…
 = 
	`ªgi°î_chrdev_ªgi⁄
(
dev
, 
scuŒp_devs
, "scullp");

543 
ªsu…
 = 
	`Æloc_chrdev_ªgi⁄
(&
dev
, 0, 
scuŒp_devs
, "scullp");

544 
scuŒp_maj‹
 = 
	`MAJOR
(
dev
);

546 i‡(
ªsu…
 < 0)

547  
ªsu…
;

554 
scuŒp_devi˚s
 = 
	`kmÆloc
(
scuŒp_devs
* (
scuŒp_dev
), 
GFP_KERNEL
);

555 i‡(!
scuŒp_devi˚s
) {

556 
ªsu…
 = -
ENOMEM
;

557 
Áû_mÆloc
;

559 
	`mem£t
(
scuŒp_devi˚s
, 0, 
scuŒp_devs
* (
scuŒp_dev
));

560 
i
 = 0; i < 
scuŒp_devs
; i++) {

561 
scuŒp_devi˚s
[
i
].
‹dî
 = 
scuŒp_‹dî
;

562 
scuŒp_devi˚s
[
i
].
q£t
 = 
scuŒp_q£t
;

563 
	`£ma_öô
 (&
scuŒp_devi˚s
[
i
].
£m
, 1);

564 
	`scuŒp_£tup_cdev
(
scuŒp_devi˚s
 + 
i
, i);

568 #ifde‡
SCULLP_USE_PROC


569 
	`¸óã_¥oc_ªad_íåy
("scuŒpmem", 0, 
NULL
, 
scuŒp_ªad_¥ocmem
, NULL);

573 
Áû_mÆloc
:

574 
	`uƒegi°î_chrdev_ªgi⁄
(
dev
, 
scuŒp_devs
);

575  
ªsu…
;

576 
	}
}

580 
	$scuŒp_˛ónup
()

582 
i
;

584 #ifde‡
SCULLP_USE_PROC


585 
	`ªmove_¥oc_íåy
("scuŒpmem", 
NULL
);

588 
i
 = 0; i < 
scuŒp_devs
; i++) {

589 
	`cdev_dñ
(&
scuŒp_devi˚s
[
i
].
cdev
);

590 
	`scuŒp_åim
(
scuŒp_devi˚s
 + 
i
);

592 
	`k‰ì
(
scuŒp_devi˚s
);

593 
	`uƒegi°î_chrdev_ªgi⁄
(
	`MKDEV
 (
scuŒp_maj‹
, 0), 
scuŒp_devs
);

594 
	}
}

597 
moduÀ_öô
(
scuŒp_öô
);

598 
moduÀ_exô
(
scuŒp_˛ónup
);

	@scullp/mmap.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

21 
	~<löux/mm.h
>

22 
	~<löux/î∫o.h
>

23 
	~<asm/pgèbÀ.h
>

25 
	~"scuŒp.h
"

33 
	$scuŒp_vma_›í
(
vm_¨ó_°ru˘
 *
vma
)

35 
scuŒp_dev
 *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

37 
dev
->
vmas
++;

38 
	}
}

40 
	$scuŒp_vma_˛o£
(
vm_¨ó_°ru˘
 *
vma
)

42 
scuŒp_dev
 *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

44 
dev
->
vmas
--;

45 
	}
}

60 
∑ge
 *
	$scuŒp_vma_n›age
(
vm_¨ó_°ru˘
 *
vma
,

61 
addªss
, *
ty≥
)

63 
off£t
;

64 
scuŒp_dev
 *
±r
, *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

65 
∑ge
 *∑gê
NOPAGE_SIGBUS
;

66 *
∑gïå
 = 
NULL
;

68 
	`down
(&
dev
->
£m
);

69 
off£t
 = (
addªss
 - 
vma
->
vm_°¨t
Ë+ (vma->
vm_pgoff
 << 
PAGE_SHIFT
);

70 i‡(
off£t
 >
dev
->
size
Ë
out
;

77 
off£t
 >>
PAGE_SHIFT
;

78 
±r
 = 
dev
;Öå && 
off£t
 >dev->
q£t
;) {

79 
±r
 =Öå->
√xt
;

80 
off£t
 -
dev
->
q£t
;

82 i‡(
±r
 &&Öå->
d©a
Ë
∑gïå
 =Öå->d©a[
off£t
];

83 i‡(!
∑gïå
Ë
out
;

84 
∑ge
 = 
	`vút_to_∑ge
(
∑gïå
);

87 
	`gë_∑ge
(
∑ge
);

88 i‡(
ty≥
)

89 *
ty≥
 = 
VM_FAULT_MINOR
;

90 
out
:

91 
	`up
(&
dev
->
£m
);

92  
∑ge
;

93 
	}
}

97 
vm_›î©i⁄s_°ru˘
 
	gscuŒp_vm_›s
 = {

98 .
›í
 = 
scuŒp_vma_›í
,

99 .
	g˛o£
 = 
scuŒp_vma_˛o£
,

100 .
	gn›age
 = 
scuŒp_vma_n›age
,

104 
	$scuŒp_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

106 
öode
 *öodê
fûp
->
f_díåy
->
d_öode
;

109 i‡(
scuŒp_devi˚s
[
	`imö‹
(
öode
)].
‹dî
)

110  -
ENODEV
;

113 
vma
->
vm_›s
 = &
scuŒp_vm_›s
;

114 
vma
->
vm_Êags
 |
VM_RESERVED
;

115 
vma
->
vm_¥iv©e_d©a
 = 
fûp
->
¥iv©e_d©a
;

116 
	`scuŒp_vma_›í
(
vma
);

118 
	}
}

	@scullp/scullp.h

16 
	~<löux/io˘l.h
>

17 
	~<löux/cdev.h
>

23 #unde‡
PDEBUG


24 #ifde‡
SCULLP_DEBUG


25 #ifde‡
__KERNEL__


27 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`¥ötk
–
KERN_DEBUG
 "scuŒp: " fmt, ##árgs)

	)

30 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt, ##árgs)

	)

33 
	#PDEBUG
(
fmt
, 
¨gs
...Ë

	)

36 #unde‡
PDEBUGG


37 
	#PDEBUGG
(
fmt
, 
¨gs
...Ë

	)

39 
	#SCULLP_MAJOR
 0

	)

41 
	#SCULLP_DEVS
 4

	)

52 
	#SCULLP_ORDER
 0

	)

53 
	#SCULLP_QSET
 500

	)

55 
	sscuŒp_dev
 {

56 **
	md©a
;

57 
scuŒp_dev
 *
	m√xt
;

58 
	mvmas
;

59 
	m‹dî
;

60 
	mq£t
;

61 
size_t
 
	msize
;

62 
£m≠h‹e
 
	m£m
;

63 
cdev
 
	mcdev
;

66 
scuŒp_dev
 *
scuŒp_devi˚s
;

68 
fûe_›î©i⁄s
 
scuŒp_f›s
;

73 
scuŒp_maj‹
;

74 
scuŒp_devs
;

75 
scuŒp_‹dî
;

76 
scuŒp_q£t
;

81 
scuŒp_åim
(
scuŒp_dev
 *
dev
);

82 
scuŒp_dev
 *
scuŒp_fﬁlow
(scuŒp_dev *
dev
, 
n
);

85 #ifde‡
SCULLP_DEBUG


86 
	#SCULLP_USE_PROC


	)

94 
	#SCULLP_IOC_MAGIC
 'K'

	)

96 
	#SCULLP_IOCRESET
 
	`_IO
(
SCULLP_IOC_MAGIC
, 0)

	)

106 
	#SCULLP_IOCSORDER
 
	`_IOW
(
SCULLP_IOC_MAGIC
, 1, )

	)

107 
	#SCULLP_IOCTORDER
 
	`_IO
(
SCULLP_IOC_MAGIC
, 2)

	)

108 
	#SCULLP_IOCGORDER
 
	`_IOR
(
SCULLP_IOC_MAGIC
, 3, )

	)

109 
	#SCULLP_IOCQORDER
 
	`_IO
(
SCULLP_IOC_MAGIC
, 4)

	)

110 
	#SCULLP_IOCXORDER
 
	`_IOWR
(
SCULLP_IOC_MAGIC
, 5, )

	)

111 
	#SCULLP_IOCHORDER
 
	`_IO
(
SCULLP_IOC_MAGIC
, 6)

	)

112 
	#SCULLP_IOCSQSET
 
	`_IOW
(
SCULLP_IOC_MAGIC
, 7, )

	)

113 
	#SCULLP_IOCTQSET
 
	`_IO
(
SCULLP_IOC_MAGIC
, 8)

	)

114 
	#SCULLP_IOCGQSET
 
	`_IOR
(
SCULLP_IOC_MAGIC
, 9, )

	)

115 
	#SCULLP_IOCQQSET
 
	`_IO
(
SCULLP_IOC_MAGIC
, 10)

	)

116 
	#SCULLP_IOCXQSET
 
	`_IOWR
(
SCULLP_IOC_MAGIC
,11, )

	)

117 
	#SCULLP_IOCHQSET
 
	`_IO
(
SCULLP_IOC_MAGIC
, 12)

	)

119 
	#SCULLP_IOC_MAXNR
 12

	)

	@scullv/main.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/moduÀ∑øm.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/fs.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/¥oc_fs.h
>

28 
	~<löux/f˙é.h
>

29 
	~<löux/aio.h
>

30 
	~<asm/uac˚ss.h
>

31 
	~<löux/vmÆloc.h
>

32 
	~"scuŒv.h
"

35 
	gscuŒv_maj‹
 = 
SCULLV_MAJOR
;

36 
	gscuŒv_devs
 = 
SCULLV_DEVS
;

37 
	gscuŒv_q£t
 = 
SCULLV_QSET
;

38 
	gscuŒv_‹dî
 = 
SCULLV_ORDER
;

40 
moduÀ_∑øm
(
scuŒv_maj‹
, , 0);

41 
moduÀ_∑øm
(
scuŒv_devs
, , 0);

42 
moduÀ_∑øm
(
scuŒv_q£t
, , 0);

43 
moduÀ_∑øm
(
scuŒv_‹dî
, , 0);

44 
MODULE_AUTHOR
("Alessandro Rubini");

45 
MODULE_LICENSE
("Dual BSD/GPL");

47 
scuŒv_dev
 *
	gscuŒv_devi˚s
;

49 
scuŒv_åim
(
scuŒv_dev
 *
dev
);

50 
scuŒv_˛ónup
();

57 #ifde‡
SCULLV_USE_PROC


62 
	$scuŒv_¥oc_off£t
(*
buf
, **
°¨t
, 
off_t
 *
off£t
, *
Àn
)

64 i‡(*
off£t
 == 0)

66 i‡(*
off£t
 >*
Àn
) {

68 *
off£t
 -*
Àn
;

69 *
Àn
 = 0;

72 *
°¨t
 = 
buf
 + *
off£t
;

73 *
off£t
 = 0;

75 
	}
}

78 
	$scuŒv_ªad_¥ocmem
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

79 
cou¡
, *
eof
, *
d©a
)

81 
i
, 
j
, 
‹dî
, 
q£t
, 
Àn
 = 0;

82 
limô
 = 
cou¡
 - 80;

83 
scuŒv_dev
 *
d
;

85 *
°¨t
 = 
buf
;

86 
i
 = 0; i < 
scuŒv_devs
; i++) {

87 
d
 = &
scuŒv_devi˚s
[
i
];

88 i‡(
	`down_öãºu±ibÀ
 (&
d
->
£m
))

89  -
ERESTARTSYS
;

90 
q£t
 = 
d
->qset;

91 
‹dî
 = 
d
->order;

92 
Àn
 +
	`•rötf
(
buf
+len,"\nDevice %i: qset %i, order %i, sz %li\n",

93 
i
, 
q£t
, 
‹dî
, ()(
d
->
size
));

94 ; 
d
; d = d->
√xt
) {

95 
Àn
 +
	`•rötf
(
buf
+Àn," iãmáà%p, q£à© %p\n",
d
,d->
d©a
);

96 
	`scuŒv_¥oc_off£t
 (
buf
, 
°¨t
, &
off£t
, &
Àn
);

97 i‡(
Àn
 > 
limô
)

98 
out
;

99 i‡(
d
->
d©a
 && !d->
√xt
)

100 
j
 = 0; j < 
q£t
; j++) {

101 i‡(
d
->
d©a
[
j
])

102 
Àn
 +
	`•rötf
(
buf
+Àn," % 4i:%8p\n",
j
,
d
->
d©a
[j]);

103 
	`scuŒv_¥oc_off£t
 (
buf
, 
°¨t
, &
off£t
, &
Àn
);

104 i‡(
Àn
 > 
limô
)

105 
out
;

108 
out
:

109 
	`up
 (&
scuŒv_devi˚s
[
i
].
£m
);

110 i‡(
Àn
 > 
limô
)

113 *
eof
 = 1;

114  
Àn
;

115 
	}
}

123 
	$scuŒv_›í
 (
öode
 *öode, 
fûe
 *
fûp
)

125 
scuŒv_dev
 *
dev
;

128 
dev
 = 
	`c⁄èöî_of
(
öode
->
i_cdev
, 
scuŒv_dev
, 
cdev
);

131 i‡–(
fûp
->
f_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

132 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

133  -
ERESTARTSYS
;

134 
	`scuŒv_åim
(
dev
);

135 
	`up
 (&
dev
->
£m
);

139 
fûp
->
¥iv©e_d©a
 = 
dev
;

142 
	}
}

144 
	$scuŒv_ªÀa£
 (
öode
 *öode, 
fûe
 *
fûp
)

147 
	}
}

152 
scuŒv_dev
 *
	$scuŒv_fﬁlow
(
scuŒv_dev
 *
dev
, 
n
)

154 
n
--) {

155 i‡(!
dev
->
√xt
) {

156 
dev
->
√xt
 = 
	`kmÆloc
((
scuŒv_dev
), 
GFP_KERNEL
);

157 
	`mem£t
(
dev
->
√xt
, 0, (
scuŒv_dev
));

159 
dev
 = dev->
√xt
;

162  
dev
;

163 
	}
}

169 
ssize_t
 
	$scuŒv_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

170 
loff_t
 *
f_pos
)

172 
scuŒv_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

173 
scuŒv_dev
 *
d±r
;

174 
qu™tum
 = 
PAGE_SIZE
 << 
dev
->
‹dî
;

175 
q£t
 = 
dev
->qset;

176 
ôemsize
 = 
qu™tum
 * 
q£t
;

177 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

178 
ssize_t
 
ªtvÆ
 = 0;

180 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

181  -
ERESTARTSYS
;

182 i‡(*
f_pos
 > 
dev
->
size
)

183 
nŸhög
;

184 i‡(*
f_pos
 + 
cou¡
 > 
dev
->
size
)

185 
cou¡
 = 
dev
->
size
 - *
f_pos
;

187 
ôem
 = ((Ë*
f_pos
Ë/ 
ôemsize
;

188 
ª°
 = ((Ë*
f_pos
Ë% 
ôemsize
;

189 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

192 
d±r
 = 
	`scuŒv_fﬁlow
(
dev
, 
ôem
);

194 i‡(!
d±r
->
d©a
)

195 
nŸhög
;

196 i‡(!
d±r
->
d©a
[
s_pos
])

197 
nŸhög
;

198 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

199 
cou¡
 = 
qu™tum
 - 
q_pos
;

201 i‡(
	`c›y_to_u£r
 (
buf
, 
d±r
->
d©a
[
s_pos
]+
q_pos
, 
cou¡
)) {

202 
ªtvÆ
 = -
EFAULT
;

203 
nŸhög
;

205 
	`up
 (&
dev
->
£m
);

207 *
f_pos
 +
cou¡
;

208  
cou¡
;

210 
nŸhög
:

211 
	`up
 (&
dev
->
£m
);

212  
ªtvÆ
;

213 
	}
}

217 
ssize_t
 
	$scuŒv_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

218 
loff_t
 *
f_pos
)

220 
scuŒv_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

221 
scuŒv_dev
 *
d±r
;

222 
qu™tum
 = 
PAGE_SIZE
 << 
dev
->
‹dî
;

223 
q£t
 = 
dev
->qset;

224 
ôemsize
 = 
qu™tum
 * 
q£t
;

225 
ôem
, 
s_pos
, 
q_pos
, 
ª°
;

226 
ssize_t
 
ªtvÆ
 = -
ENOMEM
;

228 i‡(
	`down_öãºu±ibÀ
 (&
dev
->
£m
))

229  -
ERESTARTSYS
;

232 
ôem
 = ((Ë*
f_pos
Ë/ 
ôemsize
;

233 
ª°
 = ((Ë*
f_pos
Ë% 
ôemsize
;

234 
s_pos
 = 
ª°
 / 
qu™tum
; 
q_pos
 =Ñest % quantum;

237 
d±r
 = 
	`scuŒv_fﬁlow
(
dev
, 
ôem
);

238 i‡(!
d±r
->
d©a
) {

239 
d±r
->
d©a
 = 
	`kmÆloc
(
q£t
 * (*), 
GFP_KERNEL
);

240 i‡(!
d±r
->
d©a
)

241 
nomem
;

242 
	`mem£t
(
d±r
->
d©a
, 0, 
q£t
 * (*));

245 i‡(!
d±r
->
d©a
[
s_pos
]) {

246 
d±r
->
d©a
[
s_pos
] = (*)
	`vmÆloc
(
PAGE_SIZE
 << d±r->
‹dî
);

247 i‡(!
d±r
->
d©a
[
s_pos
])

248 
nomem
;

249 
	`mem£t
(
d±r
->
d©a
[
s_pos
], 0, 
PAGE_SIZE
 << d±r->
‹dî
);

251 i‡(
cou¡
 > 
qu™tum
 - 
q_pos
)

252 
cou¡
 = 
qu™tum
 - 
q_pos
;

253 i‡(
	`c›y_‰om_u£r
 (
d±r
->
d©a
[
s_pos
]+
q_pos
, 
buf
, 
cou¡
)) {

254 
ªtvÆ
 = -
EFAULT
;

255 
nomem
;

257 *
f_pos
 +
cou¡
;

260 i‡(
dev
->
size
 < *
f_pos
)

261 
dev
->
size
 = *
f_pos
;

262 
	`up
 (&
dev
->
£m
);

263  
cou¡
;

265 
nomem
:

266 
	`up
 (&
dev
->
£m
);

267  
ªtvÆ
;

268 
	}
}

274 
	$scuŒv_io˘l
 (
öode
 *öode, 
fûe
 *
fûp
,

275 
cmd
, 
¨g
)

278 
îr
 = 0, 
ªt
 = 0, 
tmp
;

281 i‡(
	`_IOC_TYPE
(
cmd
Ë!
SCULLV_IOC_MAGIC
Ë -
ENOTTY
;

282 i‡(
	`_IOC_NR
(
cmd
Ë> 
SCULLV_IOC_MAXNR
Ë -
ENOTTY
;

290 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_READ
)

291 
îr
 = !
	`ac˚ss_ok
(
VERIFY_WRITE
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

292 i‡(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_WRITE
)

293 
îr
 = !
	`ac˚ss_ok
(
VERIFY_READ
, (
__u£r
 *)
¨g
, 
	`_IOC_SIZE
(
cmd
));

294 i‡(
îr
)

295  -
EFAULT
;

297 
cmd
) {

299 
SCULLV_IOCRESET
:

300 
scuŒv_q£t
 = 
SCULLV_QSET
;

301 
scuŒv_‹dî
 = 
SCULLV_ORDER
;

304 
SCULLV_IOCSORDER
:

305 
ªt
 = 
	`__gë_u£r
(
scuŒv_‹dî
, (
__u£r
 *Ë
¨g
);

308 
SCULLV_IOCTORDER
:

309 
scuŒv_‹dî
 = 
¨g
;

312 
SCULLV_IOCGORDER
:

313 
ªt
 = 
	`__put_u£r
 (
scuŒv_‹dî
, (
__u£r
 *Ë
¨g
);

316 
SCULLV_IOCQORDER
:

317  
scuŒv_‹dî
;

319 
SCULLV_IOCXORDER
:

320 
tmp
 = 
scuŒv_‹dî
;

321 
ªt
 = 
	`__gë_u£r
(
scuŒv_‹dî
, (
__u£r
 *Ë
¨g
);

322 i‡(
ªt
 == 0)

323 
ªt
 = 
	`__put_u£r
(
tmp
, (
__u£r
 *Ë
¨g
);

326 
SCULLV_IOCHORDER
:

327 
tmp
 = 
scuŒv_‹dî
;

328 
scuŒv_‹dî
 = 
¨g
;

329  
tmp
;

331 
SCULLV_IOCSQSET
:

332 
ªt
 = 
	`__gë_u£r
(
scuŒv_q£t
, (
__u£r
 *Ë
¨g
);

335 
SCULLV_IOCTQSET
:

336 
scuŒv_q£t
 = 
¨g
;

339 
SCULLV_IOCGQSET
:

340 
ªt
 = 
	`__put_u£r
(
scuŒv_q£t
, (
__u£r
 *)
¨g
);

343 
SCULLV_IOCQQSET
:

344  
scuŒv_q£t
;

346 
SCULLV_IOCXQSET
:

347 
tmp
 = 
scuŒv_q£t
;

348 
ªt
 = 
	`__gë_u£r
(
scuŒv_q£t
, (
__u£r
 *)
¨g
);

349 i‡(
ªt
 == 0)

350 
ªt
 = 
	`__put_u£r
(
tmp
, (
__u£r
 *)
¨g
);

353 
SCULLV_IOCHQSET
:

354 
tmp
 = 
scuŒv_q£t
;

355 
scuŒv_q£t
 = 
¨g
;

356  
tmp
;

359  -
ENOTTY
;

362  
ªt
;

363 
	}
}

369 
loff_t
 
	$scuŒv_Œ£ek
 (
fûe
 *
fûp
, 
loff_t
 
off
, 
whí˚
)

371 
scuŒv_dev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

372 
√wpos
;

374 
whí˚
) {

376 
√wpos
 = 
off
;

380 
√wpos
 = 
fûp
->
f_pos
 + 
off
;

384 
√wpos
 = 
dev
->
size
 + 
off
;

388  -
EINVAL
;

390 i‡(
√wpos
<0Ë -
EINVAL
;

391 
fûp
->
f_pos
 = 
√wpos
;

392  
√wpos
;

393 
	}
}

400 
	sasync_w‹k
 {

401 
kiocb
 *
	miocb
;

402 
	mªsu…
;

403 
w‹k_°ru˘
 
	mw‹k
;

409 
	$scuŒv_do_de„ºed_›
(*
p
)

411 
async_w‹k
 *
°uff
 = (async_w‹k *Ë
p
;

412 
	`aio_com∂ëe
(
°uff
->
iocb
, stuff->
ªsu…
, 0);

413 
	`k‰ì
(
°uff
);

414 
	}
}

417 
	$scuŒv_de„r_›
(
wrôe
, 
kiocb
 *
iocb
, 
__u£r
 *
buf
,

418 
size_t
 
cou¡
, 
loff_t
 
pos
)

420 
async_w‹k
 *
°uff
;

421 
ªsu…
;

424 i‡(
wrôe
)

425 
ªsu…
 = 
	`scuŒv_wrôe
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

427 
ªsu…
 = 
	`scuŒv_ªad
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

430 i‡(
	`is_sync_kiocb
(
iocb
))

431  
ªsu…
;

434 
°uff
 = 
	`kmÆloc
 ( (*°uff), 
GFP_KERNEL
);

435 i‡(
°uff
 =
NULL
)

436  
ªsu…
;

437 
°uff
->
iocb
 = iocb;

438 
°uff
->
ªsu…
 =Ñesult;

439 
	`INIT_WORK
(&
°uff
->
w‹k
, 
scuŒv_do_de„ºed_›
, stuff);

440 
	`scheduÀ_dñayed_w‹k
(&
°uff
->
w‹k
, 
HZ
/100);

441  -
EIOCBQUEUED
;

442 
	}
}

445 
ssize_t
 
	$scuŒv_aio_ªad
(
kiocb
 *
iocb
, 
__u£r
 *
buf
, 
size_t
 
cou¡
,

446 
loff_t
 
pos
)

448  
	`scuŒv_de„r_›
(0, 
iocb
, 
buf
, 
cou¡
, 
pos
);

449 
	}
}

451 
ssize_t
 
	$scuŒv_aio_wrôe
(
kiocb
 *
iocb
, c⁄° 
__u£r
 *
buf
,

452 
size_t
 
cou¡
, 
loff_t
 
pos
)

454  
	`scuŒv_de„r_›
(1, 
iocb
, (
__u£r
 *Ë
buf
, 
cou¡
, 
pos
);

455 
	}
}

462 
scuŒv_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
);

469 
fûe_›î©i⁄s
 
	gscuŒv_f›s
 = {

470 .
ow√r
 = 
THIS_MODULE
,

471 .
	gŒ£ek
 = 
scuŒv_Œ£ek
,

472 .
	gªad
 = 
scuŒv_ªad
,

473 .
	gwrôe
 = 
scuŒv_wrôe
,

474 .
	gio˘l
 = 
scuŒv_io˘l
,

475 .
	gmm≠
 = 
scuŒv_mm≠
,

476 .
	g›í
 = 
scuŒv_›í
,

477 .
	gªÀa£
 = 
scuŒv_ªÀa£
,

478 .
	gaio_ªad
 = 
scuŒv_aio_ªad
,

479 .
	gaio_wrôe
 = 
scuŒv_aio_wrôe
,

482 
	$scuŒv_åim
(
scuŒv_dev
 *
dev
)

484 
scuŒv_dev
 *
√xt
, *
d±r
;

485 
q£t
 = 
dev
->qset;

486 
i
;

488 i‡(
dev
->
vmas
)

489  -
EBUSY
;

491 
d±r
 = 
dev
; d±r; d±∏
√xt
) {

492 i‡(
d±r
->
d©a
) {

494 
i
 = 0; i < 
q£t
; i++)

495 i‡(
d±r
->
d©a
[
i
])

496 
	`v‰ì
(
d±r
->
d©a
[
i
]);

498 
	`k‰ì
(
d±r
->
d©a
);

499 
d±r
->
d©a
=
NULL
;

501 
√xt
=
d±r
->next;

502 i‡(
d±r
 !
dev
Ë
	`k‰ì
(dptr);

504 
dev
->
size
 = 0;

505 
dev
->
q£t
 = 
scuŒv_q£t
;

506 
dev
->
‹dî
 = 
scuŒv_‹dî
;

507 
dev
->
√xt
 = 
NULL
;

509 
	}
}

512 
	$scuŒv_£tup_cdev
(
scuŒv_dev
 *
dev
, 
ödex
)

514 
îr
, 
devno
 = 
	`MKDEV
(
scuŒv_maj‹
, 
ödex
);

516 
	`cdev_öô
(&
dev
->
cdev
, &
scuŒv_f›s
);

517 
dev
->
cdev
.
ow√r
 = 
THIS_MODULE
;

518 
dev
->
cdev
.
›s
 = &
scuŒv_f›s
;

519 
îr
 = 
	`cdev_add
 (&
dev
->
cdev
, 
devno
, 1);

521 i‡(
îr
)

522 
	`¥ötk
(
KERN_NOTICE
 "Eº‹ %dáddög scuŒ%d", 
îr
, 
ödex
);

523 
	}
}

531 
	$scuŒv_öô
()

533 
ªsu…
, 
i
;

534 
dev_t
 
dev
 = 
	`MKDEV
(
scuŒv_maj‹
, 0);

539 i‡(
scuŒv_maj‹
)

540 
ªsu…
 = 
	`ªgi°î_chrdev_ªgi⁄
(
dev
, 
scuŒv_devs
, "scullv");

542 
ªsu…
 = 
	`Æloc_chrdev_ªgi⁄
(&
dev
, 0, 
scuŒv_devs
, "scullv");

543 
scuŒv_maj‹
 = 
	`MAJOR
(
dev
);

545 i‡(
ªsu…
 < 0)

546  
ªsu…
;

553 
scuŒv_devi˚s
 = 
	`kmÆloc
(
scuŒv_devs
* (
scuŒv_dev
), 
GFP_KERNEL
);

554 i‡(!
scuŒv_devi˚s
) {

555 
ªsu…
 = -
ENOMEM
;

556 
Áû_mÆloc
;

558 
	`mem£t
(
scuŒv_devi˚s
, 0, 
scuŒv_devs
* (
scuŒv_dev
));

559 
i
 = 0; i < 
scuŒv_devs
; i++) {

560 
scuŒv_devi˚s
[
i
].
‹dî
 = 
scuŒv_‹dî
;

561 
scuŒv_devi˚s
[
i
].
q£t
 = 
scuŒv_q£t
;

562 
	`£ma_öô
 (&
scuŒv_devi˚s
[
i
].
£m
, 1);

563 
	`scuŒv_£tup_cdev
(
scuŒv_devi˚s
 + 
i
, i);

567 #ifde‡
SCULLV_USE_PROC


568 
	`¸óã_¥oc_ªad_íåy
("scuŒvmem", 0, 
NULL
, 
scuŒv_ªad_¥ocmem
, NULL);

572 
Áû_mÆloc
:

573 
	`uƒegi°î_chrdev_ªgi⁄
(
dev
, 
scuŒv_devs
);

574  
ªsu…
;

575 
	}
}

579 
	$scuŒv_˛ónup
()

581 
i
;

583 #ifde‡
SCULLV_USE_PROC


584 
	`ªmove_¥oc_íåy
("scuŒvmem", 
NULL
);

587 
i
 = 0; i < 
scuŒv_devs
; i++) {

588 
	`cdev_dñ
(&
scuŒv_devi˚s
[
i
].
cdev
);

589 
	`scuŒv_åim
(
scuŒv_devi˚s
 + 
i
);

591 
	`k‰ì
(
scuŒv_devi˚s
);

592 
	`uƒegi°î_chrdev_ªgi⁄
(
	`MKDEV
 (
scuŒv_maj‹
, 0), 
scuŒv_devs
);

593 
	}
}

596 
moduÀ_öô
(
scuŒv_öô
);

597 
moduÀ_exô
(
scuŒv_˛ónup
);

	@scullv/mmap.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

21 
	~<löux/mm.h
>

22 
	~<löux/î∫o.h
>

23 
	~<asm/pgèbÀ.h
>

25 
	~"scuŒv.h
"

33 
	$scuŒv_vma_›í
(
vm_¨ó_°ru˘
 *
vma
)

35 
scuŒv_dev
 *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

37 
dev
->
vmas
++;

38 
	}
}

40 
	$scuŒv_vma_˛o£
(
vm_¨ó_°ru˘
 *
vma
)

42 
scuŒv_dev
 *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

44 
dev
->
vmas
--;

45 
	}
}

60 
∑ge
 *
	$scuŒv_vma_n›age
(
vm_¨ó_°ru˘
 *
vma
,

61 
addªss
, *
ty≥
)

63 
off£t
;

64 
scuŒv_dev
 *
±r
, *
dev
 = 
vma
->
vm_¥iv©e_d©a
;

65 
∑ge
 *∑gê
NOPAGE_SIGBUS
;

66 *
∑gïå
 = 
NULL
;

68 
	`down
(&
dev
->
£m
);

69 
off£t
 = (
addªss
 - 
vma
->
vm_°¨t
Ë+ (vma->
vm_pgoff
 << 
PAGE_SHIFT
);

70 i‡(
off£t
 >
dev
->
size
Ë
out
;

77 
off£t
 >>
PAGE_SHIFT
;

78 
±r
 = 
dev
;Öå && 
off£t
 >dev->
q£t
;) {

79 
±r
 =Öå->
√xt
;

80 
off£t
 -
dev
->
q£t
;

82 i‡(
±r
 &&Öå->
d©a
Ë
∑gïå
 =Öå->d©a[
off£t
];

83 i‡(!
∑gïå
Ë
out
;

90 
∑ge
 = 
	`vmÆloc_to_∑ge
(
∑gïå
);

93 
	`gë_∑ge
(
∑ge
);

94 i‡(
ty≥
)

95 *
ty≥
 = 
VM_FAULT_MINOR
;

96 
out
:

97 
	`up
(&
dev
->
£m
);

98  
∑ge
;

99 
	}
}

103 
vm_›î©i⁄s_°ru˘
 
	gscuŒv_vm_›s
 = {

104 .
›í
 = 
scuŒv_vma_›í
,

105 .
	g˛o£
 = 
scuŒv_vma_˛o£
,

106 .
	gn›age
 = 
scuŒv_vma_n›age
,

110 
	$scuŒv_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

114 
vma
->
vm_›s
 = &
scuŒv_vm_›s
;

115 
vma
->
vm_Êags
 |
VM_RESERVED
;

116 
vma
->
vm_¥iv©e_d©a
 = 
fûp
->
¥iv©e_d©a
;

117 
	`scuŒv_vma_›í
(
vma
);

119 
	}
}

	@scullv/scullv.h

16 
	~<löux/io˘l.h
>

17 
	~<löux/cdev.h
>

23 #unde‡
PDEBUG


24 #ifde‡
SCULLV_DEBUG


25 #ifde‡
__KERNEL__


27 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`¥ötk
–
KERN_DEBUG
 "scuŒv: " fmt, ##árgs)

	)

30 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt, ##árgs)

	)

33 
	#PDEBUG
(
fmt
, 
¨gs
...Ë

	)

36 #unde‡
PDEBUGG


37 
	#PDEBUGG
(
fmt
, 
¨gs
...Ë

	)

39 
	#SCULLV_MAJOR
 0

	)

41 
	#SCULLV_DEVS
 4

	)

52 
	#SCULLV_ORDER
 4

	)

53 
	#SCULLV_QSET
 500

	)

55 
	sscuŒv_dev
 {

56 **
	md©a
;

57 
scuŒv_dev
 *
	m√xt
;

58 
	mvmas
;

59 
	m‹dî
;

60 
	mq£t
;

61 
size_t
 
	msize
;

62 
£m≠h‹e
 
	m£m
;

63 
cdev
 
	mcdev
;

66 
scuŒv_dev
 *
scuŒv_devi˚s
;

68 
fûe_›î©i⁄s
 
scuŒv_f›s
;

73 
scuŒv_maj‹
;

74 
scuŒv_devs
;

75 
scuŒv_‹dî
;

76 
scuŒv_q£t
;

81 
scuŒv_åim
(
scuŒv_dev
 *
dev
);

82 
scuŒv_dev
 *
scuŒv_fﬁlow
(scuŒv_dev *
dev
, 
n
);

85 #ifde‡
SCULLV_DEBUG


86 
	#SCULLV_USE_PROC


	)

94 
	#SCULLV_IOC_MAGIC
 'K'

	)

96 
	#SCULLV_IOCRESET
 
	`_IO
(
SCULLV_IOC_MAGIC
, 0)

	)

106 
	#SCULLV_IOCSORDER
 
	`_IOW
(
SCULLV_IOC_MAGIC
, 1, )

	)

107 
	#SCULLV_IOCTORDER
 
	`_IO
(
SCULLV_IOC_MAGIC
, 2)

	)

108 
	#SCULLV_IOCGORDER
 
	`_IOR
(
SCULLV_IOC_MAGIC
, 3, )

	)

109 
	#SCULLV_IOCQORDER
 
	`_IO
(
SCULLV_IOC_MAGIC
, 4)

	)

110 
	#SCULLV_IOCXORDER
 
	`_IOWR
(
SCULLV_IOC_MAGIC
, 5, )

	)

111 
	#SCULLV_IOCHORDER
 
	`_IO
(
SCULLV_IOC_MAGIC
, 6)

	)

112 
	#SCULLV_IOCSQSET
 
	`_IOW
(
SCULLV_IOC_MAGIC
, 7, )

	)

113 
	#SCULLV_IOCTQSET
 
	`_IO
(
SCULLV_IOC_MAGIC
, 8)

	)

114 
	#SCULLV_IOCGQSET
 
	`_IOR
(
SCULLV_IOC_MAGIC
, 9, )

	)

115 
	#SCULLV_IOCQQSET
 
	`_IO
(
SCULLV_IOC_MAGIC
, 10)

	)

116 
	#SCULLV_IOCXQSET
 
	`_IOWR
(
SCULLV_IOC_MAGIC
,11, )

	)

117 
	#SCULLV_IOCHQSET
 
	`_IO
(
SCULLV_IOC_MAGIC
, 12)

	)

119 
	#SCULLV_IOC_MAXNR
 12

	)

	@short/short.c

24 
	~<löux/c⁄fig.h
>

25 
	~<löux/moduÀ.h
>

26 
	~<löux/moduÀ∑øm.h
>

27 
	~<löux/öô.h
>

29 
	~<löux/sched.h
>

30 
	~<löux/kî√l.h
>

31 
	~<löux/fs.h
>

32 
	~<löux/î∫o.h
>

33 
	~<löux/dñay.h
>

34 
	~<löux/kdev_t.h
>

35 
	~<löux/¶ab.h
>

36 
	~<löux/mm.h
>

37 
	~<löux/i›‹t.h
>

38 
	~<löux/öãºu±.h
>

39 
	~<löux/w‹kqueue.h
>

40 
	~<löux/pﬁl.h
>

41 
	~<löux/waô.h
>

43 
	~<asm/io.h
>

45 
	#SHORT_NR_PORTS
 8

	)

51 
	gmaj‹
 = 0;

52 
moduÀ_∑øm
(
maj‹
, , 0);

54 
	gu£_mem
 = 0;

55 
moduÀ_∑øm
(
u£_mem
, , 0);

59 
	gba£
 = 0x378;

60 
	gsh‹t_ba£
 = 0;

61 
moduÀ_∑øm
(
ba£
, , 0);

64 
	gúq
 = -1;

65 vﬁ©ûê
	gsh‹t_úq
 = -1;

66 
moduÀ_∑øm
(
úq
, , 0);

68 
	g¥obe
 = 0;

69 
moduÀ_∑øm
(
¥obe
, , 0);

71 
	gwq
 = 0;

72 
moduÀ_∑øm
(
wq
, , 0);

74 
	gèskÀt
 = 0;

75 
moduÀ_∑øm
(
èskÀt
, , 0);

77 
	gsh¨e
 = 0;

78 
moduÀ_∑øm
(
sh¨e
, , 0);

80 
MODULE_AUTHOR
 ("Alessandro Rubini");

81 
MODULE_LICENSE
("Dual BSD/GPL");

84 
	gsh‹t_buf„r
 = 0;

85 vﬁ©ûê
	gsh‹t_hód
;

86 vﬁ©ûê
	gsh‹t_èû
;

87 
DECLARE_WAIT_QUEUE_HEAD
(
sh‹t_queue
);

90 
sh‹t_do_èskÀt
();

91 
DECLARE_TASKLET
(
sh‹t_èskÀt
, 
sh‹t_do_èskÀt
, 0);

96 
ölöe
 
	$sh‹t_ö¸_bp
(vﬁ©ûê*
ödex
, 
dñè
)

98 
√w
 = *
ödex
 + 
dñè
;

99 
	`b¨rõr
();

100 *
ödex
 = (
√w
 >(
sh‹t_buf„r
 + 
PAGE_SIZE
)) ? short_buffer :Çew;

101 
	}
}

114 
	$sh‹t_›í
 (
öode
 *öode, 
fûe
 *
fûp
)

116 
fûe_›î©i⁄s
 
sh‹t_i_f›s
;

118 i‡(
	`imö‹
 (
öode
) & 0x80)

119 
fûp
->
f_›
 = &
sh‹t_i_f›s
;

121 
	}
}

124 
	$sh‹t_ªÀa£
 (
öode
 *öode, 
fûe
 *
fûp
)

127 
	}
}

132 
	esh‹t_modes
 {
	mSHORT_DEFAULT
=0, 
	mSHORT_PAUSE
, 
	mSHORT_STRING
, 
	mSHORT_MEMORY
};

134 
ssize_t
 
	$do_sh‹t_ªad
 (
öode
 *öode, 
fûe
 *
fûp
, 
__u£r
 *
buf
,

135 
size_t
 
cou¡
, 
loff_t
 *
f_pos
)

137 
ªtvÆ
 = 
cou¡
, 
mö‹
 = 
	`imö‹
 (
öode
);

138 
p‹t
 = 
sh‹t_ba£
 + (
mö‹
&0x0f);

139 *
addªss
 = (*Ë
sh‹t_ba£
 + (
mö‹
&0x0f);

140 
mode
 = (
mö‹
&0x70) >> 4;

141 *
kbuf
 = 
	`kmÆloc
(
cou¡
, 
GFP_KERNEL
), *
±r
;

143 i‡(!
kbuf
)

144  -
ENOMEM
;

145 
±r
 = 
kbuf
;

147 i‡(
u£_mem
)

148 
mode
 = 
SHORT_MEMORY
;

150 
mode
) {

151 
SHORT_STRING
:

152 
	`ösb
(
p‹t
, 
±r
, 
cou¡
);

153 
	`rmb
();

156 
SHORT_DEFAULT
:

157 
cou¡
--) {

158 *(
±r
++Ë
	`öb
(
p‹t
);

159 
	`rmb
();

163 
SHORT_MEMORY
:

164 
cou¡
--) {

165 *
±r
++ = 
	`i‹ód8
(
addªss
);

166 
	`rmb
();

169 
SHORT_PAUSE
:

170 
cou¡
--) {

171 *(
±r
++Ë
	`öb_p
(
p‹t
);

172 
	`rmb
();

177 
ªtvÆ
 = -
EINVAL
;

180 i‡((
ªtvÆ
 > 0Ë&& 
	`c›y_to_u£r
(
buf
, 
kbuf
,Ñetval))

181 
ªtvÆ
 = -
EFAULT
;

182 
	`k‰ì
(
kbuf
);

183  
ªtvÆ
;

184 
	}
}

190 
ssize_t
 
	$sh‹t_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
f_pos
)

192  
	`do_sh‹t_ªad
(
fûp
->
f_díåy
->
d_öode
, fûp, 
buf
, 
cou¡
, 
f_pos
);

193 
	}
}

197 
ssize_t
 
	$do_sh‹t_wrôe
 (
öode
 *öode, 
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
,

198 
size_t
 
cou¡
, 
loff_t
 *
f_pos
)

200 
ªtvÆ
 = 
cou¡
, 
mö‹
 = 
	`imö‹
(
öode
);

201 
p‹t
 = 
sh‹t_ba£
 + (
mö‹
&0x0f);

202 *
addªss
 = (*Ë
sh‹t_ba£
 + (
mö‹
&0x0f);

203 
mode
 = (
mö‹
&0x70) >> 4;

204 *
kbuf
 = 
	`kmÆloc
(
cou¡
, 
GFP_KERNEL
), *
±r
;

206 i‡(!
kbuf
)

207  -
ENOMEM
;

208 i‡(
	`c›y_‰om_u£r
(
kbuf
, 
buf
, 
cou¡
))

209  -
EFAULT
;

210 
±r
 = 
kbuf
;

212 i‡(
u£_mem
)

213 
mode
 = 
SHORT_MEMORY
;

215 
mode
) {

216 
SHORT_PAUSE
:

217 
cou¡
--) {

218 
	`outb_p
(*(
±r
++), 
p‹t
);

219 
	`wmb
();

223 
SHORT_STRING
:

224 
	`outsb
(
p‹t
, 
±r
, 
cou¡
);

225 
	`wmb
();

228 
SHORT_DEFAULT
:

229 
cou¡
--) {

230 
	`outb
(*(
±r
++), 
p‹t
);

231 
	`wmb
();

235 
SHORT_MEMORY
:

236 
cou¡
--) {

237 
	`iowrôe8
(*
±r
++, 
addªss
);

238 
	`wmb
();

243 
ªtvÆ
 = -
EINVAL
;

246 
	`k‰ì
(
kbuf
);

247  
ªtvÆ
;

248 
	}
}

251 
ssize_t
 
	$sh‹t_wrôe
(
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

252 
loff_t
 *
f_pos
)

254  
	`do_sh‹t_wrôe
(
fûp
->
f_díåy
->
d_öode
, fûp, 
buf
, 
cou¡
, 
f_pos
);

255 
	}
}

260 
	$sh‹t_pﬁl
(
fûe
 *
fûp
, 
pﬁl_èbÀ
 *
waô
)

262  
POLLIN
 | 
POLLRDNORM
 | 
POLLOUT
 | 
POLLWRNORM
;

263 
	}
}

270 
fûe_›î©i⁄s
 
	gsh‹t_f›s
 = {

271 .
ow√r
 = 
THIS_MODULE
,

272 .
	gªad
 = 
sh‹t_ªad
,

273 .
	gwrôe
 = 
sh‹t_wrôe
,

274 .
	gpﬁl
 = 
sh‹t_pﬁl
,

275 .
	g›í
 = 
sh‹t_›í
,

276 .
	gªÀa£
 = 
sh‹t_ªÀa£
,

281 
ssize_t
 
	$sh‹t_i_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
f_pos
)

283 
cou¡0
;

284 
	`DEFINE_WAIT
(
waô
);

286 
sh‹t_hód
 =
sh‹t_èû
) {

287 
	`¥ï¨e_to_waô
(&
sh‹t_queue
, &
waô
, 
TASK_INTERRUPTIBLE
);

288 i‡(
sh‹t_hód
 =
sh‹t_èû
)

289 
	`scheduÀ
();

290 
	`föish_waô
(&
sh‹t_queue
, &
waô
);

291 i‡(
	`sig«l_≥ndög
 (
cuºít
))

292  -
ERESTARTSYS
;

295 
cou¡0
 = 
sh‹t_hód
 - 
sh‹t_èû
;

296 i‡(
cou¡0
 < 0)

297 
cou¡0
 = 
sh‹t_buf„r
 + 
PAGE_SIZE
 - 
sh‹t_èû
;

298 i‡(
cou¡0
 < 
cou¡
) count = count0;

300 i‡(
	`c›y_to_u£r
(
buf
, (*)
sh‹t_èû
, 
cou¡
))

301  -
EFAULT
;

302 
	`sh‹t_ö¸_bp
 (&
sh‹t_èû
, 
cou¡
);

303  
cou¡
;

304 
	}
}

306 
ssize_t
 
	$sh‹t_i_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

307 
loff_t
 *
f_pos
)

309 
wrôãn
 = 0, 
odd
 = *
f_pos
 & 1;

310 
p‹t
 = 
sh‹t_ba£
;

311 *
addªss
 = (*Ë
sh‹t_ba£
;

313 i‡(
u£_mem
) {

314 
wrôãn
 < 
cou¡
)

315 
	`iowrôe8
(0xf‡* ((++
wrôãn
 + 
odd
Ë& 1), 
addªss
);

317 
wrôãn
 < 
cou¡
)

318 
	`outb
(0xf‡* ((++
wrôãn
 + 
odd
Ë& 1), 
p‹t
);

321 *
f_pos
 +
cou¡
;

322  
wrôãn
;

323 
	}
}

328 
fûe_›î©i⁄s
 
	gsh‹t_i_f›s
 = {

329 .
ow√r
 = 
THIS_MODULE
,

330 .
	gªad
 = 
sh‹t_i_ªad
,

331 .
	gwrôe
 = 
sh‹t_i_wrôe
,

332 .
	g›í
 = 
sh‹t_›í
,

333 .
	gªÀa£
 = 
sh‹t_ªÀa£
,

336 
úqªtu∫_t
 
	$sh‹t_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

338 
timevÆ
 
tv
;

339 
wrôãn
;

341 
	`do_gëtimeofday
(&
tv
);

344 
wrôãn
 = 
	`•rötf
((*)
sh‹t_hód
,"%08u.%06u\n",

345 ()(
tv
.
tv_£c
 % 100000000), ()—v.
tv_u£c
));

346 
	`BUG_ON
(
wrôãn
 != 16);

347 
	`sh‹t_ö¸_bp
(&
sh‹t_hód
, 
wrôãn
);

348 
	`wake_up_öãºu±ibÀ
(&
sh‹t_queue
);

349  
IRQ_HANDLED
;

350 
	}
}

357 
	#NR_TIMEVAL
 512

	)

359 
timevÆ
 
	gtv_d©a
[
NR_TIMEVAL
];

360 vﬁ©ûê
timevÆ
 *
	gtv_hód
=
tv_d©a
;

361 vﬁ©ûê
timevÆ
 *
	gtv_èû
=
tv_d©a
;

363 
w‹k_°ru˘
 
	gsh‹t_wq
;

366 
	gsh‹t_wq_cou¡
 = 0;

372 
ölöe
 
	$sh‹t_ö¸_tv
(vﬁ©ûê
timevÆ
 **
tvp
)

374 i‡(*
tvp
 =(
tv_d©a
 + 
NR_TIMEVAL
 - 1))

375 *
tvp
 = 
tv_d©a
;

377 (*
tvp
)++;

378 
	}
}

382 
	$sh‹t_do_èskÀt
 (
unu£d
)

384 
ßvecou¡
 = 
sh‹t_wq_cou¡
, 
wrôãn
;

385 
sh‹t_wq_cou¡
 = 0;

393 
wrôãn
 = 
	`•rötf
((*)
sh‹t_hód
,"bhá·î %6i\n",
ßvecou¡
);

394 
	`sh‹t_ö¸_bp
(&
sh‹t_hód
, 
wrôãn
);

402 
wrôãn
 = 
	`•rötf
((*)
sh‹t_hód
,"%08u.%06u\n",

403 ()(
tv_èû
->
tv_£c
 % 100000000),

404 ()(
tv_èû
->
tv_u£c
));

405 
	`sh‹t_ö¸_bp
(&
sh‹t_hód
, 
wrôãn
);

406 
	`sh‹t_ö¸_tv
(&
tv_èû
);

407 } 
tv_èû
 !
tv_hód
);

409 
	`wake_up_öãºu±ibÀ
(&
sh‹t_queue
);

410 
	}
}

413 
úqªtu∫_t
 
	$sh‹t_wq_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

416 
	`do_gëtimeofday
((
timevÆ
 *Ë
tv_hód
);

417 
	`sh‹t_ö¸_tv
(&
tv_hód
);

420 
	`scheduÀ_w‹k
(&
sh‹t_wq
);

422 
sh‹t_wq_cou¡
++;

423  
IRQ_HANDLED
;

424 
	}
}

431 
úqªtu∫_t
 
	$sh‹t_é_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

433 
	`do_gëtimeofday
((
timevÆ
 *Ë
tv_hód
);

434 
	`sh‹t_ö¸_tv
(&
tv_hód
);

435 
	`èskÀt_scheduÀ
(&
sh‹t_èskÀt
);

436 
sh‹t_wq_cou¡
++;

437  
IRQ_HANDLED
;

438 
	}
}

443 
úqªtu∫_t
 
	$sh‹t_sh_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

445 
vÆue
, 
wrôãn
;

446 
timevÆ
 
tv
;

449 
vÆue
 = 
	`öb
(
sh‹t_ba£
);

450 i‡(!(
vÆue
 & 0x80))

451  
IRQ_NONE
;

454 
	`outb
(
vÆue
 & 0x7F, 
sh‹t_ba£
);

458 
	`do_gëtimeofday
(&
tv
);

459 
wrôãn
 = 
	`•rötf
((*)
sh‹t_hód
,"%08u.%06u\n",

460 ()(
tv
.
tv_£c
 % 100000000), ()—v.
tv_u£c
));

461 
	`sh‹t_ö¸_bp
(&
sh‹t_hód
, 
wrôãn
);

462 
	`wake_up_öãºu±ibÀ
(&
sh‹t_queue
);

463  
IRQ_HANDLED
;

464 
	}
}

466 
	$sh‹t_kî√Õrobe
()

468 
cou¡
 = 0;

470 
mask
;

472 
mask
 = 
	`¥obe_úq_⁄
();

473 
	`outb_p
(0x10,
sh‹t_ba£
+2);

474 
	`outb_p
(0x00,
sh‹t_ba£
);

475 
	`outb_p
(0xFF,
sh‹t_ba£
);

476 
	`outb_p
(0x00,
sh‹t_ba£
+2);

477 
	`udñay
(5);

478 
sh‹t_úq
 = 
	`¥obe_úq_off
(
mask
);

480 i‡(
sh‹t_úq
 == 0) {

481 
	`¥ötk
(
KERN_INFO
 "short:Ço irqÑeported byÖrobe\n");

482 
sh‹t_úq
 = -1;

489 } 
sh‹t_úq
 < 0 && 
cou¡
++ < 5);

490 i‡(
sh‹t_úq
 < 0)

491 
	`¥ötk
("sh‹t:ÖrobêÁûed %òtimes, givög up\n", 
cou¡
);

492 
	}
}

494 
úqªtu∫_t
 
	$sh‹t_¥obög
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

496 i‡(
sh‹t_úq
 =0Ësh‹t_úq = 
úq
;

497 i‡(
sh‹t_úq
 !
úq
) short_irq = -irq;

498  
IRQ_HANDLED
;

499 
	}
}

501 
	$sh‹t_£lÂrobe
()

503 
åüls
[] = {3, 5, 7, 9, 0};

504 
åõd
[] = {0, 0, 0, 0, 0};

505 
i
, 
cou¡
 = 0;

512 
i
 = 0; 
åüls
[i]; i++)

513 
åõd
[
i
] = 
	`ªque°_úq
(
åüls
[i], 
sh‹t_¥obög
,

514 
SA_INTERRUPT
, "sh‹à¥obe", 
NULL
);

517 
sh‹t_úq
 = 0;

518 
	`outb_p
(0x10,
sh‹t_ba£
+2);

519 
	`outb_p
(0x00,
sh‹t_ba£
);

520 
	`outb_p
(0xFF,
sh‹t_ba£
);

521 
	`outb_p
(0x00,
sh‹t_ba£
+2);

522 
	`udñay
(5);

525 i‡(
sh‹t_úq
 == 0) {

526 
	`¥ötk
(
KERN_INFO
 "short:Ço irqÑeported byÖrobe\n");

533 } 
sh‹t_úq
 <=0 && 
cou¡
++ < 5);

536 
i
 = 0; 
åüls
[i]; i++)

537 i‡(
åõd
[
i
] == 0)

538 
	`‰ì_úq
(
åüls
[
i
], 
NULL
);

540 i‡(
sh‹t_úq
 < 0)

541 
	`¥ötk
("sh‹t:ÖrobêÁûed %òtimes, givög up\n", 
cou¡
);

542 
	}
}

548 
	$sh‹t_öô
()

550 
ªsu…
;

557 
sh‹t_ba£
 = 
ba£
;

558 
sh‹t_úq
 = 
úq
;

561 i‡(!
u£_mem
) {

562 i‡(! 
	`ªque°_ªgi⁄
(
sh‹t_ba£
, 
SHORT_NR_PORTS
, "short")) {

563 
	`¥ötk
(
KERN_INFO
 "short: can't get I/OÖortáddress 0x%lx\n",

564 
sh‹t_ba£
);

565  -
ENODEV
;

569 i‡(! 
	`ªque°_mem_ªgi⁄
(
sh‹t_ba£
, 
SHORT_NR_PORTS
, "short")) {

570 
	`¥ötk
(
KERN_INFO
 "short: can't get I/O memáddress 0x%lx\n",

571 
sh‹t_ba£
);

572  -
ENODEV
;

576 
sh‹t_ba£
 = (Ë
	`i‹em≠
(sh‹t_ba£, 
SHORT_NR_PORTS
);

580 
ªsu…
 = 
	`ªgi°î_chrdev
(
maj‹
, "sh‹t", &
sh‹t_f›s
);

581 i‡(
ªsu…
 < 0) {

582 
	`¥ötk
(
KERN_INFO
 "short: can't get majorÇumber\n");

583 
	`ªÀa£_ªgi⁄
(
sh‹t_ba£
,
SHORT_NR_PORTS
);

584  
ªsu…
;

586 i‡(
maj‹
 =0Ëmaj‹ = 
ªsu…
;

588 
sh‹t_buf„r
 = 
	`__gë_‰ì_∑ges
(
GFP_KERNEL
,0);

589 
sh‹t_hód
 = 
sh‹t_èû
 = 
sh‹t_buf„r
;

597 
	`INIT_WORK
(&
sh‹t_wq
, ((*)(*)Ë
sh‹t_do_èskÀt
, 
NULL
);

604 i‡(
sh‹t_úq
 < 0 && 
¥obe
 == 1)

605 
	`sh‹t_kî√Õrobe
();

607 i‡(
sh‹t_úq
 < 0 && 
¥obe
 == 2)

608 
	`sh‹t_£lÂrobe
();

610 i‡(
sh‹t_úq
 < 0)

611 
sh‹t_ba£
) {

612 0x378: 
sh‹t_úq
 = 7; ;

613 0x278: 
sh‹t_úq
 = 2; ;

614 0x3bc: 
sh‹t_úq
 = 5; ;

622 i‡(
sh‹t_úq
 >0 && 
sh¨e
 > 0) {

623 
ªsu…
 = 
	`ªque°_úq
(
sh‹t_úq
, 
sh‹t_sh_öãºu±
,

624 
SA_SHIRQ
 | 
SA_INTERRUPT
,"short",

625 
sh‹t_sh_öãºu±
);

626 i‡(
ªsu…
) {

627 
	`¥ötk
(
KERN_INFO
 "sh‹t: c™'àgëássig√d irq %i\n", 
sh‹t_úq
);

628 
sh‹t_úq
 = -1;

631 
	`outb
(0x10, 
sh‹t_ba£
+2);

636 i‡(
sh‹t_úq
 >= 0) {

637 
ªsu…
 = 
	`ªque°_úq
(
sh‹t_úq
, 
sh‹t_öãºu±
,

638 
SA_INTERRUPT
, "sh‹t", 
NULL
);

639 i‡(
ªsu…
) {

640 
	`¥ötk
(
KERN_INFO
 "short: can't getássigned irq %i\n",

641 
sh‹t_úq
);

642 
sh‹t_úq
 = -1;

645 
	`outb
(0x10,
sh‹t_ba£
+2);

653 i‡(
sh‹t_úq
 >0 && (
wq
 + 
èskÀt
) > 0) {

654 
	`‰ì_úq
(
sh‹t_úq
,
NULL
);

655 
ªsu…
 = 
	`ªque°_úq
(
sh‹t_úq
,

656 
èskÀt
 ? 
sh‹t_é_öãºu±
 :

657 
sh‹t_wq_öãºu±
,

658 
SA_INTERRUPT
,"sh‹t-bh", 
NULL
);

659 i‡(
ªsu…
) {

660 
	`¥ötk
(
KERN_INFO
 "short-bh: can't getássigned irq %i\n",

661 
sh‹t_úq
);

662 
sh‹t_úq
 = -1;

667 
	}
}

669 
	$sh‹t_˛ónup
()

671 i‡(
sh‹t_úq
 >= 0) {

672 
	`outb
(0x0, 
sh‹t_ba£
 + 2);

673 i‡(!
sh¨e
Ë
	`‰ì_úq
(
sh‹t_úq
, 
NULL
);

674 
	`‰ì_úq
(
sh‹t_úq
, 
sh‹t_sh_öãºu±
);

677 i‡(
èskÀt
)

678 
	`èskÀt_dißbÀ
(&
sh‹t_èskÀt
);

680 
	`Êush_scheduÀd_w‹k
();

681 
	`uƒegi°î_chrdev
(
maj‹
, "short");

682 i‡(
u£_mem
) {

683 
	`iounm≠
((
__iomem
 *)
sh‹t_ba£
);

684 
	`ªÀa£_mem_ªgi⁄
(
sh‹t_ba£
, 
SHORT_NR_PORTS
);

686 
	`ªÀa£_ªgi⁄
(
sh‹t_ba£
,
SHORT_NR_PORTS
);

688 i‡(
sh‹t_buf„r
Ë
	`‰ì_∑ge
(short_buffer);

689 
	}
}

691 
moduÀ_öô
(
sh‹t_öô
);

692 
moduÀ_exô
(
sh‹t_˛ónup
);

	@shortprint/shortprint.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/moduÀ∑øm.h
>

22 
	~<löux/sched.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/fs.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/dñay.h
>

27 
	~<löux/¶ab.h
>

28 
	~<löux/i›‹t.h
>

29 
	~<löux/öãºu±.h
>

30 
	~<löux/w‹kqueue.h
>

31 
	~<löux/timî.h
>

32 
	~<löux/pﬁl.h
>

34 
	~<asm/io.h
>

35 
	~<asm/£m≠h‹e.h
>

36 
	~<asm/©omic.h
>

38 
	~"sh‹çröt.h
"

40 
	#SHORTP_NR_PORTS
 3

	)

46 
	gmaj‹
 = 0;

47 
moduÀ_∑øm
(
maj‹
, , 0);

51 
	gba£
 = 0x378;

52 
	gsh‹ç_ba£
 = 0;

53 
moduÀ_∑øm
(
ba£
, , 0);

56 
	gúq
 = -1;

57 
	gsh‹ç_úq
 = -1;

58 
moduÀ_∑øm
(
úq
, , 0);

61 
	gdñay
 = 0;

62 
	gsh‹ç_dñay
;

63 
moduÀ_∑øm
(
dñay
, , 0);

65 
MODULE_AUTHOR
 ("Jonathan Corbet");

66 
MODULE_LICENSE
("Dual BSD/GPL");

71 
sh‹ç_˛ónup
();

72 
sh‹ç_timeout
(
unu£d
);

79 
	gsh‹ç_ö_buf„r
 = 0;

80 vﬁ©ûê
	gsh‹ç_ö_hód
;

81 vﬁ©ûê
	gsh‹ç_ö_èû
;

82 
DECLARE_WAIT_QUEUE_HEAD
(
sh‹ç_ö_queue
);

83 
timevÆ
 
	gsh‹ç_tv
;

88 
ölöe
 
	$sh‹ç_ö¸_bp
(vﬁ©ûê*
ödex
, 
dñè
)

90 
√w
 = *
ödex
 + 
dñè
;

91 
	`b¨rõr
 ();

92 *
ödex
 = (
√w
 >(
sh‹ç_ö_buf„r
 + 
PAGE_SIZE
)) ? shortp_in_buffer :Çew;

93 
	}
}

102 *
	gsh‹ç_out_buf„r
 = 
NULL
;

103 vﬁ©ûê*
	gsh‹ç_out_hód
, *
	gsh‹ç_out_èû
;

104 
£m≠h‹e
 
	gsh‹ç_out_£m
;

105 
DECLARE_WAIT_QUEUE_HEAD
(
sh‹ç_out_queue
);

111 
sh‹ç_do_w‹k
(*);

112 
DECLARE_WORK
(
sh‹ç_w‹k
, 
sh‹ç_do_w‹k
, 
NULL
);

113 
w‹kqueue_°ru˘
 *
	gsh‹ç_w‹kqueue
;

119 
ölöe
 
	$sh‹ç_out_•a˚
()

121 i‡(
sh‹ç_out_hód
 >
sh‹ç_out_èû
) {

122 
•a˚
 = 
PAGE_SIZE
 - (
sh‹ç_out_hód
 - 
sh‹ç_out_buf„r
);

123  (
sh‹ç_out_èû
 =
sh‹ç_out_buf„r
Ë? 
•a˚
 - 1 : space;

125  (
sh‹ç_out_èû
 - 
sh‹ç_out_hód
) - 1;

126 
	}
}

128 
ölöe
 
	$sh‹ç_ö¸_out_bp
(vﬁ©ûê**
bp
, 
ö¸
)

130 *
√w
 = (*Ë*
bp
 + 
ö¸
;

131 i‡(
√w
 >(
sh‹ç_out_buf„r
 + 
PAGE_SIZE
))

132 
√w
 -
PAGE_SIZE
;

133 *
bp
 = 
√w
;

134 
	}
}

141 
•ölock_t
 
	gsh‹ç_out_lock
;

142 vﬁ©ûê
	gsh‹ç_ouçut_a˘ive
;

143 
DECLARE_WAIT_QUEUE_HEAD
(
sh‹ç_em±y_queue
);

149 
timî_li°
 
	gsh‹ç_timî
;

150 
	#TIMEOUT
 5*
HZ


	)

156 
	$sh‹ç_›í
(
öode
 *öode, 
fûe
 *
fûp
)

159 
	}
}

162 
	$sh‹ç_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

165 
	`waô_evít_öãºu±ibÀ
(
sh‹ç_em±y_queue
, 
sh‹ç_ouçut_a˘ive
==0);

168 
	}
}

172 
	$sh‹ç_pﬁl
(
fûe
 *
fûp
, 
pﬁl_èbÀ
 *
waô
)

174  
POLLIN
 | 
POLLRDNORM
 | 
POLLOUT
 | 
POLLWRNORM
;

175 
	}
}

183 
ssize_t
 
	$sh‹ç_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
f_pos
)

185 
cou¡0
;

186 
	`DEFINE_WAIT
(
waô
);

188 
sh‹ç_ö_hód
 =
sh‹ç_ö_èû
) {

189 
	`¥ï¨e_to_waô
(&
sh‹ç_ö_queue
, &
waô
, 
TASK_INTERRUPTIBLE
);

190 i‡(
sh‹ç_ö_hód
 =
sh‹ç_ö_èû
)

191 
	`scheduÀ
();

192 
	`föish_waô
(&
sh‹ç_ö_queue
, &
waô
);

193 i‡(
	`sig«l_≥ndög
 (
cuºít
))

194  -
ERESTARTSYS
;

198 
cou¡0
 = 
sh‹ç_ö_hód
 - 
sh‹ç_ö_èû
;

199 i‡(
cou¡0
 < 0)

200 
cou¡0
 = 
sh‹ç_ö_buf„r
 + 
PAGE_SIZE
 - 
sh‹ç_ö_èû
;

201 i‡(
cou¡0
 < 
cou¡
)

202 
cou¡
 = 
cou¡0
;

204 i‡(
	`c›y_to_u£r
(
buf
, (*)
sh‹ç_ö_èû
, 
cou¡
))

205  -
EFAULT
;

206 
	`sh‹ç_ö¸_bp
(&
sh‹ç_ö_èû
, 
cou¡
);

207  
cou¡
;

208 
	}
}

214 
	$sh‹ç_waô
()

216 i‡((
	`öb
(
sh‹ç_ba£
 + 
SP_STATUS
Ë& 
SP_SR_BUSY
) == 0) {

217 
	`¥ötk
(
KERN_INFO
 "shortprint: waiting forÖrinter busy\n");

218 
	`¥ötk
(
KERN_INFO
 "Sètu†i†0x%x\n", 
	`öb
(
sh‹ç_ba£
 + 
SP_STATUS
));

219 (
	`öb
(
sh‹ç_ba£
 + 
SP_STATUS
Ë& 
SP_SR_BUSY
) == 0) {

220 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

221 
	`scheduÀ_timeout
(10*
HZ
);

224 
	}
}

231 
	$sh‹ç_do_wrôe
()

233 
¸
 = 
	`öb
(
sh‹ç_ba£
 + 
SP_CONTROL
);

236 
	`mod_timî
(&
sh‹ç_timî
, 
jiffõs
 + 
TIMEOUT
);

239 
	`outb_p
(*
sh‹ç_out_èû
, 
sh‹ç_ba£
+
SP_DATA
);

240 
	`sh‹ç_ö¸_out_bp
(&
sh‹ç_out_èû
, 1);

241 i‡(
sh‹ç_dñay
)

242 
	`udñay
(
sh‹ç_dñay
);

243 
	`outb_p
(
¸
 | 
SP_CR_STROBE
, 
sh‹ç_ba£
+
SP_CONTROL
);

244 i‡(
sh‹ç_dñay
)

245 
	`udñay
(
sh‹ç_dñay
);

246 
	`outb_p
(
¸
 & ~
SP_CR_STROBE
, 
sh‹ç_ba£
+
SP_CONTROL
);

247 
	}
}

253 
	$sh‹ç_°¨t_ouçut
()

255 i‡(
sh‹ç_ouçut_a˘ive
)

259 
sh‹ç_ouçut_a˘ive
 = 1;

260 
sh‹ç_timî
.
expúes
 = 
jiffõs
 + 
TIMEOUT
;

261 
	`add_timî
(&
sh‹ç_timî
);

264 
	`queue_w‹k
(
sh‹ç_w‹kqueue
, &
sh‹ç_w‹k
);

265 
	}
}

271 
ssize_t
 
	$sh‹ç_wrôe
(
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

272 
loff_t
 *
f_pos
)

274 
•a˚
, 
wrôãn
 = 0;

275 
Êags
;

281 i‡(
	`down_öãºu±ibÀ
(&
sh‹ç_out_£m
))

282  -
ERESTARTSYS
;

286 
wrôãn
 < 
cou¡
) {

288 
•a˚
 = 
	`sh‹ç_out_•a˚
();

289 i‡(
•a˚
 <= 0) {

290 i‡(
	`waô_evít_öãºu±ibÀ
(
sh‹ç_out_queue
,

291 (
•a˚
 = 
	`sh‹ç_out_•a˚
()) > 0))

292 
out
;

296 i‡((
•a˚
 + 
wrôãn
Ë> 
cou¡
)

297 
•a˚
 = 
cou¡
 - 
wrôãn
;

298 i‡(
	`c›y_‰om_u£r
((*Ë
sh‹ç_out_hód
, 
buf
, 
•a˚
)) {

299 
	`up
(&
sh‹ç_out_£m
);

300  -
EFAULT
;

302 
	`sh‹ç_ö¸_out_bp
(&
sh‹ç_out_hód
, 
•a˚
);

303 
buf
 +
•a˚
;

304 
wrôãn
 +
•a˚
;

307 
	`•ö_lock_úqßve
(&
sh‹ç_out_lock
, 
Êags
);

308 i‡(! 
sh‹ç_ouçut_a˘ive
)

309 
	`sh‹ç_°¨t_ouçut
();

310 
	`•ö_u∆ock_úqª°‹e
(&
sh‹ç_out_lock
, 
Êags
);

313 
out
:

314 *
f_pos
 +
wrôãn
;

315 
	`up
(&
sh‹ç_out_£m
);

316  
wrôãn
;

317 
	}
}

325 
	$sh‹ç_do_w‹k
(*
unu£d
)

327 
wrôãn
;

328 
Êags
;

331 
	`sh‹ç_waô
();

333 
	`•ö_lock_úqßve
(&
sh‹ç_out_lock
, 
Êags
);

336 i‡(
sh‹ç_out_hód
 =
sh‹ç_out_èû
) {

337 
sh‹ç_ouçut_a˘ive
 = 0;

338 
	`wake_up_öãºu±ibÀ
(&
sh‹ç_em±y_queue
);

339 
	`dñ_timî
(&
sh‹ç_timî
);

343 
	`sh‹ç_do_wrôe
();

346 i‡(((
PAGE_SIZE
 + 
sh‹ç_out_èû
 - 
sh‹ç_out_hód
Ë% PAGE_SIZEË> 
SP_MIN_SPACE
) {

347 
	`wake_up_öãºu±ibÀ
(&
sh‹ç_out_queue
);

349 
	`•ö_u∆ock_úqª°‹e
(&
sh‹ç_out_lock
, 
Êags
);

352 
wrôãn
 = 
	`•rötf
((*)
sh‹ç_ö_hód
, "%08u.%06u\n",

353 ()(
sh‹ç_tv
.
tv_£c
 % 100000000),

354 ()(
sh‹ç_tv
.
tv_u£c
));

355 
	`sh‹ç_ö¸_bp
(&
sh‹ç_ö_hód
, 
wrôãn
);

356 
	`wake_up_öãºu±ibÀ
(&
sh‹ç_ö_queue
);

357 
	}
}

363 
úqªtu∫_t
 
	$sh‹ç_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

365 i‡(! 
sh‹ç_ouçut_a˘ive
)

366  
IRQ_NONE
;

369 
	`do_gëtimeofday
(&
sh‹ç_tv
);

370 
	`queue_w‹k
(
sh‹ç_w‹kqueue
, &
sh‹ç_w‹k
);

371  
IRQ_HANDLED
;

372 
	}
}

379 
	$sh‹ç_timeout
(
unu£d
)

381 
Êags
;

382 
°©us
;

384 i‡(! 
sh‹ç_ouçut_a˘ive
)

386 
	`•ö_lock_úqßve
(&
sh‹ç_out_lock
, 
Êags
);

387 
°©us
 = 
	`öb
(
sh‹ç_ba£
 + 
SP_STATUS
);

390 i‡((
°©us
 & 
SP_SR_BUSY
Ë=0 || (°©u†& 
SP_SR_ACK
)) {

391 
sh‹ç_timî
.
expúes
 = 
jiffõs
 + 
TIMEOUT
;

392 
	`add_timî
(&
sh‹ç_timî
);

393 
	`•ö_u∆ock_úqª°‹e
(&
sh‹ç_out_lock
, 
Êags
);

398 
	`•ö_u∆ock_úqª°‹e
(&
sh‹ç_out_lock
, 
Êags
);

399 
	`sh‹ç_öãºu±
(
sh‹ç_úq
, 
NULL
, NULL);

400 
	}
}

406 
fûe_›î©i⁄s
 
	gsh‹ç_f›s
 = {

407 .
ªad
 = 
sh‹ç_ªad
,

408 .
	gwrôe
 = 
sh‹ç_wrôe
,

409 .
	g›í
 = 
sh‹ç_›í
,

410 .
	gªÀa£
 = 
sh‹ç_ªÀa£
,

411 .
	gpﬁl
 = 
sh‹ç_pﬁl
,

412 .
	gow√r
 = 
THIS_MODULE


422 
	$sh‹ç_öô
()

424 
ªsu…
;

431 
sh‹ç_ba£
 = 
ba£
;

432 
sh‹ç_úq
 = 
úq
;

433 
sh‹ç_dñay
 = 
dñay
;

436 i‡(! 
	`ªque°_ªgi⁄
(
sh‹ç_ba£
, 
SHORTP_NR_PORTS
, "shortprint")) {

437 
	`¥ötk
(
KERN_INFO
 "shortprint: can't get I/OÖortáddress 0x%lx\n",

438 
sh‹ç_ba£
);

439  -
ENODEV
;

443 
ªsu…
 = 
	`ªgi°î_chrdev
(
maj‹
, "sh‹çröt", &
sh‹ç_f›s
);

444 i‡(
ªsu…
 < 0) {

445 
	`¥ötk
(
KERN_INFO
 "shortp: can't get majorÇumber\n");

446 
	`ªÀa£_ªgi⁄
(
sh‹ç_ba£
, 
SHORTP_NR_PORTS
);

447  
ªsu…
;

449 i‡(
maj‹
 == 0)

450 
maj‹
 = 
ªsu…
;

453 
sh‹ç_ö_buf„r
 = 
	`__gë_‰ì_∑ges
(
GFP_KERNEL
, 0);

454 
sh‹ç_ö_hód
 = 
sh‹ç_ö_èû
 = 
sh‹ç_ö_buf„r
;

457 
sh‹ç_out_buf„r
 = (*Ë
	`__gë_‰ì_∑ges
(
GFP_KERNEL
, 0);

458 
sh‹ç_out_hód
 = 
sh‹ç_out_èû
 = 
sh‹ç_out_buf„r
;

459 
	`£ma_öô
(&
sh‹ç_out_£m
, 1);

462 
sh‹ç_ouçut_a˘ive
 = 0;

463 
	`•ö_lock_öô
(&
sh‹ç_out_lock
);

464 
	`öô_timî
(&
sh‹ç_timî
);

465 
sh‹ç_timî
.
fun˘i⁄
 = 
sh‹ç_timeout
;

466 
sh‹ç_timî
.
d©a
 = 0;

469 
sh‹ç_w‹kqueue
 = 
	`¸óã_sögÀthªad_w‹kqueue
("shortprint");

472 i‡(
sh‹ç_úq
 < 0)

473 
sh‹ç_ba£
) {

474 0x378: 
sh‹ç_úq
 = 7; ;

475 0x278: 
sh‹ç_úq
 = 2; ;

476 0x3bc: 
sh‹ç_úq
 = 5; ;

480 
ªsu…
 = 
	`ªque°_úq
(
sh‹ç_úq
, 
sh‹ç_öãºu±
, 0, "sh‹çröt", 
NULL
);

481 i‡(
ªsu…
) {

482 
	`¥ötk
(
KERN_INFO
 "shortprint: can't getássigned irq %i\n",

483 
sh‹ç_úq
);

484 
sh‹ç_úq
 = -1;

485 
	`sh‹ç_˛ónup
 ();

486  
ªsu…
;

490 
	`outb
(
SP_CR_IRQ
 | 
SP_CR_SELECT
 | 
SP_CR_INIT
, 
sh‹ç_ba£
 + 
SP_CONTROL
);

493 
	}
}

495 
	$sh‹ç_˛ónup
()

498 i‡(
sh‹ç_úq
 >= 0) {

499 
	`outb
(0x0, 
sh‹ç_ba£
 + 
SP_CONTROL
);

500 
	`‰ì_úq
(
sh‹ç_úq
, 
NULL
);

504 
	`uƒegi°î_chrdev
(
maj‹
, "shortprint");

505 
	`ªÀa£_ªgi⁄
(
sh‹ç_ba£
,
SHORTP_NR_PORTS
);

509 i‡(
sh‹ç_ouçut_a˘ive
)

510 
	`dñ_timî_sync
 (&
sh‹ç_timî
);

511 
	`Êush_w‹kqueue
(
sh‹ç_w‹kqueue
);

512 
	`de°roy_w‹kqueue
(
sh‹ç_w‹kqueue
);

514 i‡(
sh‹ç_ö_buf„r
)

515 
	`‰ì_∑ge
(
sh‹ç_ö_buf„r
);

516 i‡(
sh‹ç_out_buf„r
)

517 
	`‰ì_∑ge
((Ë
sh‹ç_out_buf„r
);

518 
	}
}

520 
moduÀ_öô
(
sh‹ç_öô
);

521 
moduÀ_exô
(
sh‹ç_˛ónup
);

	@shortprint/shortprint.h

20 
	#SP_DATA
 0x00

	)

21 
	#SP_STATUS
 0x01

	)

22 
	#SP_CONTROL
 0x02

	)

23 
	#SP_NPORTS
 3

	)

28 
	#SP_SR_BUSY
 0x80

	)

29 
	#SP_SR_ACK
 0x40

	)

30 
	#SP_SR_PAPER
 0x20

	)

31 
	#SP_SR_ONLINE
 0x10

	)

32 
	#SP_SR_ERR
 0x08

	)

37 
	#SP_CR_IRQ
 0x10

	)

38 
	#SP_CR_SELECT
 0x08

	)

39 
	#SP_CR_INIT
 0x04

	)

40 
	#SP_CR_AUTOLF
 0x02

	)

41 
	#SP_CR_STROBE
 0x01

	)

46 
	#SP_MIN_SPACE
 
PAGE_SIZE
/2

	)

	@simple/simple.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/moduÀ∑øm.h
>

21 
	~<löux/öô.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/¶ab.h
>

25 
	~<löux/fs.h
>

26 
	~<löux/î∫o.h
>

27 
	~<löux/ty≥s.h
>

28 
	~<löux/mm.h
>

29 
	~<löux/kdev_t.h
>

30 
	~<asm/∑ge.h
>

31 
	~<löux/cdev.h
>

33 
	~<löux/devi˚.h
>

35 
	gsim∂e_maj‹
 = 0;

36 
moduÀ_∑øm
(
sim∂e_maj‹
, , 0);

37 
MODULE_AUTHOR
("Jonathan Corbet");

38 
MODULE_LICENSE
("Dual BSD/GPL");

43 
	$sim∂e_›í
 (
öode
 *öode, 
fûe
 *
fûp
)

46 
	}
}

52 
	$sim∂e_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

55 
	}
}

63 
	$sim∂e_vma_›í
(
vm_¨ó_°ru˘
 *
vma
)

65 
	`¥ötk
(
KERN_NOTICE
 "Simple VMA open, virt %lx,Öhys %lx\n",

66 
vma
->
vm_°¨t
, vma->
vm_pgoff
 << 
PAGE_SHIFT
);

67 
	}
}

69 
	$sim∂e_vma_˛o£
(
vm_¨ó_°ru˘
 *
vma
)

71 
	`¥ötk
(
KERN_NOTICE
 "Simple VMA close.\n");

72 
	}
}

80 
vm_›î©i⁄s_°ru˘
 
	gsim∂e_ªm≠_vm_›s
 = {

81 .
›í
 = 
sim∂e_vma_›í
,

82 .
	g˛o£
 = 
sim∂e_vma_˛o£
,

85 
	$sim∂e_ªm≠_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

87 i‡(
	`ªm≠_p‚_ønge
(
vma
, vma->
vm_°¨t
, vma->
vm_pgoff
,

88 
vma
->
vm_íd
 - vma->
vm_°¨t
,

89 
vma
->
vm_∑ge_¥Ÿ
))

90  -
EAGAIN
;

92 
vma
->
vm_›s
 = &
sim∂e_ªm≠_vm_›s
;

93 
	`sim∂e_vma_›í
(
vma
);

95 
	}
}

102 
∑ge
 *
	$sim∂e_vma_n›age
(
vm_¨ó_°ru˘
 *
vma
,

103 
addªss
, *
ty≥
)

105 
∑ge
 *
∑gïå
;

106 
off£t
 = 
vma
->
vm_pgoff
 << 
PAGE_SHIFT
;

107 
phyßddr
 = 
addªss
 - 
vma
->
vm_°¨t
 + 
off£t
;

108 
∑ge‰ame
 = 
phyßddr
 >> 
PAGE_SHIFT
;

111 
	`¥ötk
 (
KERN_NOTICE
 "---- N›age, of‡%lxÖhy†%lx\n", 
off£t
, 
phyßddr
);

112 
	`¥ötk
 (
KERN_NOTICE
 "VA i†%p\n", 
	`__va
 (
phyßddr
));

113 
	`¥ötk
 (
KERN_NOTICE
 "Pagê© %p\n", 
	`vút_to_∑ge
 (
	`__va
 (
phyßddr
)));

114 i‡(!
	`p‚_vÆid
(
∑ge‰ame
))

115  
NOPAGE_SIGBUS
;

116 
∑gïå
 = 
	`p‚_to_∑ge
(
∑ge‰ame
);

117 
	`¥ötk
 (
KERN_NOTICE
 "∑ge->ödex = %ld m≠pög %p\n", 
∑gïå
->
ödex
,Öagïå->
m≠pög
);

118 
	`¥ötk
 (
KERN_NOTICE
 "Pagê‰amê%ld\n", 
∑ge‰ame
);

119 
	`gë_∑ge
(
∑gïå
);

120 i‡(
ty≥
)

121 *
ty≥
 = 
VM_FAULT_MINOR
;

122  
∑gïå
;

123 
	}
}

125 
vm_›î©i⁄s_°ru˘
 
	gsim∂e_n›age_vm_›s
 = {

126 .
›í
 = 
sim∂e_vma_›í
,

127 .
	g˛o£
 = 
sim∂e_vma_˛o£
,

128 .
	gn›age
 = 
sim∂e_vma_n›age
,

131 
	$sim∂e_n›age_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

133 
off£t
 = 
vma
->
vm_pgoff
 << 
PAGE_SHIFT
;

135 i‡(
off£t
 >
	`__∑
(
high_mem‹y
Ë|| (
fûp
->
f_Êags
 & 
O_SYNC
))

136 
vma
->
vm_Êags
 |
VM_IO
;

137 
vma
->
vm_Êags
 |
VM_RESERVED
;

139 
vma
->
vm_›s
 = &
sim∂e_n›age_vm_›s
;

140 
	`sim∂e_vma_›í
(
vma
);

142 
	}
}

148 
	$sim∂e_£tup_cdev
(
cdev
 *
dev
, 
mö‹
,

149 
fûe_›î©i⁄s
 *
f›s
)

151 
îr
, 
devno
 = 
	`MKDEV
(
sim∂e_maj‹
, 
mö‹
);

153 
	`cdev_öô
(
dev
, 
f›s
);

154 
dev
->
ow√r
 = 
THIS_MODULE
;

155 
dev
->
›s
 = 
f›s
;

156 
îr
 = 
	`cdev_add
 (
dev
, 
devno
, 1);

158 i‡(
îr
)

159 
	`¥ötk
 (
KERN_NOTICE
 "Eº‹ %dáddög sim∂e%d", 
îr
, 
mö‹
);

160 
	}
}

167 
fûe_›î©i⁄s
 
	gsim∂e_ªm≠_›s
 = {

168 .
ow√r
 = 
THIS_MODULE
,

169 .
	g›í
 = 
sim∂e_›í
,

170 .
	gªÀa£
 = 
sim∂e_ªÀa£
,

171 .
	gmm≠
 = 
sim∂e_ªm≠_mm≠
,

175 
fûe_›î©i⁄s
 
	gsim∂e_n›age_›s
 = {

176 .
ow√r
 = 
THIS_MODULE
,

177 .
	g›í
 = 
sim∂e_›í
,

178 .
	gªÀa£
 = 
sim∂e_ªÀa£
,

179 .
	gmm≠
 = 
sim∂e_n›age_mm≠
,

182 
	#MAX_SIMPLE_DEV
 2

	)

185 
fûe_›î©i⁄s
 *
	gsim∂e_f›s
[
MAX_SIMPLE_DEV
] = {

186 &
sim∂e_ªm≠_›s
,

187 &
sim∂e_n›age_›s
,

195 
cdev
 
	gSim∂eDevs
[
MAX_SIMPLE_DEV
];

200 
	$sim∂e_öô
()

202 
ªsu…
;

203 
dev_t
 
dev
 = 
	`MKDEV
(
sim∂e_maj‹
, 0);

206 i‡(
sim∂e_maj‹
)

207 
ªsu…
 = 
	`ªgi°î_chrdev_ªgi⁄
(
dev
, 2, "simple");

209 
ªsu…
 = 
	`Æloc_chrdev_ªgi⁄
(&
dev
, 0, 2, "simple");

210 
sim∂e_maj‹
 = 
	`MAJOR
(
dev
);

212 i‡(
ªsu…
 < 0) {

213 
	`¥ötk
(
KERN_WARNING
 "sim∂e: u«bÀÅÿgë maj‹ %d\n", 
sim∂e_maj‹
);

214  
ªsu…
;

216 i‡(
sim∂e_maj‹
 == 0)

217 
sim∂e_maj‹
 = 
ªsu…
;

220 
	`sim∂e_£tup_cdev
(
Sim∂eDevs
, 0, &
sim∂e_ªm≠_›s
);

221 
	`sim∂e_£tup_cdev
(
Sim∂eDevs
 + 1, 1, &
sim∂e_n›age_›s
);

223 
	}
}

226 
	$sim∂e_˛ónup
()

228 
	`cdev_dñ
(
Sim∂eDevs
);

229 
	`cdev_dñ
(
Sim∂eDevs
 + 1);

230 
	`uƒegi°î_chrdev_ªgi⁄
(
	`MKDEV
(
sim∂e_maj‹
, 0), 2);

231 
	}
}

234 
moduÀ_öô
(
sim∂e_öô
);

235 
moduÀ_exô
(
sim∂e_˛ónup
);

	@skull/skull_clean.c

1 
	~<löux/c⁄fig.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/vîsi⁄.h
>

5 
	~<löux/i›‹t.h
>

7 
	$skuŒ_ªÀa£
(
p‹t
, 
ønge
)

9 
	`ªÀa£_ªgi⁄
(
p‹t
,
ønge
);

10 
	}
}

12 
	$skuŒ_˛ónup
()

16 
	}
}

18 
moduÀ_exô
(
skuŒ_˛ónup
);

	@skull/skull_init.c

23 
	~<löux/c⁄fig.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/öô.h
>

26 
	~<löux/moduÀ∑øm.h
>

28 
	~<löux/kî√l.h
>

29 
	~<löux/i›‹t.h
>

30 
	~<löux/î∫o.h
>

31 
	~<asm/sy°em.h
>

32 
	~<löux/mm.h
>

33 
	~<asm/io.h
>

36 
	#ISA_REGION_BEGIN
 0xA0000

	)

37 
	#ISA_REGION_END
 0x100000

	)

38 
	#STEP
 2048

	)

41 
	$skuŒ_‚1
(){
	}
}

42 
	$skuŒ_‚2
(){
	}
}

43 
	gskuŒ_v¨übÀ
;

45 
EXPORT_SYMBOL
 (
skuŒ_‚1
);

46 
EXPORT_SYMBOL
 (
skuŒ_‚2
);

47 
EXPORT_SYMBOL
 (
skuŒ_v¨übÀ
);

51 
	$skuŒ_¥obe_hw
(
p‹t
, 
ønge
)

55 
	}
}

58 
	$skuŒ_öô_bﬂrd
(
p‹t
)

62 
	}
}

65 
	$skuŒ_dëe˘
(
p‹t
, 
ønge
)

67 
îr
;

69 i‡((
îr
 = 
	`check_ªgi⁄
(
p‹t
,
ønge
)) < 0) Érr;

70 i‡(
	`skuŒ_¥obe_hw
(
p‹t
,
ønge
Ë!0Ë -
ENODEV
;

71 
	`ªque°_ªgi⁄
(
p‹t
,
ønge
,"skull");

73 
	}
}

79 
	#SKULL_PORT_FLOOR
 0x280

	)

80 
	#SKULL_PORT_CEIL
 0x300

	)

81 
	#SKULL_PORT_RANGE
 0x010

	)

88 
	gskuŒ_p‹t_ba£
=0;

89 
moduÀ_∑øm
(
skuŒ_p‹t_ba£
, , 0);

91 
	$skuŒ_föd_hw
()

94 
ba£
 = 
skuŒ_p‹t_ba£
 ? skull_port_base

95 : 
SKULL_PORT_FLOOR
;

96 
ªsu…
 = 0;

100 i‡(
	`skuŒ_dëe˘
(
ba£
, 
SKULL_PORT_RANGE
) == 0) {

101 
	`skuŒ_öô_bﬂrd
(
ba£
);

102 
ªsu…
++;

104 
ba£
 +
SKULL_PORT_RANGE
;

106 
skuŒ_p‹t_ba£
 =0 && 
ba£
 < 
SKULL_PORT_CEIL
);

108  
ªsu…
;

109 
	}
}

112 
	$skuŒ_öô
()

120 
ﬁdvÆ
, 
√wvÆ
;

121 
Êags
;

122 
add
, 
i
;

123 *
ba£
;

126 
ba£
 = 
	`i‹em≠
(
ISA_REGION_BEGIN
, 
ISA_REGION_END
 - ISA_REGION_BEGIN);

127 
ba£
 -
ISA_REGION_BEGIN
;

130 
add
 = 
ISA_REGION_BEGIN
;ádd < 
ISA_REGION_END
;ádd +
STEP
) {

134 i‡(
	`check_mem_ªgi⁄
 (
add
, 2048)) {

135 
	`¥ötk
(
KERN_INFO
 "%lx: AŒoˇãd\n", 
add
);

141 
	`ßve_Êags
(
Êags
);

142 
	`˛i
();

143 
ﬁdvÆ
 = 
	`ªadb
 (
ba£
 + 
add
);

144 
	`wrôeb
 (
ﬁdvÆ
^0xff, 
ba£
 + 
add
);

145 
	`mb
();

146 
√wvÆ
 = 
	`ªadb
 (
ba£
 + 
add
);

147 
	`wrôeb
 (
ﬁdvÆ
, 
ba£
 + 
add
);

148 
	`ª°‹e_Êags
(
Êags
);

150 i‡((
ﬁdvÆ
^
√wvÆ
) == 0xff) {

151 
	`¥ötk
(
KERN_INFO
 "%lx: RAM\n", 
add
);

154 i‡((
ﬁdvÆ
^
√wvÆ
) != 0) {

155 
	`¥ötk
(
KERN_INFO
 "%lx:Ém±y\n", 
add
);

164 i‡–(
ﬁdvÆ
 =0x55Ë&& (
	`ªadb
 (
ba£
 + 
add
 + 1) == 0xaa)) {

165 
size
 = 512 * 
	`ªadb
 (
ba£
 + 
add
 + 2);

166 
	`¥ötk
(
KERN_INFO
 "%lx: Expansion ROM, %i bytes\n",

167 
add
, 
size
);

168 
add
 +(
size
 & ~2048) - 2048;

179 
	`¥ötk
(
KERN_INFO
 "%lx: ", 
add
);

180 
i
=0; i<5; i++) {

181 
ødd
 = 
add
 + 57*(
i
+1);

182 
vÆ
 = 
	`ªadb
 (
ba£
 + 
ødd
);

183 i‡(
vÆ
 && vÆ !0xFF && vÆ !((Ë
ødd
&0xFF))

186 
	`¥ötk
("%s\n", 
i
==5 ? "empty" : "ROM");

192 
	`skuŒ_föd_hw
();

198 
	}
}

200 
moduÀ_öô
(
skuŒ_öô
);

	@snull/snull.c

18 
	~<löux/c⁄fig.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/moduÀ∑øm.h
>

23 
	~<löux/sched.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/¶ab.h
>

26 
	~<löux/î∫o.h
>

27 
	~<löux/ty≥s.h
>

28 
	~<löux/öãºu±.h
>

30 
	~<löux/ö.h
>

31 
	~<löux/√tdevi˚.h
>

32 
	~<löux/ëhîdevi˚.h
>

33 
	~<löux/ù.h
>

34 
	~<löux/t˝.h
>

35 
	~<löux/skbuff.h
>

37 
	~"¢uŒ.h
"

39 
	~<löux/ö6.h
>

40 
	~<asm/checksum.h
>

42 
MODULE_AUTHOR
("Alessandro Rubini, Jonathan Corbet");

43 
MODULE_LICENSE
("Dual BSD/GPL");

49 
	glockup
 = 0;

50 
moduÀ_∑øm
(
lockup
, , 0);

52 
	gtimeout
 = 
SNULL_TIMEOUT
;

53 
moduÀ_∑øm
(
timeout
, , 0);

58 
	gu£_«pi
 = 0;

59 
moduÀ_∑øm
(
u£_«pi
, , 0);

65 
	s¢uŒ_∑ckë
 {

66 
¢uŒ_∑ckë
 *
	m√xt
;

67 
√t_devi˚
 *
	mdev
;

68 
	md©Æí
;

69 
u8
 
	md©a
[
ETH_DATA_LEN
];

72 
	gpoﬁ_size
 = 8;

73 
moduÀ_∑øm
(
poﬁ_size
, , 0);

80 
	s¢uŒ_¥iv
 {

81 
√t_devi˚_°©s
 
	m°©s
;

82 
	m°©us
;

83 
¢uŒ_∑ckë
 *
	mµoﬁ
;

84 
¢uŒ_∑ckë
 *
	mrx_queue
;

85 
	mrx_öt_íabÀd
;

86 
	mtx_∑ckëÀn
;

87 
u8
 *
	mtx_∑ckëd©a
;

88 
sk_buff
 *
	mskb
;

89 
•ölock_t
 
	mlock
;

92 
¢uŒ_tx_timeout
(
√t_devi˚
 *
dev
);

93 (*
¢uŒ_öãºu±
)(, *, 
±_ªgs
 *);

98 
	$¢uŒ_£tup_poﬁ
(
√t_devi˚
 *
dev
)

100 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

101 
i
;

102 
¢uŒ_∑ckë
 *
pkt
;

104 
¥iv
->
µoﬁ
 = 
NULL
;

105 
i
 = 0; i < 
poﬁ_size
; i++) {

106 
pkt
 = 
	`kmÆloc
 ( (
¢uŒ_∑ckë
), 
GFP_KERNEL
);

107 i‡(
pkt
 =
NULL
) {

108 
	`¥ötk
 (
KERN_NOTICE
 "Ran out of memoryállocatingÖacketÖool\n");

111 
pkt
->
dev
 = dev;

112 
pkt
->
√xt
 = 
¥iv
->
µoﬁ
;

113 
¥iv
->
µoﬁ
 = 
pkt
;

115 
	}
}

117 
	$¢uŒ_ã¨down_poﬁ
(
√t_devi˚
 *
dev
)

119 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

120 
¢uŒ_∑ckë
 *
pkt
;

122 (
pkt
 = 
¥iv
->
µoﬁ
)) {

123 
¥iv
->
µoﬁ
 = 
pkt
->
√xt
;

124 
	`k‰ì
 (
pkt
);

127 
	}
}

132 
¢uŒ_∑ckë
 *
	$¢uŒ_gë_tx_buf„r
(
√t_devi˚
 *
dev
)

134 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

135 
Êags
;

136 
¢uŒ_∑ckë
 *
pkt
;

138 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

139 
pkt
 = 
¥iv
->
µoﬁ
;

140 
¥iv
->
µoﬁ
 = 
pkt
->
√xt
;

141 i‡(
¥iv
->
µoﬁ
 =
NULL
) {

142 
	`¥ötk
 (
KERN_INFO
 "PoolÉmpty\n");

143 
	`√tif_°›_queue
(
dev
);

145 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

146  
pkt
;

147 
	}
}

150 
	$¢uŒ_ªÀa£_buf„r
(
¢uŒ_∑ckë
 *
pkt
)

152 
Êags
;

153 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
pkt
->
dev
);

155 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

156 
pkt
->
√xt
 = 
¥iv
->
µoﬁ
;

157 
¥iv
->
µoﬁ
 = 
pkt
;

158 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

159 i‡(
	`√tif_queue_°›≥d
(
pkt
->
dev
Ë&&Ökt->
√xt
 =
NULL
)

160 
	`√tif_wake_queue
(
pkt
->
dev
);

161 
	}
}

163 
	$¢uŒ_íqueue_buf
(
√t_devi˚
 *
dev
, 
¢uŒ_∑ckë
 *
pkt
)

165 
Êags
;

166 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

168 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

169 
pkt
->
√xt
 = 
¥iv
->
rx_queue
;

170 
¥iv
->
rx_queue
 = 
pkt
;

171 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

172 
	}
}

174 
¢uŒ_∑ckë
 *
	$¢uŒ_dequeue_buf
(
√t_devi˚
 *
dev
)

176 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

177 
¢uŒ_∑ckë
 *
pkt
;

178 
Êags
;

180 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

181 
pkt
 = 
¥iv
->
rx_queue
;

182 i‡(
pkt
 !
NULL
)

183 
¥iv
->
rx_queue
 = 
pkt
->
√xt
;

184 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

185  
pkt
;

186 
	}
}

191 
	$¢uŒ_rx_öts
(
√t_devi˚
 *
dev
, 
íabÀ
)

193 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

194 
¥iv
->
rx_öt_íabÀd
 = 
íabÀ
;

195 
	}
}

202 
	$¢uŒ_›í
(
√t_devi˚
 *
dev
)

211 
	`mem˝y
(
dev
->
dev_addr
, "\0SNUL0", 
ETH_ALEN
);

212 i‡(
dev
 =
¢uŒ_devs
[1])

213 
dev
->
dev_addr
[
ETH_ALEN
-1]++;

214 
	`√tif_°¨t_queue
(
dev
);

216 
	}
}

218 
	$¢uŒ_ªÀa£
(
√t_devi˚
 *
dev
)

222 
	`√tif_°›_queue
(
dev
);

224 
	}
}

229 
	$¢uŒ_c⁄fig
(
√t_devi˚
 *
dev
, 
ifm≠
 *
m≠
)

231 i‡(
dev
->
Êags
 & 
IFF_UP
)

232  -
EBUSY
;

235 i‡(
m≠
->
ba£_addr
 !
dev
->base_addr) {

236 
	`¥ötk
(
KERN_WARNING
 "snull: Can't change I/Oáddress\n");

237  -
EOPNOTSUPP
;

241 i‡(
m≠
->
úq
 !
dev
->irq) {

242 
dev
->
úq
 = 
m≠
->irq;

248 
	}
}

253 
	$¢uŒ_rx
(
√t_devi˚
 *
dev
, 
¢uŒ_∑ckë
 *
pkt
)

255 
sk_buff
 *
skb
;

256 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

262 
skb
 = 
	`dev_Æloc_skb
(
pkt
->
d©Æí
 + 2);

263 i‡(!
skb
) {

264 i‡(
	`¥ötk_øãlimô
())

265 
	`¥ötk
(
KERN_NOTICE
 "snullÑx:Üow on mem -Öacket dropped\n");

266 
¥iv
->
°©s
.
rx_dr›≥d
++;

267 
out
;

269 
	`skb_ª£rve
(
skb
, 2);

270 
	`mem˝y
(
	`skb_put
(
skb
, 
pkt
->
d©Æí
),Ökt->
d©a
,Ökt->datalen);

273 
skb
->
dev
 = dev;

274 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

275 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

276 
¥iv
->
°©s
.
rx_∑ckës
++;

277 
¥iv
->
°©s
.
rx_byãs
 +
pkt
->
d©Æí
;

278 
	`√tif_rx
(
skb
);

279 
out
:

281 
	}
}

287 
	$¢uŒ_pﬁl
(
√t_devi˚
 *
dev
, *
budgë
)

289 
≈ackës
 = 0, 
quŸa
 = 
	`mö
(
dev
->quŸa, *
budgë
);

290 
sk_buff
 *
skb
;

291 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

292 
¢uŒ_∑ckë
 *
pkt
;

294 
≈ackës
 < 
quŸa
 && 
¥iv
->
rx_queue
) {

295 
pkt
 = 
	`¢uŒ_dequeue_buf
(
dev
);

296 
skb
 = 
	`dev_Æloc_skb
(
pkt
->
d©Æí
 + 2);

297 i‡(! 
skb
) {

298 i‡(
	`¥ötk_øãlimô
())

299 
	`¥ötk
(
KERN_NOTICE
 "snull:Öacket dropped\n");

300 
¥iv
->
°©s
.
rx_dr›≥d
++;

301 
	`¢uŒ_ªÀa£_buf„r
(
pkt
);

304 
	`skb_ª£rve
(
skb
, 2);

305 
	`mem˝y
(
	`skb_put
(
skb
, 
pkt
->
d©Æí
),Ökt->
d©a
,Ökt->datalen);

306 
skb
->
dev
 = dev;

307 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

308 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

309 
	`√tif_ª˚ive_skb
(
skb
);

312 
≈ackës
++;

313 
¥iv
->
°©s
.
rx_∑ckës
++;

314 
¥iv
->
°©s
.
rx_byãs
 +
pkt
->
d©Æí
;

315 
	`¢uŒ_ªÀa£_buf„r
(
pkt
);

318 *
budgë
 -
≈ackës
;

319 
dev
->
quŸa
 -
≈ackës
;

320 i‡(! 
¥iv
->
rx_queue
) {

321 
	`√tif_rx_com∂ëe
(
dev
);

322 
	`¢uŒ_rx_öts
(
dev
, 1);

327 
	}
}

333 
	$¢uŒ_ªguœr_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

335 
°©usw‹d
;

336 
¢uŒ_¥iv
 *
¥iv
;

337 
¢uŒ_∑ckë
 *
pkt
 = 
NULL
;

343 
√t_devi˚
 *
dev
 = (√t_devi˚ *)
dev_id
;

347 i‡(!
dev
)

351 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

352 
	`•ö_lock
(&
¥iv
->
lock
);

355 
°©usw‹d
 = 
¥iv
->
°©us
;

356 
¥iv
->
°©us
 = 0;

357 i‡(
°©usw‹d
 & 
SNULL_RX_INTR
) {

359 
pkt
 = 
¥iv
->
rx_queue
;

360 i‡(
pkt
) {

361 
¥iv
->
rx_queue
 = 
pkt
->
√xt
;

362 
	`¢uŒ_rx
(
dev
, 
pkt
);

365 i‡(
°©usw‹d
 & 
SNULL_TX_INTR
) {

367 
¥iv
->
°©s
.
tx_∑ckës
++;

368 
¥iv
->
°©s
.
tx_byãs
 +¥iv->
tx_∑ckëÀn
;

369 
	`dev_k‰ì_skb
(
¥iv
->
skb
);

373 
	`•ö_u∆ock
(&
¥iv
->
lock
);

374 i‡(
pkt
Ë
	`¢uŒ_ªÀa£_buf„r
(pkt);

376 
	}
}

381 
	$¢uŒ_«pi_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

383 
°©usw‹d
;

384 
¢uŒ_¥iv
 *
¥iv
;

390 
√t_devi˚
 *
dev
 = (√t_devi˚ *)
dev_id
;

394 i‡(!
dev
)

398 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

399 
	`•ö_lock
(&
¥iv
->
lock
);

402 
°©usw‹d
 = 
¥iv
->
°©us
;

403 
¥iv
->
°©us
 = 0;

404 i‡(
°©usw‹d
 & 
SNULL_RX_INTR
) {

405 
	`¢uŒ_rx_öts
(
dev
, 0);

406 
	`√tif_rx_scheduÀ
(
dev
);

408 i‡(
°©usw‹d
 & 
SNULL_TX_INTR
) {

410 
¥iv
->
°©s
.
tx_∑ckës
++;

411 
¥iv
->
°©s
.
tx_byãs
 +¥iv->
tx_∑ckëÀn
;

412 
	`dev_k‰ì_skb
(
¥iv
->
skb
);

416 
	`•ö_u∆ock
(&
¥iv
->
lock
);

418 
	}
}

425 
	$¢uŒ_hw_tx
(*
buf
, 
Àn
, 
√t_devi˚
 *
dev
)

433 
ùhdr
 *
ih
;

434 
√t_devi˚
 *
de°
;

435 
¢uŒ_¥iv
 *
¥iv
;

436 
u32
 *
ßddr
, *
daddr
;

437 
¢uŒ_∑ckë
 *
tx_buf„r
;

440 i‡(
Àn
 < (
ëhhdr
Ë+ (
ùhdr
)) {

441 
	`¥ötk
("snull: Hmm...ÖacketÅoo short (%i octets)\n",

442 
Àn
);

447 
i
;

448 
	`PDEBUG
("À¿i†%i\n" 
KERN_DEBUG
 "d©a:",
Àn
);

449 
i
=14 ; i<
Àn
; i++)

450 
	`¥ötk
(" %02x",
buf
[
i
]&0xff);

451 
	`¥ötk
("\n");

457 
ih
 = (
ùhdr
 *)(
buf
+(
ëhhdr
));

458 
ßddr
 = &
ih
->saddr;

459 
daddr
 = &
ih
->daddr;

461 ((
u8
 *)
ßddr
)[2] ^= 1;

462 ((
u8
 *)
daddr
)[2] ^= 1;

464 
ih
->
check
 = 0;

465 
ih
->
check
 = 
	`ù_Á°_csum
((*)ih,ih->
ihl
);

467 i‡(
dev
 =
¢uŒ_devs
[0])

468 
	`PDEBUGG
("%08x:%05i --> %08x:%05i\n",

469 
	`¡ohl
(
ih
->
ßddr
),
	`¡ohs
(((
t˝hdr
 *)(ih+1))->
sour˚
),

470 
	`¡ohl
(
ih
->
daddr
),
	`¡ohs
(((
t˝hdr
 *)(ih+1))->
de°
));

472 
	`PDEBUGG
("%08x:%05i <-- %08x:%05i\n",

473 
	`¡ohl
(
ih
->
daddr
),
	`¡ohs
(((
t˝hdr
 *)(ih+1))->
de°
),

474 
	`¡ohl
(
ih
->
ßddr
),
	`¡ohs
(((
t˝hdr
 *)(ih+1))->
sour˚
));

481 
de°
 = 
¢uŒ_devs
[
dev
 == snull_devs[0] ? 1 : 0];

482 
¥iv
 = 
	`√tdev_¥iv
(
de°
);

483 
tx_buf„r
 = 
	`¢uŒ_gë_tx_buf„r
(
dev
);

484 
tx_buf„r
->
d©Æí
 = 
Àn
;

485 
	`mem˝y
(
tx_buf„r
->
d©a
, 
buf
, 
Àn
);

486 
	`¢uŒ_íqueue_buf
(
de°
, 
tx_buf„r
);

487 i‡(
¥iv
->
rx_öt_íabÀd
) {

488 
¥iv
->
°©us
 |
SNULL_RX_INTR
;

489 
	`¢uŒ_öãºu±
(0, 
de°
, 
NULL
);

492 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

493 
¥iv
->
tx_∑ckëÀn
 = 
Àn
;

494 
¥iv
->
tx_∑ckëd©a
 = 
buf
;

495 
¥iv
->
°©us
 |
SNULL_TX_INTR
;

496 i‡(
lockup
 && ((
¥iv
->
°©s
.
tx_∑ckës
 + 1) %Üockup) == 0) {

498 
	`√tif_°›_queue
(
dev
);

499 
	`PDEBUG
("SimuœãÜocku∞© %ld,Åx∞%ld\n", 
jiffõs
,

500 (Ë
¥iv
->
°©s
.
tx_∑ckës
);

503 
	`¢uŒ_öãºu±
(0, 
dev
, 
NULL
);

504 
	}
}

509 
	$¢uŒ_tx
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

511 
Àn
;

512 *
d©a
, 
sh‹çkt
[
ETH_ZLEN
];

513 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

515 
d©a
 = 
skb
->data;

516 
Àn
 = 
skb
->len;

517 i‡(
Àn
 < 
ETH_ZLEN
) {

518 
	`mem£t
(
sh‹çkt
, 0, 
ETH_ZLEN
);

519 
	`mem˝y
(
sh‹çkt
, 
skb
->
d©a
, skb->
Àn
);

520 
Àn
 = 
ETH_ZLEN
;

521 
d©a
 = 
sh‹çkt
;

523 
dev
->
å™s_°¨t
 = 
jiffõs
;

526 
¥iv
->
skb
 = skb;

529 
	`¢uŒ_hw_tx
(
d©a
, 
Àn
, 
dev
);

532 
	}
}

537 
	$¢uŒ_tx_timeout
 (
√t_devi˚
 *
dev
)

539 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

541 
	`PDEBUG
("TønsmôÅimeouà© %ld,Ü©ícy %ld\n", 
jiffõs
,

542 
jiffõs
 - 
dev
->
å™s_°¨t
);

544 
¥iv
->
°©us
 = 
SNULL_TX_INTR
;

545 
	`¢uŒ_öãºu±
(0, 
dev
, 
NULL
);

546 
¥iv
->
°©s
.
tx_îr‹s
++;

547 
	`√tif_wake_queue
(
dev
);

549 
	}
}

556 
	$¢uŒ_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
)

558 
	`PDEBUG
("ioctl\n");

560 
	}
}

565 
√t_devi˚_°©s
 *
	$¢uŒ_°©s
(
√t_devi˚
 *
dev
)

567 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

568  &
¥iv
->
°©s
;

569 
	}
}

575 
	$¢uŒ_ªbuûd_hódî
(
sk_buff
 *
skb
)

577 
ëhhdr
 *
ëh
 = (ëhhd∏*Ë
skb
->
d©a
;

578 
√t_devi˚
 *
dev
 = 
skb
->dev;

580 
	`mem˝y
(
ëh
->
h_sour˚
, 
dev
->
dev_addr
, dev->
addr_Àn
);

581 
	`mem˝y
(
ëh
->
h_de°
, 
dev
->
dev_addr
, dev->
addr_Àn
);

582 
ëh
->
h_de°
[
ETH_ALEN
-1] ^= 0x01;

584 
	}
}

587 
	$¢uŒ_hódî
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
,

588 
ty≥
, *
daddr
, *
ßddr
,

589 
Àn
)

591 
ëhhdr
 *
ëh
 = (ëhhd∏*)
	`skb_push
(
skb
,
ETH_HLEN
);

593 
ëh
->
h_¥Ÿo
 = 
	`ht⁄s
(
ty≥
);

594 
	`mem˝y
(
ëh
->
h_sour˚
, 
ßddr
 ? sadd∏: 
dev
->
dev_addr
, dev->
addr_Àn
);

595 
	`mem˝y
(
ëh
->
h_de°
, 
daddr
 ? dadd∏: 
dev
->
dev_addr
, dev->
addr_Àn
);

596 
ëh
->
h_de°
[
ETH_ALEN
-1] ^= 0x01;

597  (
dev
->
h¨d_hódî_Àn
);

598 
	}
}

608 
	$¢uŒ_ch™ge_mtu
(
√t_devi˚
 *
dev
, 
√w_mtu
)

610 
Êags
;

611 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

612 
•ölock_t
 *
lock
 = &
¥iv
->lock;

615 i‡((
√w_mtu
 < 68) || (new_mtu > 1500))

616  -
EINVAL
;

620 
	`•ö_lock_úqßve
(
lock
, 
Êags
);

621 
dev
->
mtu
 = 
√w_mtu
;

622 
	`•ö_u∆ock_úqª°‹e
(
lock
, 
Êags
);

624 
	}
}

630 
	$¢uŒ_öô
(
√t_devi˚
 *
dev
)

632 
¢uŒ_¥iv
 *
¥iv
;

645 
	`ëhî_£tup
(
dev
);

647 
dev
->
›í
 = 
¢uŒ_›í
;

648 
dev
->
°›
 = 
¢uŒ_ªÀa£
;

649 
dev
->
£t_c⁄fig
 = 
¢uŒ_c⁄fig
;

650 
dev
->
h¨d_°¨t_xmô
 = 
¢uŒ_tx
;

651 
dev
->
do_io˘l
 = 
¢uŒ_io˘l
;

652 
dev
->
gë_°©s
 = 
¢uŒ_°©s
;

653 
dev
->
ch™ge_mtu
 = 
¢uŒ_ch™ge_mtu
;

654 
dev
->
ªbuûd_hódî
 = 
¢uŒ_ªbuûd_hódî
;

655 
dev
->
h¨d_hódî
 = 
¢uŒ_hódî
;

656 
dev
->
tx_timeout
 = 
¢uŒ_tx_timeout
;

657 
dev
->
w©chdog_timeo
 = 
timeout
;

658 i‡(
u£_«pi
) {

659 
dev
->
pﬁl
 = 
¢uŒ_pﬁl
;

660 
dev
->
weight
 = 2;

663 
dev
->
Êags
 |
IFF_NOARP
;

664 
dev
->
„©uªs
 |
NETIF_F_NO_CSUM
;

665 
dev
->
h¨d_hódî_ˇche
 = 
NULL
;

671 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

672 
	`mem£t
(
¥iv
, 0, (
¢uŒ_¥iv
));

673 
	`•ö_lock_öô
(&
¥iv
->
lock
);

674 
	`¢uŒ_rx_öts
(
dev
, 1);

675 
	`¢uŒ_£tup_poﬁ
(
dev
);

676 
	}
}

682 
√t_devi˚
 *
	g¢uŒ_devs
[2];

690 
	$¢uŒ_˛ónup
()

692 
i
;

694 
i
 = 0; i < 2; i++) {

695 i‡(
¢uŒ_devs
[
i
]) {

696 
	`uƒegi°î_√tdev
(
¢uŒ_devs
[
i
]);

697 
	`¢uŒ_ã¨down_poﬁ
(
¢uŒ_devs
[
i
]);

698 
	`‰ì_√tdev
(
¢uŒ_devs
[
i
]);

702 
	}
}

707 
	$¢uŒ_öô_moduÀ
()

709 
ªsu…
, 
i
, 
ªt
 = -
ENOMEM
;

711 
¢uŒ_öãºu±
 = 
u£_«pi
 ? 
¢uŒ_«pi_öãºu±
 : 
¢uŒ_ªguœr_öãºu±
;

714 
¢uŒ_devs
[0] = 
	`Æloc_√tdev
((
¢uŒ_¥iv
), "sn%d",

715 
¢uŒ_öô
);

716 
¢uŒ_devs
[1] = 
	`Æloc_√tdev
((
¢uŒ_¥iv
), "sn%d",

717 
¢uŒ_öô
);

718 i‡(
¢uŒ_devs
[0] =
NULL
 || snull_devs[1] == NULL)

719 
out
;

721 
ªt
 = -
ENODEV
;

722 
i
 = 0; i < 2; i++)

723 i‡((
ªsu…
 = 
	`ªgi°î_√tdev
(
¢uŒ_devs
[
i
])))

724 
	`¥ötk
("snull:Érror %iÑegistering device \"%s\"\n",

725 
ªsu…
, 
¢uŒ_devs
[
i
]->
«me
);

727 
ªt
 = 0;

728 
out
:

729 i‡(
ªt
)

730 
	`¢uŒ_˛ónup
();

731  
ªt
;

732 
	}
}

735 
moduÀ_öô
(
¢uŒ_öô_moduÀ
);

736 
moduÀ_exô
(
¢uŒ_˛ónup
);

	@snull/snull.h

21 #unde‡
PDEBUG


22 #ifde‡
SNULL_DEBUG


23 #ifde‡
__KERNEL__


25 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`¥ötk
–
KERN_DEBUG
 "¢uŒ: " fmt, ##árgs)

	)

28 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt, ##árgs)

	)

31 
	#PDEBUG
(
fmt
, 
¨gs
...Ë

	)

34 #unde‡
PDEBUGG


35 
	#PDEBUGG
(
fmt
, 
¨gs
...Ë

	)

39 
	#SNULL_RX_INTR
 0x0001

	)

40 
	#SNULL_TX_INTR
 0x0002

	)

43 
	#SNULL_TIMEOUT
 5

	)

45 
√t_devi˚
 *
¢uŒ_devs
[];

	@tty/tiny_serial.c

15 
	~<löux/kî√l.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/öô.h
>

18 
	~<löux/¶ab.h
>

19 
	~<löux/ây.h
>

20 
	~<löux/ây_Êù.h
>

21 
	~<löux/£rül.h
>

22 
	~<löux/£rül_c‹e.h
>

23 
	~<löux/moduÀ.h
>

26 
	#DRIVER_AUTHOR
 "Gªg Krﬂh-H¨tm™ <gªg@krﬂh.com>"

	)

27 
	#DRIVER_DESC
 "Töy sîü»drivî"

	)

30 
MODULE_AUTHOR
–
DRIVER_AUTHOR
 );

31 
MODULE_DESCRIPTION
–
DRIVER_DESC
 );

32 
MODULE_LICENSE
("GPL");

34 
	#DELAY_TIME
 
HZ
 * 2

	)

35 
	#TINY_DATA_CHARACTER
 't'

	)

37 
	#TINY_SERIAL_MAJOR
 240

	)

38 
	#TINY_SERIAL_MINORS
 1

	)

39 
	#UART_NR
 1

	)

41 
	#TINY_SERIAL_NAME
 "âytöy"

	)

43 
	#MY_NAME
 
TINY_SERIAL_NAME


	)

45 
timî_li°
 *
	gtimî
;

47 
	$töy_°›_tx
(
u¨t_p‹t
 *
p‹t
, 
ây_°›
)

49 
	}
}

51 
	$töy_°›_rx
(
u¨t_p‹t
 *
p‹t
)

53 
	}
}

55 
	$töy_íabÀ_ms
(
u¨t_p‹t
 *
p‹t
)

57 
	}
}

59 
	$töy_tx_ch¨s
(
u¨t_p‹t
 *
p‹t
)

61 
cúc_buf
 *
xmô
 = &
p‹t
->
öfo
->xmit;

62 
cou¡
;

64 i‡(
p‹t
->
x_ch¨
) {

65 
	`¥_debug
("wrŸê%2x", 
p‹t
->
x_ch¨
);

66 
p‹t
->
icou¡
.
tx
++;

67 
p‹t
->
x_ch¨
 = 0;

70 i‡(
	`u¨t_cúc_em±y
(
xmô
Ë|| 
	`u¨t_tx_°›≥d
(
p‹t
)) {

71 
	`töy_°›_tx
(
p‹t
, 0);

75 
cou¡
 = 
p‹t
->
fifosize
 >> 1;

77 
	`¥_debug
("wrŸê%2x", 
xmô
->
buf
[xmô->
èû
]);

78 
xmô
->
èû
 = (xmô->èû + 1Ë& (
UART_XMIT_SIZE
 - 1);

79 
p‹t
->
icou¡
.
tx
++;

80 i‡(
	`u¨t_cúc_em±y
(
xmô
))

82 } --
cou¡
 > 0);

84 i‡(
	`u¨t_cúc_ch¨s_≥ndög
(
xmô
Ë< 
WAKEUP_CHARS
)

85 
	`u¨t_wrôe_wakeup
(
p‹t
);

87 i‡(
	`u¨t_cúc_em±y
(
xmô
))

88 
	`töy_°›_tx
(
p‹t
, 0);

89 
	}
}

91 
	$töy_°¨t_tx
(
u¨t_p‹t
 *
p‹t
, 
ây_°¨t
)

93 
	}
}

95 
	$töy_timî
(
d©a
)

97 
u¨t_p‹t
 *
p‹t
;

98 
ây_°ru˘
 *
ây
;

101 
p‹t
 = (
u¨t_p‹t
 *)
d©a
;

102 i‡(!
p‹t
)

104 i‡(!
p‹t
->
öfo
)

106 
ây
 = 
p‹t
->
öfo
->tty;

107 i‡(!
ây
)

112 
	`ây_ö£π_Êù_ch¨
(
ây
, 
TINY_DATA_CHARACTER
, 0);

114 
	`ây_Êù_buf„r_push
(
ây
);

117 
timî
->
expúes
 = 
jiffõs
 + 
DELAY_TIME
;

118 
	`add_timî
(
timî
);

121 
	`töy_tx_ch¨s
(
p‹t
);

122 
	}
}

124 
	$töy_tx_em±y
(
u¨t_p‹t
 *
p‹t
)

127 
	}
}

129 
	$töy_gë_m˘æ
(
u¨t_p‹t
 *
p‹t
)

132 
	}
}

134 
	$töy_£t_m˘æ
(
u¨t_p‹t
 *
p‹t
, 
m˘æ
)

136 
	}
}

138 
	$töy_bªak_˘l
(
u¨t_p‹t
 *
p‹t
, 
bªak_°©e
)

140 
	}
}

142 
	$töy_£t_ãrmios
(
u¨t_p‹t
 *
p‹t
,

143 
ãrmios
 *
√w
, ãrmio†*
ﬁd
)

145 
baud
, 
quŸ
, 
cÊag
 = 
√w
->
c_cÊag
;

147 
cÊag
 & 
CSIZE
) {

148 
CS5
:

149 
	`¥ötk
(
KERN_DEBUG
 " - data bits = 5\n");

151 
CS6
:

152 
	`¥ötk
(
KERN_DEBUG
 " - data bits = 6\n");

154 
CS7
:

155 
	`¥ötk
(
KERN_DEBUG
 " - data bits = 7\n");

158 
	`¥ötk
(
KERN_DEBUG
 " - data bits = 8\n");

163 i‡(
cÊag
 & 
PARENB
)

164 i‡(
cÊag
 & 
PARODD
)

165 
	`¥_debug
(" -Öarity = odd\n");

167 
	`¥_debug
(" -Öarity =Éven\n");

169 
	`¥_debug
(" -Öarity =Çone\n");

172 i‡(
cÊag
 & 
CSTOPB
)

173 
	`¥_debug
(" - stop bits = 2\n");

175 
	`¥_debug
(" - stop bits = 1\n");

178 i‡(
cÊag
 & 
CRTSCTS
)

179 
	`¥_debug
(" - RTS/CTS isÉnabled\n");

181 
	`¥_debug
(" - RTS/CTS is disabled\n");

184 
baud
 = 
	`u¨t_gë_baud_øã
(
p‹t
, 
√w
, 
ﬁd
, 0,Ö‹t->
u¨t˛k
/16);

185 
quŸ
 = 
	`u¨t_gë_divis‹
(
p‹t
, 
baud
);

189 
	}
}

191 
	$töy_°¨tup
(
u¨t_p‹t
 *
p‹t
)

197 i‡(!
timî
) {

198 
timî
 = 
	`kmÆloc
((*timî), 
GFP_KERNEL
);

199 i‡(!
timî
)

200  -
ENOMEM
;

202 
timî
->
d©a
 = ()
p‹t
;

203 
timî
->
expúes
 = 
jiffõs
 + 
DELAY_TIME
;

204 
timî
->
fun˘i⁄
 = 
töy_timî
;

205 
	`add_timî
(
timî
);

207 
	}
}

209 
	$töy_shutdown
(
u¨t_p‹t
 *
p‹t
)

215 
	`dñ_timî
(
timî
);

216 
	}
}

218 c⁄° *
	$töy_ty≥
(
u¨t_p‹t
 *
p‹t
)

221 
	}
}

223 
	$töy_ªÀa£_p‹t
(
u¨t_p‹t
 *
p‹t
)

226 
	}
}

228 
	$töy_ªque°_p‹t
(
u¨t_p‹t
 *
p‹t
)

231 
	}
}

233 
	$töy_c⁄fig_p‹t
(
u¨t_p‹t
 *
p‹t
, 
Êags
)

235 
	}
}

237 
	$töy_vîify_p‹t
(
u¨t_p‹t
 *
p‹t
, 
£rül_°ru˘
 *
£r
)

240 
	}
}

242 
u¨t_›s
 
	gtöy_›s
 = {

243 .
tx_em±y
 = 
töy_tx_em±y
,

244 .
	g£t_m˘æ
 = 
töy_£t_m˘æ
,

245 .
	ggë_m˘æ
 = 
töy_gë_m˘æ
,

246 .
	g°›_tx
 = 
töy_°›_tx
,

247 .
	g°¨t_tx
 = 
töy_°¨t_tx
,

248 .
	g°›_rx
 = 
töy_°›_rx
,

249 .
	gíabÀ_ms
 = 
töy_íabÀ_ms
,

250 .
	gbªak_˘l
 = 
töy_bªak_˘l
,

251 .
	g°¨tup
 = 
töy_°¨tup
,

252 .
	gshutdown
 = 
töy_shutdown
,

253 .
	g£t_ãrmios
 = 
töy_£t_ãrmios
,

254 .
	gty≥
 = 
töy_ty≥
,

255 .
	gªÀa£_p‹t
 = 
töy_ªÀa£_p‹t
,

256 .
	gªque°_p‹t
 = 
töy_ªque°_p‹t
,

257 .
	gc⁄fig_p‹t
 = 
töy_c⁄fig_p‹t
,

258 .
	gvîify_p‹t
 = 
töy_vîify_p‹t
,

261 
u¨t_p‹t
 
	gtöy_p‹t
 = {

262 .
›s
 = &
töy_›s
,

265 
u¨t_drivî
 
	gtöy_ªg
 = {

266 .
ow√r
 = 
THIS_MODULE
,

267 .
	gdrivî_«me
 = 
TINY_SERIAL_NAME
,

268 .
	gdev_«me
 = 
TINY_SERIAL_NAME
,

269 .
	gmaj‹
 = 
TINY_SERIAL_MAJOR
,

270 .
	gmö‹
 = 
TINY_SERIAL_MINORS
,

271 .
	gƒ
 = 
UART_NR
,

274 
__öô
 
	$töy_öô
()

276 
ªsu…
;

278 
	`¥ötk
(
KERN_INFO
 "Tiny serial driverÜoaded\n");

280 
ªsu…
 = 
	`u¨t_ªgi°î_drivî
(&
töy_ªg
);

281 i‡(
ªsu…
)

282  
ªsu…
;

284 
ªsu…
 = 
	`u¨t_add_⁄e_p‹t
(&
töy_ªg
, &
töy_p‹t
);

285 i‡(
ªsu…
)

286 
	`u¨t_uƒegi°î_drivî
(&
töy_ªg
);

288  
ªsu…
;

289 
	}
}

291 
moduÀ_öô
(
töy_öô
);

	@tty/tiny_tty.c

15 
	~<löux/c⁄fig.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/î∫o.h
>

18 
	~<löux/öô.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/¶ab.h
>

21 
	~<löux/waô.h
>

22 
	~<löux/ây.h
>

23 
	~<löux/ây_drivî.h
>

24 
	~<löux/ây_Êù.h
>

25 
	~<löux/£rül.h
>

26 
	~<asm/uac˚ss.h
>

29 
	#DRIVER_VERSION
 "v2.0"

	)

30 
	#DRIVER_AUTHOR
 "Gªg Krﬂh-H¨tm™ <gªg@krﬂh.com>"

	)

31 
	#DRIVER_DESC
 "Töy TTY drivî"

	)

34 
MODULE_AUTHOR
–
DRIVER_AUTHOR
 );

35 
MODULE_DESCRIPTION
–
DRIVER_DESC
 );

36 
MODULE_LICENSE
("GPL");

38 
	#DELAY_TIME
 
HZ
 * 2

	)

39 
	#TINY_DATA_CHARACTER
 't'

	)

41 
	#TINY_TTY_MAJOR
 240

	)

42 
	#TINY_TTY_MINORS
 4

	)

44 
	stöy_£rül
 {

45 
ây_°ru˘
 *
	mây
;

46 
	m›í_cou¡
;

47 
£m≠h‹e
 
	m£m
;

48 
timî_li°
 *
	mtimî
;

51 
	mm§
;

52 
	mm¸
;

55 
£rül_°ru˘
 
	m£rül
;

56 
waô_queue_hód_t
 
	mwaô
;

57 
async_icou¡
 
	micou¡
;

60 
töy_£rül
 *
	gtöy_èbÀ
[
TINY_TTY_MINORS
];

63 
	$töy_timî
(
timî_d©a
)

65 
töy_£rül
 *
töy
 = (töy_£rü»*)
timî_d©a
;

66 
ây_°ru˘
 *
ây
;

67 
i
;

68 
d©a
[1] = {
TINY_DATA_CHARACTER
};

69 
d©a_size
 = 1;

71 i‡(!
töy
)

74 
ây
 = 
töy
->tty;

78 
i
 = 0; i < 
d©a_size
; ++i) {

79 i‡(
ây
->
Êù
.
cou¡
 >
TTY_FLIPBUF_SIZE
)

80 
	`ây_Êù_buf„r_push
(
ây
);

81 
	`ây_ö£π_Êù_ch¨
(
ây
, 
d©a
[
i
], 
TTY_NORMAL
);

83 
	`ây_Êù_buf„r_push
(
ây
);

86 
töy
->
timî
->
expúes
 = 
jiffõs
 + 
DELAY_TIME
;

87 
	`add_timî
(
töy
->
timî
);

88 
	}
}

90 
	$töy_›í
(
ây_°ru˘
 *
ây
, 
fûe
 *file)

92 
töy_£rül
 *
töy
;

93 
timî_li°
 *
timî
;

94 
ödex
;

97 
ây
->
drivî_d©a
 = 
NULL
;

100 
ödex
 = 
ây
->index;

101 
töy
 = 
töy_èbÀ
[
ödex
];

102 i‡(
töy
 =
NULL
) {

104 
töy
 = 
	`kmÆloc
((*töy), 
GFP_KERNEL
);

105 i‡(!
töy
)

106  -
ENOMEM
;

108 
	`öô_MUTEX
(&
töy
->
£m
);

109 
töy
->
›í_cou¡
 = 0;

110 
töy
->
timî
 = 
NULL
;

112 
töy_èbÀ
[
ödex
] = 
töy
;

115 
	`down
(&
töy
->
£m
);

118 
ây
->
drivî_d©a
 = 
töy
;

119 
töy
->
ây
 =Åty;

121 ++
töy
->
›í_cou¡
;

122 i‡(
töy
->
›í_cou¡
 == 1) {

127 i‡(!
töy
->
timî
) {

128 
timî
 = 
	`kmÆloc
((*timî), 
GFP_KERNEL
);

129 i‡(!
timî
) {

130 
	`up
(&
töy
->
£m
);

131  -
ENOMEM
;

133 
töy
->
timî
 =Åimer;

135 
töy
->
timî
->
d©a
 = ()tiny;

136 
töy
->
timî
->
expúes
 = 
jiffõs
 + 
DELAY_TIME
;

137 
töy
->
timî
->
fun˘i⁄
 = 
töy_timî
;

138 
	`add_timî
(
töy
->
timî
);

141 
	`up
(&
töy
->
£m
);

143 
	}
}

145 
	$do_˛o£
(
töy_£rül
 *
töy
)

147 
	`down
(&
töy
->
£m
);

149 i‡(!
töy
->
›í_cou¡
) {

151 
exô
;

154 --
töy
->
›í_cou¡
;

155 i‡(
töy
->
›í_cou¡
 <= 0) {

160 
	`dñ_timî
(
töy
->
timî
);

162 
exô
:

163 
	`up
(&
töy
->
£m
);

164 
	}
}

166 
	$töy_˛o£
(
ây_°ru˘
 *
ây
, 
fûe
 *file)

168 
töy_£rül
 *
töy
 = 
ây
->
drivî_d©a
;

170 i‡(
töy
)

171 
	`do_˛o£
(
töy
);

172 
	}
}

174 
	$töy_wrôe
(
ây_°ru˘
 *
ây
,

175 c⁄° *
buf„r
, 
cou¡
)

177 
töy_£rül
 *
töy
 = 
ây
->
drivî_d©a
;

178 
i
;

179 
ªtvÆ
 = -
EINVAL
;

181 i‡(!
töy
)

182  -
ENODEV
;

184 
	`down
(&
töy
->
£m
);

186 i‡(!
töy
->
›í_cou¡
)

188 
exô
;

193 
	`¥ötk
(
KERN_DEBUG
 "%†- ", 
__FUNCTION__
);

194 
i
 = 0; i < 
cou¡
; ++i)

195 
	`¥ötk
("%02x ", 
buf„r
[
i
]);

196 
	`¥ötk
("\n");

198 
exô
:

199 
	`up
(&
töy
->
£m
);

200  
ªtvÆ
;

201 
	}
}

203 
	$töy_wrôe_room
(
ây_°ru˘
 *
ây
)

205 
töy_£rül
 *
töy
 = 
ây
->
drivî_d©a
;

206 
room
 = -
EINVAL
;

208 i‡(!
töy
)

209  -
ENODEV
;

211 
	`down
(&
töy
->
£m
);

213 i‡(!
töy
->
›í_cou¡
) {

215 
exô
;

219 
room
 = 255;

221 
exô
:

222 
	`up
(&
töy
->
£m
);

223  
room
;

224 
	}
}

226 
	#RELEVANT_IFLAG
(
iÊag
Ë((iÊagË& (
IGNBRK
|
BRKINT
|
IGNPAR
|
PARMRK
|
INPCK
))

	)

228 
	$töy_£t_ãrmios
(
ây_°ru˘
 *
ây
, 
ãrmios
 *
ﬁd_ãrmios
)

230 
cÊag
;

232 
cÊag
 = 
ây
->
ãrmios
->
c_cÊag
;

235 i‡(
ﬁd_ãrmios
) {

236 i‡((
cÊag
 =
ﬁd_ãrmios
->
c_cÊag
) &&

237 (
	`RELEVANT_IFLAG
(
ây
->
ãrmios
->
c_iÊag
) ==

238 
	`RELEVANT_IFLAG
(
ﬁd_ãrmios
->
c_iÊag
))) {

239 
	`¥ötk
(
KERN_DEBUG
 " -ÇothingÅo change...\n");

245 
cÊag
 & 
CSIZE
) {

246 
CS5
:

247 
	`¥ötk
(
KERN_DEBUG
 " - data bits = 5\n");

249 
CS6
:

250 
	`¥ötk
(
KERN_DEBUG
 " - data bits = 6\n");

252 
CS7
:

253 
	`¥ötk
(
KERN_DEBUG
 " - data bits = 7\n");

256 
CS8
:

257 
	`¥ötk
(
KERN_DEBUG
 " - data bits = 8\n");

262 i‡(
cÊag
 & 
PARENB
)

263 i‡(
cÊag
 & 
PARODD
)

264 
	`¥ötk
(
KERN_DEBUG
 " -Öarity = odd\n");

266 
	`¥ötk
(
KERN_DEBUG
 " -Öarity =Éven\n");

268 
	`¥ötk
(
KERN_DEBUG
 " -Öarity =Çone\n");

271 i‡(
cÊag
 & 
CSTOPB
)

272 
	`¥ötk
(
KERN_DEBUG
 " - stop bits = 2\n");

274 
	`¥ötk
(
KERN_DEBUG
 " - stop bits = 1\n");

277 i‡(
cÊag
 & 
CRTSCTS
)

278 
	`¥ötk
(
KERN_DEBUG
 " - RTS/CTS isÉnabled\n");

280 
	`¥ötk
(
KERN_DEBUG
 " - RTS/CTS is disabled\n");

285 i‡(
	`I_IXOFF
(
ây
Ë|| 
	`I_IXON
(tty)) {

286 
°›_ch¨
 = 
	`STOP_CHAR
(
ây
);

287 
°¨t_ch¨
 = 
	`START_CHAR
(
ây
);

290 i‡(
	`I_IXOFF
(
ây
))

291 
	`¥ötk
(
KERN_DEBUG
 " - INBOUND XON/XOFF isÉnabled, "

292 "XON = %2x, XOFF = %2x", 
°¨t_ch¨
, 
°›_ch¨
);

294 
	`¥ötk
(
KERN_DEBUG
" - INBOUND XON/XOFF is disabled");

297 i‡(
	`I_IXON
(
ây
))

298 
	`¥ötk
(
KERN_DEBUG
" - OUTBOUND XON/XOFF isÉnabled, "

299 "XON = %2x, XOFF = %2x", 
°¨t_ch¨
, 
°›_ch¨
);

301 
	`¥ötk
(
KERN_DEBUG
" - OUTBOUND XON/XOFF is disabled");

305 
	`¥ötk
(
KERN_DEBUG
 " - baudÑ©ê%d", 
	`ây_gë_baud_øã
(
ây
));

306 
	}
}

309 
	#MCR_DTR
 0x01

	)

310 
	#MCR_RTS
 0x02

	)

311 
	#MCR_LOOP
 0x04

	)

312 
	#MSR_CTS
 0x08

	)

313 
	#MSR_CD
 0x10

	)

314 
	#MSR_RI
 0x20

	)

315 
	#MSR_DSR
 0x40

	)

317 
	$töy_tiocmgë
(
ây_°ru˘
 *
ây
, 
fûe
 *file)

319 
töy_£rül
 *
töy
 = 
ây
->
drivî_d©a
;

321 
ªsu…
 = 0;

322 
m§
 = 
töy
->msr;

323 
m¸
 = 
töy
->mcr;

325 
ªsu…
 = ((
m¸
 & 
MCR_DTR
Ë? 
TIOCM_DTR
 : 0) |

326 ((
m¸
 & 
MCR_RTS
Ë? 
TIOCM_RTS
 : 0) |

327 ((
m¸
 & 
MCR_LOOP
Ë? 
TIOCM_LOOP
 : 0) |

328 ((
m§
 & 
MSR_CTS
Ë? 
TIOCM_CTS
 : 0) |

329 ((
m§
 & 
MSR_CD
Ë? 
TIOCM_CAR
 : 0) |

330 ((
m§
 & 
MSR_RI
Ë? 
TIOCM_RI
 : 0) |

331 ((
m§
 & 
MSR_DSR
Ë? 
TIOCM_DSR
 : 0);

333  
ªsu…
;

334 
	}
}

336 
	$töy_tiocm£t
(
ây_°ru˘
 *
ây
, 
fûe
 *file,

337 
£t
, 
˛ór
)

339 
töy_£rül
 *
töy
 = 
ây
->
drivî_d©a
;

340 
m¸
 = 
töy
->mcr;

342 i‡(
£t
 & 
TIOCM_RTS
)

343 
m¸
 |
MCR_RTS
;

344 i‡(
£t
 & 
TIOCM_DTR
)

345 
m¸
 |
MCR_RTS
;

347 i‡(
˛ór
 & 
TIOCM_RTS
)

348 
m¸
 &~
MCR_RTS
;

349 i‡(
˛ór
 & 
TIOCM_DTR
)

350 
m¸
 &~
MCR_RTS
;

353 
töy
->
m¸
 = mcr;

355 
	}
}

357 
	$töy_ªad_¥oc
(*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
,

358 *
eof
, *
d©a
)

360 
töy_£rül
 *
töy
;

361 
off_t
 
begö
 = 0;

362 
Àngth
 = 0;

363 
i
;

365 
Àngth
 +
	`•rötf
(
∑ge
, "töy£röfo:1.0 drivî:%s\n", 
DRIVER_VERSION
);

366 
i
 = 0; i < 
TINY_TTY_MINORS
 && 
Àngth
 < 
PAGE_SIZE
; ++i) {

367 
töy
 = 
töy_èbÀ
[
i
];

368 i‡(
töy
 =
NULL
)

371 
Àngth
 +
	`•rötf
(
∑ge
+Àngth, "%d\n", 
i
);

372 i‡((
Àngth
 + 
begö
Ë> (
off
 + 
cou¡
))

373 
d⁄e
;

374 i‡((
Àngth
 + 
begö
Ë< 
off
) {

375 
begö
 +
Àngth
;

376 
Àngth
 = 0;

379 *
eof
 = 1;

380 
d⁄e
:

381 i‡(
off
 >(
Àngth
 + 
begö
))

383 *
°¨t
 = 
∑ge
 + (
off
-
begö
);

384  (
cou¡
 < 
begö
+
Àngth
-
off
) ? count : begin +Üength-off;

385 
	}
}

387 
	#töy_io˘l
 
töy_io˘l_tiocg£rül


	)

388 
	$töy_io˘l
(
ây_°ru˘
 *
ây
, 
fûe
 *file,

389 
cmd
, 
¨g
)

391 
töy_£rül
 *
töy
 = 
ây
->
drivî_d©a
;

393 i‡(
cmd
 =
TIOCGSERIAL
) {

394 
£rül_°ru˘
 
tmp
;

396 i‡(!
¨g
)

397  -
EFAULT
;

399 
	`mem£t
(&
tmp
, 0, (tmp));

401 
tmp
.
ty≥
 = 
töy
->
£rül
.type;

402 
tmp
.
löe
 = 
töy
->
£rül
.line;

403 
tmp
.
p‹t
 = 
töy
->
£rül
.port;

404 
tmp
.
úq
 = 
töy
->
£rül
.irq;

405 
tmp
.
Êags
 = 
ASYNC_SKIP_TEST
 | 
ASYNC_AUTO_IRQ
;

406 
tmp
.
xmô_fifo_size
 = 
töy
->
£rül
.xmit_fifo_size;

407 
tmp
.
baud_ba£
 = 
töy
->
£rül
.baud_base;

408 
tmp
.
˛o£_dñay
 = 5*
HZ
;

409 
tmp
.
˛osög_waô
 = 30*
HZ
;

410 
tmp
.
cu°om_divis‹
 = 
töy
->
£rül
.custom_divisor;

411 
tmp
.
hub6
 = 
töy
->
£rül
.hub6;

412 
tmp
.
io_ty≥
 = 
töy
->
£rül
.io_type;

414 i‡(
	`c›y_to_u£r
((
__u£r
 *)
¨g
, &
tmp
, (
£rül_°ru˘
)))

415  -
EFAULT
;

418  -
ENOIOCTLCMD
;

419 
	}
}

420 #unde‡
töy_io˘l


422 
	#töy_io˘l
 
töy_io˘l_tiocmiwaô


	)

423 
	$töy_io˘l
(
ây_°ru˘
 *
ây
, 
fûe
 *file,

424 
cmd
, 
¨g
)

426 
töy_£rül
 *
töy
 = 
ây
->
drivî_d©a
;

428 i‡(
cmd
 =
TIOCMIWAIT
) {

429 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

430 
async_icou¡
 
˙ow
;

431 
async_icou¡
 
˝ªv
;

433 
˝ªv
 = 
töy
->
icou¡
;

435 
	`add_waô_queue
(&
töy
->
waô
, &wait);

436 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

437 
	`scheduÀ
();

438 
	`ªmove_waô_queue
(&
töy
->
waô
, &wait);

441 i‡(
	`sig«l_≥ndög
(
cuºít
))

442  -
ERESTARTSYS
;

444 
˙ow
 = 
töy
->
icou¡
;

445 i‡(
˙ow
.
∫g
 =
˝ªv
.∫g && cnow.
d§
 == cprev.dsr &&

446 
˙ow
.
dcd
 =
˝ªv
.dcd && cnow.
˘s
 == cprev.cts)

447  -
EIO
;

448 i‡(((
¨g
 & 
TIOCM_RNG
Ë&& (
˙ow
.
∫g
 !
˝ªv
.rng)) ||

449 ((
¨g
 & 
TIOCM_DSR
Ë&& (
˙ow
.
d§
 !
˝ªv
.dsr)) ||

450 ((
¨g
 & 
TIOCM_CD
Ë&& (
˙ow
.
dcd
 !
˝ªv
.dcd)) ||

451 ((
¨g
 & 
TIOCM_CTS
Ë&& (
˙ow
.
˘s
 !
˝ªv
.cts)) ) {

454 
˝ªv
 = 
˙ow
;

458  -
ENOIOCTLCMD
;

459 
	}
}

460 #unde‡
töy_io˘l


462 
	#töy_io˘l
 
töy_io˘l_tiocgicou¡


	)

463 
	$töy_io˘l
(
ây_°ru˘
 *
ây
, 
fûe
 *file,

464 
cmd
, 
¨g
)

466 
töy_£rül
 *
töy
 = 
ây
->
drivî_d©a
;

468 i‡(
cmd
 =
TIOCGICOUNT
) {

469 
async_icou¡
 
˙ow
 = 
töy
->
icou¡
;

470 
£rül_icou¡î_°ru˘
 
icou¡
;

472 
icou¡
.
˘s
 = 
˙ow
.cts;

473 
icou¡
.
d§
 = 
˙ow
.dsr;

474 
icou¡
.
∫g
 = 
˙ow
.rng;

475 
icou¡
.
dcd
 = 
˙ow
.dcd;

476 
icou¡
.
rx
 = 
˙ow
.rx;

477 
icou¡
.
tx
 = 
˙ow
.tx;

478 
icou¡
.
‰ame
 = 
˙ow
.frame;

479 
icou¡
.
ovîrun
 = 
˙ow
.overrun;

480 
icou¡
.
∑rôy
 = 
˙ow
.parity;

481 
icou¡
.
brk
 = 
˙ow
.brk;

482 
icou¡
.
buf_ovîrun
 = 
˙ow
.buf_overrun;

484 i‡(
	`c›y_to_u£r
((
__u£r
 *)
¨g
, &
icou¡
, (icount)))

485  -
EFAULT
;

488  -
ENOIOCTLCMD
;

489 
	}
}

490 #unde‡
töy_io˘l


493 
	$töy_io˘l
(
ây_°ru˘
 *
ây
, 
fûe
 *file,

494 
cmd
, 
¨g
)

496 
cmd
) {

497 
TIOCGSERIAL
:

498  
	`töy_io˘l_tiocg£rül
(
ây
, 
fûe
, 
cmd
, 
¨g
);

499 
TIOCMIWAIT
:

500  
	`töy_io˘l_tiocmiwaô
(
ây
, 
fûe
, 
cmd
, 
¨g
);

501 
TIOCGICOUNT
:

502  
	`töy_io˘l_tiocgicou¡
(
ây
, 
fûe
, 
cmd
, 
¨g
);

505  -
ENOIOCTLCMD
;

506 
	}
}

508 
ây_›î©i⁄s
 
	g£rül_›s
 = {

509 .
›í
 = 
töy_›í
,

510 .
	g˛o£
 = 
töy_˛o£
,

511 .
	gwrôe
 = 
töy_wrôe
,

512 .
	gwrôe_room
 = 
töy_wrôe_room
,

513 .
	g£t_ãrmios
 = 
töy_£t_ãrmios
,

516 
ây_drivî
 *
	gtöy_ây_drivî
;

518 
__öô
 
	$töy_öô
()

520 
ªtvÆ
;

521 
i
;

524 
töy_ây_drivî
 = 
	`Æloc_ây_drivî
(
TINY_TTY_MINORS
);

525 i‡(!
töy_ây_drivî
)

526  -
ENOMEM
;

529 
töy_ây_drivî
->
ow√r
 = 
THIS_MODULE
;

530 
töy_ây_drivî
->
drivî_«me
 = "tiny_tty";

531 
töy_ây_drivî
->
«me
 = "ttty";

532 
töy_ây_drivî
->
devfs_«me
 = "tts/ttty%d";

533 
töy_ây_drivî
->
maj‹
 = 
TINY_TTY_MAJOR
,

534 
töy_ây_drivî
->
ty≥
 = 
TTY_DRIVER_TYPE_SERIAL
,

535 
töy_ây_drivî
->
subty≥
 = 
SERIAL_TYPE_NORMAL
,

536 
töy_ây_drivî
->
Êags
 = 
TTY_DRIVER_REAL_RAW
 | 
TTY_DRIVER_NO_DEVFS
,

537 
töy_ây_drivî
->
öô_ãrmios
 = 
ây_°d_ãrmios
;

538 
töy_ây_drivî
->
öô_ãrmios
.
c_cÊag
 = 
B9600
 | 
CS8
 | 
CREAD
 | 
HUPCL
 | 
CLOCAL
;

539 
	`ây_£t_›î©i⁄s
(
töy_ây_drivî
, &
£rül_›s
);

544 
töy_ây_drivî
->
ªad_¥oc
 = 
töy_ªad_¥oc
;

545 
töy_ây_drivî
->
tiocmgë
 = 
töy_tiocmgë
;

546 
töy_ây_drivî
->
tiocm£t
 = 
töy_tiocm£t
;

547 
töy_ây_drivî
->
io˘l
 = 
töy_io˘l
;

550 
ªtvÆ
 = 
	`ây_ªgi°î_drivî
(
töy_ây_drivî
);

551 i‡(
ªtvÆ
) {

552 
	`¥ötk
(
KERN_ERR
 "failedÅoÑegisterÅinyÅty driver");

553 
	`put_ây_drivî
(
töy_ây_drivî
);

554  
ªtvÆ
;

557 
i
 = 0; i < 
TINY_TTY_MINORS
; ++i)

558 
	`ây_ªgi°î_devi˚
(
töy_ây_drivî
, 
i
, 
NULL
);

560 
	`¥ötk
(
KERN_INFO
 
DRIVER_DESC
 " " 
DRIVER_VERSION
);

561  
ªtvÆ
;

562 
	}
}

564 
__exô
 
	$töy_exô
()

566 
töy_£rül
 *
töy
;

567 
i
;

569 
i
 = 0; i < 
TINY_TTY_MINORS
; ++i)

570 
	`ây_uƒegi°î_devi˚
(
töy_ây_drivî
, 
i
);

571 
	`ây_uƒegi°î_drivî
(
töy_ây_drivî
);

574 
i
 = 0; i < 
TINY_TTY_MINORS
; ++i) {

575 
töy
 = 
töy_èbÀ
[
i
];

576 i‡(
töy
) {

578 
töy
->
›í_cou¡
)

579 
	`do_˛o£
(
töy
);

582 
	`dñ_timî
(
töy
->
timî
);

583 
	`k‰ì
(
töy
->
timî
);

584 
	`k‰ì
(
töy
);

585 
töy_èbÀ
[
i
] = 
NULL
;

588 
	}
}

590 
moduÀ_öô
(
töy_öô
);

591 
moduÀ_exô
(
töy_exô
);

	@usb/usb-skeleton.c

16 
	~<löux/c⁄fig.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/î∫o.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/¶ab.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/kªf.h
>

23 
	~<löux/smp_lock.h
>

24 
	~<löux/usb.h
>

25 
	~<asm/uac˚ss.h
>

29 
	#USB_SKEL_VENDOR_ID
 0xfff0

	)

30 
	#USB_SKEL_PRODUCT_ID
 0xfff0

	)

33 
usb_devi˚_id
 
	gskñ_èbÀ
 [] = {

34 { 
USB_DEVICE
(
USB_SKEL_VENDOR_ID
, 
USB_SKEL_PRODUCT_ID
) },

37 
MODULE_DEVICE_TABLE
 (
usb
, 
skñ_èbÀ
);

41 
	#USB_SKEL_MINOR_BASE
 192

	)

44 
	susb_skñ
 {

45 
usb_devi˚
 * 
	mudev
;

46 
usb_öãrÁ˚
 * 
	möãrÁ˚
;

47 * 
	mbulk_ö_buf„r
;

48 
size_t
 
	mbulk_ö_size
;

49 
__u8
 
	mbulk_ö_ídpoötAddr
;

50 
__u8
 
	mbulk_out_ídpoötAddr
;

51 
kªf
 
	mkªf
;

53 
	#to_skñ_dev
(
d
Ë
	`c⁄èöî_of
(d, 
usb_skñ
, 
kªf
)

	)

55 
usb_drivî
 
	gskñ_drivî
;

57 
	$skñ_dñëe
(
kªf
 *kref)

59 
usb_skñ
 *
dev
 = 
	`to_skñ_dev
(
kªf
);

61 
	`usb_put_dev
(
dev
->
udev
);

62 
	`k‰ì
 (
dev
->
bulk_ö_buf„r
);

63 
	`k‰ì
 (
dev
);

64 
	}
}

66 
	$skñ_›í
(
öode
 *öode, 
fûe
 *file)

68 
usb_skñ
 *
dev
;

69 
usb_öãrÁ˚
 *
öãrÁ˚
;

70 
submö‹
;

71 
ªtvÆ
 = 0;

73 
submö‹
 = 
	`imö‹
(
öode
);

75 
öãrÁ˚
 = 
	`usb_föd_öãrÁ˚
(&
skñ_drivî
, 
submö‹
);

76 i‡(!
öãrÁ˚
) {

77 
	`îr
 ("%s -Érror, can't find device for minor %d",

78 
__FUNCTION__
, 
submö‹
);

79 
ªtvÆ
 = -
ENODEV
;

80 
exô
;

83 
dev
 = 
	`usb_gë_ötfd©a
(
öãrÁ˚
);

84 i‡(!
dev
) {

85 
ªtvÆ
 = -
ENODEV
;

86 
exô
;

90 
	`kªf_gë
(&
dev
->
kªf
);

93 
fûe
->
¥iv©e_d©a
 = 
dev
;

95 
exô
:

96  
ªtvÆ
;

97 
	}
}

99 
	$skñ_ªÀa£
(
öode
 *öode, 
fûe
 *file)

101 
usb_skñ
 *
dev
;

103 
dev
 = (
usb_skñ
 *)
fûe
->
¥iv©e_d©a
;

104 i‡(
dev
 =
NULL
)

105  -
ENODEV
;

108 
	`kªf_put
(&
dev
->
kªf
, 
skñ_dñëe
);

110 
	}
}

112 
ssize_t
 
	$skñ_ªad
(
fûe
 *fûe, 
__u£r
 *
buf„r
, 
size_t
 
cou¡
, 
loff_t
 *
µos
)

114 
usb_skñ
 *
dev
;

115 
ªtvÆ
 = 0;

117 
dev
 = (
usb_skñ
 *)
fûe
->
¥iv©e_d©a
;

120 
ªtvÆ
 = 
	`usb_bulk_msg
(
dev
->
udev
,

121 
	`usb_rcvbulkpùe
(
dev
->
udev
, dev->
bulk_ö_ídpoötAddr
),

122 
dev
->
bulk_ö_buf„r
,

123 
	`mö
(
dev
->
bulk_ö_size
, 
cou¡
),

124 &
cou¡
, 
HZ
*10);

127 i‡(!
ªtvÆ
) {

128 i‡(
	`c›y_to_u£r
(
buf„r
, 
dev
->
bulk_ö_buf„r
, 
cou¡
))

129 
ªtvÆ
 = -
EFAULT
;

131 
ªtvÆ
 = 
cou¡
;

134  
ªtvÆ
;

135 
	}
}

137 
	$skñ_wrôe_bulk_ˇŒback
(
urb
 *urb, 
±_ªgs
 *
ªgs
)

140 i‡(
urb
->
°©us
 &&

141 !(
urb
->
°©us
 =-
ENOENT
 ||

142 
urb
->
°©us
 =-
ECONNRESET
 ||

143 
urb
->
°©us
 =-
ESHUTDOWN
)) {

144 
	`dbg
("%s -Çonzero write bulk statusÑeceived: %d",

145 
__FUNCTION__
, 
urb
->
°©us
);

149 
	`usb_buf„r_‰ì
(
urb
->
dev
, urb->
å™s„r_buf„r_Àngth
,

150 
urb
->
å™s„r_buf„r
, urb->
å™s„r_dma
);

151 
	}
}

153 
ssize_t
 
	$skñ_wrôe
(
fûe
 *fûe, c⁄° 
__u£r
 *
u£r_buf„r
, 
size_t
 
cou¡
, 
loff_t
 *
µos
)

155 
usb_skñ
 *
dev
;

156 
ªtvÆ
 = 0;

157 
urb
 *urb = 
NULL
;

158 *
buf
 = 
NULL
;

160 
dev
 = (
usb_skñ
 *)
fûe
->
¥iv©e_d©a
;

163 i‡(
cou¡
 == 0)

164 
exô
;

167 
urb
 = 
	`usb_Æloc_urb
(0, 
GFP_KERNEL
);

168 i‡(!
urb
) {

169 
ªtvÆ
 = -
ENOMEM
;

170 
îr‹
;

173 
buf
 = 
	`usb_buf„r_Æloc
(
dev
->
udev
, 
cou¡
, 
GFP_KERNEL
, &
urb
->
å™s„r_dma
);

174 i‡(!
buf
) {

175 
ªtvÆ
 = -
ENOMEM
;

176 
îr‹
;

178 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf„r
, 
cou¡
)) {

179 
ªtvÆ
 = -
EFAULT
;

180 
îr‹
;

184 
	`usb_fûl_bulk_urb
(
urb
, 
dev
->
udev
,

185 
	`usb_¢dbulkpùe
(
dev
->
udev
, dev->
bulk_out_ídpoötAddr
),

186 
buf
, 
cou¡
, 
skñ_wrôe_bulk_ˇŒback
, 
dev
);

187 
urb
->
å™s„r_Êags
 |
URB_NO_TRANSFER_DMA_MAP
;

190 
ªtvÆ
 = 
	`usb_submô_urb
(
urb
, 
GFP_KERNEL
);

191 i‡(
ªtvÆ
) {

192 
	`îr
("%†- faûed submôtög wrôêurb,Éº‹ %d", 
__FUNCTION__
, 
ªtvÆ
);

193 
îr‹
;

197 
	`usb_‰ì_urb
(
urb
);

199 
exô
:

200  
cou¡
;

202 
îr‹
:

203 
	`usb_buf„r_‰ì
(
dev
->
udev
, 
cou¡
, 
buf
, 
urb
->
å™s„r_dma
);

204 
	`usb_‰ì_urb
(
urb
);

205 
	`k‰ì
(
buf
);

206  
ªtvÆ
;

207 
	}
}

209 
fûe_›î©i⁄s
 
	gskñ_f›s
 = {

210 .
ow√r
 = 
THIS_MODULE
,

211 .
	gªad
 = 
skñ_ªad
,

212 .
	gwrôe
 = 
skñ_wrôe
,

213 .
	g›í
 = 
skñ_›í
,

214 .
	gªÀa£
 = 
skñ_ªÀa£
,

221 
usb_˛ass_drivî
 
	gskñ_˛ass
 = {

222 .
«me
 = "usb/skel%d",

223 .
	gf›s
 = &
skñ_f›s
,

224 .
	gmode
 = 
S_IFCHR
 | 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IWGRP
 | 
S_IROTH
,

225 .
	gmö‹_ba£
 = 
USB_SKEL_MINOR_BASE
,

228 
	$skñ_¥obe
(
usb_öãrÁ˚
 *
öãrÁ˚
, c⁄° 
usb_devi˚_id
 *
id
)

230 
usb_skñ
 *
dev
 = 
NULL
;

231 
usb_ho°_öãrÁ˚
 *
iÁ˚_desc
;

232 
usb_ídpoöt_des¸ùt‹
 *
ídpoöt
;

233 
size_t
 
buf„r_size
;

234 
i
;

235 
ªtvÆ
 = -
ENOMEM
;

238 
dev
 = 
	`kmÆloc
((
usb_skñ
), 
GFP_KERNEL
);

239 i‡(
dev
 =
NULL
) {

240 
	`îr
("Out of memory");

241 
îr‹
;

243 
	`mem£t
(
dev
, 0x00,  (*dev));

244 
	`kªf_öô
(&
dev
->
kªf
);

246 
dev
->
udev
 = 
	`usb_gë_dev
(
	`öãrÁ˚_to_usbdev
(
öãrÁ˚
));

247 
dev
->
öãrÁ˚
 = interface;

251 
iÁ˚_desc
 = 
öãrÁ˚
->
cur_Æt£âög
;

252 
i
 = 0; i < 
iÁ˚_desc
->
desc
.
bNumEndpoöts
; ++i) {

253 
ídpoöt
 = &
iÁ˚_desc
->ídpoöt[
i
].
desc
;

255 i‡(!
dev
->
bulk_ö_ídpoötAddr
 &&

256 (
ídpoöt
->
bEndpoötAddªss
 & 
USB_DIR_IN
) &&

257 ((
ídpoöt
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
)

258 =
USB_ENDPOINT_XFER_BULK
)) {

260 
buf„r_size
 = 
ídpoöt
->
wMaxPackëSize
;

261 
dev
->
bulk_ö_size
 = 
buf„r_size
;

262 
dev
->
bulk_ö_ídpoötAddr
 = 
ídpoöt
->
bEndpoötAddªss
;

263 
dev
->
bulk_ö_buf„r
 = 
	`kmÆloc
(
buf„r_size
, 
GFP_KERNEL
);

264 i‡(!
dev
->
bulk_ö_buf„r
) {

265 
	`îr
("CouldÇotállocate bulk_in_buffer");

266 
îr‹
;

270 i‡(!
dev
->
bulk_out_ídpoötAddr
 &&

271 !(
ídpoöt
->
bEndpoötAddªss
 & 
USB_DIR_IN
) &&

272 ((
ídpoöt
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
)

273 =
USB_ENDPOINT_XFER_BULK
)) {

275 
dev
->
bulk_out_ídpoötAddr
 = 
ídpoöt
->
bEndpoötAddªss
;

278 i‡(!(
dev
->
bulk_ö_ídpoötAddr
 && dev->
bulk_out_ídpoötAddr
)) {

279 
	`îr
("CouldÇot find both bulk-inánd bulk-outÉndpoints");

280 
îr‹
;

284 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
dev
);

287 
ªtvÆ
 = 
	`usb_ªgi°î_dev
(
öãrÁ˚
, &
skñ_˛ass
);

288 i‡(
ªtvÆ
) {

290 
	`îr
("NotábleÅo getá minor forÅhis device.");

291 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
NULL
);

292 
îr‹
;

296 
	`öfo
("USB Skñë⁄ devi˚ÇowáâachedÅÿUSBSkñ-%d", 
öãrÁ˚
->
mö‹
);

299 
îr‹
:

300 i‡(
dev
)

301 
	`kªf_put
(&
dev
->
kªf
, 
skñ_dñëe
);

302  
ªtvÆ
;

303 
	}
}

305 
	$skñ_disc⁄√˘
(
usb_öãrÁ˚
 *
öãrÁ˚
)

307 
usb_skñ
 *
dev
;

308 
mö‹
 = 
öãrÁ˚
->minor;

311 
	`lock_kî√l
();

313 
dev
 = 
	`usb_gë_ötfd©a
(
öãrÁ˚
);

314 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
NULL
);

317 
	`usb_dîegi°î_dev
(
öãrÁ˚
, &
skñ_˛ass
);

319 
	`u∆ock_kî√l
();

322 
	`kªf_put
(&
dev
->
kªf
, 
skñ_dñëe
);

324 
	`öfo
("USB Skñë⁄ #%dÇow disc⁄√˘ed", 
mö‹
);

325 
	}
}

327 
usb_drivî
 
	gskñ_drivî
 = {

328 .
ow√r
 = 
THIS_MODULE
,

329 .
	g«me
 = "skeleton",

330 .
	gid_èbÀ
 = 
skñ_èbÀ
,

331 .
	g¥obe
 = 
skñ_¥obe
,

332 .
	gdisc⁄√˘
 = 
skñ_disc⁄√˘
,

335 
__öô
 
	$usb_skñ_öô
()

337 
ªsu…
;

340 
ªsu…
 = 
	`usb_ªgi°î
(&
skñ_drivî
);

341 i‡(
ªsu…
)

342 
	`îr
("usb_ªgi°î faûed. Eº‹Çumbî %d", 
ªsu…
);

344  
ªsu…
;

345 
	}
}

347 
__exô
 
	$usb_skñ_exô
()

350 
	`usb_dîegi°î
(&
skñ_drivî
);

351 
	}
}

353 
moduÀ_öô
 (
usb_skñ_öô
);

354 
moduÀ_exô
 (
usb_skñ_exô
);

356 
MODULE_LICENSE
("GPL");

	@
1
.
0
56
1019
include/lddbus.h
lddbus/lddbus.c
misc-modules/complete.c
misc-modules/faulty.c
misc-modules/hello.c
misc-modules/hellop.c
misc-modules/jiq.c
misc-modules/jit.c
misc-modules/kdataalign.c
misc-modules/kdatasize.c
misc-modules/seq.c
misc-modules/silly.c
misc-modules/sleepy.c
misc-progs/asynctest.c
misc-progs/dataalign.c
misc-progs/datasize.c
misc-progs/inp.c
misc-progs/load50.c
misc-progs/mapcmp.c
misc-progs/mapper.c
misc-progs/nbtest.c
misc-progs/netifdebug.c
misc-progs/outp.c
misc-progs/polltest.c
misc-progs/setconsole.c
misc-progs/setlevel.c
pci/pci_skel.c
sbull/sbull.c
sbull/sbull.h
scull/access.c
scull/main.c
scull/pipe.c
scull/scull.h
scullc/main.c
scullc/mmap.c
scullc/scullc.h
sculld/main.c
sculld/mmap.c
sculld/sculld.h
scullp/main.c
scullp/mmap.c
scullp/scullp.h
scullv/main.c
scullv/mmap.c
scullv/scullv.h
short/short.c
shortprint/shortprint.c
shortprint/shortprint.h
simple/simple.c
skull/skull_clean.c
skull/skull_init.c
snull/snull.c
snull/snull.h
tty/tiny_serial.c
tty/tiny_tty.c
usb/usb-skeleton.c
