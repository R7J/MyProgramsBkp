# $Revision:  $ : Revision of last commit.
# $Author: Savari $   : Author of last commit



#  All arguments are taken from global variables

######################  STAT Test ######################

proc status1_test { } {

  global dutPromptStr dutSpawnId
  global testName

  logStartTest

  # Test Name to Execute
  set testName "status_1                "

  set ret_val [status_1 $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
        append res "Fail  \n\t\t\t\t\t"
  } else {
      append res "status test done  \n\t\t\t\t\t "
  }

  logEndTest

  return [list 0 $res]

}



######################  upload Test ######################

proc upload_test { } {

  global dutPromptStr dutSpawnId 
  global testName

  logStartTest

  # Test Name to Execute
  set testName "upLoad       "

  set ret_val [upLoad  $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
        append res "Fail [lindex $ret_val 1] \n\t\t\t\t\t"
  } else {
      append res "Pass upload count: [lindex $ret_val 2] \n\t\t\t\t\t "
  }

  logEndTest

  return [list 0 $res]

}


######################  WSA Test ######################

proc ipv6_test { } {

  global dutPromptStr dutSpawnId 
  global testName

logStartTest

#	set showAppVar		"WSA/IPV6"
#	set testName 		"ipv6_status"
#	append res "$testName\t"

#	set ret_val	[showAppStatus $showAppVar]
#	set status 	[lindex $ret_val 5]
#	set ret_val 	[checkDisabled $ret_val]
#	if {$ret_val != 0} {
#		append res "$showAppVar $status\n\t\t\t\t\t"
#	} else { 
#		append res  "$showAppVar $status\n\t\t\t\t\t"
#		}
		
		
  # Test Name to Execute
  set testName "WSA Transmission(ipv6)                "

  set ret_val [wsaTransmit $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
        append res "Fail [lindex $ret_val 1] \n\t\t\t\t\t"
  } else {
      append res "Pass Transmitted wsa packet count: [lindex $ret_val 2] \n\t\t\t\t\t "
  }

  logEndTest

  return [list 0 $res]

}



######################  bsm Test ######################

proc dsrcFwd_test { } {

  global dutPromptStr dutSpawnId
  global testName

  logStartTest

  # Test Name to Execute
  set testName "dsrcForward                "

  set ret_val [dsrcfwdTransmit $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
        append res "Fail [lindex $ret_val 1] \n\t\t\t\t\t"
  } else {
      append res "Pass Transmitted dsrcFwd packet count: [lindex $ret_val 2] \n\t\t\t\t\t "
  }

  logEndTest

  return [list 0 $res]

}

######################  TimApp Test ######################

proc timapp_test { } {

  global dutPromptStr dutSpawnId
  global testName

  logStartTest

#	set testName "tim_status"
#	set showAppVar "TIM"
#	append timres "$testName\t"	
#	set ret_val	[showAppStatus $showAppVar]
#	set status 	[lindex $ret_val 5]
#	puts "==status:$status==retVal:$ret_val=="
#	set ret_val 	[checkDisabled $ret_val]
	#set status 	[lindex $ret_val 5]	
	#set ret_val [checkNotRunning $ret_val]
#	puts "==disableRet:$ret_val=="
#	if {$ret_val != 0} {
#		append timres "$showAppVar $status\n\t\t\t\t\t"
		#logFail $testName $errStr
		#return [list 1 $errStr]
#	} else { 
#		append timres  "$showAppVar $status\n\t\t\t\t\t"
		#logPass $testName $retStr
#		}
	
#	append res $timres


  # Test Name to Execute
  set testName "timapp                "

  set ret_val [timTransmit $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
        append res "Fail [lindex $ret_val 1] \n\t\t\t\t\t"
  } else {
      append res "Pass Transmitted tim packet count: [lindex $ret_val 2] \n\t\t\t\t\t "
  }

  logEndTest

  return [list 0 $res]

}

######################  bsm Test ######################

proc bsm_test { } {

  global dutPromptStr dutSpawnId
  global testName

  logStartTest

#	set testName "bsm_status"
#	set showAppVar		"BSMFORWD"
#	append res "$testName\t"	

#	set ret_val	[showAppStatus $showAppVar]

#	set status 	[lindex $ret_val 5]

#	set ret_val 	[checkDisabled $ret_val]
#	if {$ret_val != 0} {
#		append res "$showAppVar $status\n\t\t\t\t\t"
#	} else { 
#		append res  "$showAppVar $status\n\t\t\t\t\t"
#		}


  # Test Name to Execute
  set testName "bsmForward                "

  set ret_val [bsmTransmit $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
        append res "Fail [lindex $ret_val 1] \n\t\t\t\t\t"
  } else {
      append res "Pass Transmitted bsm packet count: [lindex $ret_val 2] \n\t\t\t\t\t "
  }

  logEndTest

  return [list 0 $res]

}

######################  wsmpforward Test ######################

proc wsm_test { } {

  global dutPromptStr dutSpawnId
  global testName

 logStartTest

#	set testName 	"wsmp_status"

#	set showAppVar	"WSMPFORWD"
#	append retStr "$testName\t"	
	
#	set ret_val	[showAppStatus $showAppVar]
#
#	set status 	[lindex $ret_val 5]
#	set ret_val 	[checkDisabled $ret_val]
#	if {$ret_val != 0} {
#		append retStr "$showAppVar $status\n"
#	} else { 
#		append retStr  "$showAppVar $status\n"
#		}
	
#	append res $retStr


  # Test Name to Execute
  set testName "wsmpForward                "

  set ret_val [wsmpTransmit $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
        append res "Fail [lindex $ret_val 1] \n\t\t\t\t\t"
  } else {
      append res "Pass Transmitted wsmp packet count: [lindex $ret_val 2] \n\t\t\t\t\t "
  }

  logEndTest

  return [list 0 $res]

}

###############     BSM Test           ################

#proc bsm_test { } {

#  global dutPromptStr dutSpawnId  durPromptStr durSpawnId
#  global testName


#  logStartTest

  # Test Name to Execute
#  set testName "BSM Transmission                "

#  set ret_val [bsmTransmit $durSpawnId $dutSpawnId]
#  if { [lindex $ret_val 0] != 0 } {
#        append res "Fail [lindex $ret_val 1] \n\t\t\t\t\t"
#  } else {
#	set loss [expr [lindex $ret_val 3] - [lindex $ret_val 2]]
#	set loss1 [ expr $loss * 100 / [lindex $ret_val 3] ]
#	puts "$loss1"
#      append res "Pass Transmitted bsm packet count: [lindex $ret_val 3] \n\t\t\t\t\t     Received bsm packet count:    [lindex $ret_val 2] \n\t\t\t\t\t     Packet Loss Percentage is:    [ expr ([lindex $ret_val 3] - [lindex $ret_val 2]) * 100 / [lindex $ret_val 3] ]%"
#  }

#  logEndTest

#  return [list 0 $res]

#}



################     WSM Test           ################

#proc wsm_test { } {

#  global dutPromptStr dutSpawnId  durPromptStr durSpawnId
#  global testName

#  logStartTest

  # Test Name to Execute
#  set testName "WSM Transmission                "

#  set ret_val [wsmTransmit $durSpawnId $dutSpawnId]
#  if { [lindex $ret_val 0] != 0 } {
#        append res "Fail [lindex $ret_val 1] \n\t\t\t\t\t"
#  } else {
#       set loss [expr [lindex $ret_val 3] - [lindex $ret_val 2]]
#       set loss1 [ expr $loss * 100 / [lindex $ret_val 3] ]
#       puts "$loss1"
#      append res "Pass Transmitted wsm packet count: [lindex $ret_val 3] \n\t\t\t\t\t     Received wsm packet count:    [lindex $ret_val 2] \n\t\t\t\t\t     Packet Loss Percentage is:    [ expr ([lindex $ret_val 3] - [lindex $ret_val 2]) * 100 / [lindex $ret_val 3] ]%"
#  }

#  logEndTest

#  return [list 0 $res]

#}

#  All arguments are taken from global variables

################     Firmware Upgrade Test           ################

proc firmwareUpgrade_test { } {

    global BoxIp durBoxIp iperfTimeSecs testName pingNumPkts
    global dutSpawnId durSpawnId dutBoxMacIntfName logFileLocation preImageFile
    global durPromptStr dutPromptStr  expEthernetSpeedMbits scpRemoteIp username localHostPassword
    logStartTest
    set testName "Firmware upgrade                 "
    set ret_val [fwUpgrade  $scpRemoteIp $username $localHostPassword $dutSpawnId $dutPromptStr $dutSpawnId $dutPromptStr $logFileLocation/$preImageFile 1] 
#     if { [lindex $ret_val 0] != 0 } {
#         logTestFail [lindex $ret_val 1]
#         return $ret_val
#     } else {
#     puts "Firmware Upgrade Successful"
#     logTestOk  [lindex $ret_val 1]
#     }
     if { [lindex $ret_val 0] != 0 } {
       append upgraderes "FAIL([lindex $ret_val 1]) \n\t\t\t\t\t"
     } else {
       append upgraderes "Pass \n\t\t\t\t\t"
     }

   logEndTest

   return [list 0 $upgraderes]
}


###############      GPS test       ##############################

proc gps_test { } {

  global dutPromptStr dutSpawnId testName

  logStartTest

  # Test Name to Execute
 puts "\n" 
 set testName "GPS Test				"

  set ret_val [gps_check_fix $dutPromptStr $dutSpawnId]
   if { [lindex $ret_val 0] != 0 } {
       append gpsRes "Fail([lindex $ret_val 1]) \n\t\t\t\t\t"
    } else {
       append gpsRes "Pass([lindex $ret_val 1]) \n\t\t\t\t\t"
  }

  logEndTest

  return [list 0 $gpsRes]

}


################    PPS Test       ####################

proc pps_test { } {

  global dutPromptStr dutSpawnId testName 
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "PPS Test				"

  logStartTest

  set ret_val [pps_check_fix $dutPromptStr $dutSpawnId]
   if { [lindex $ret_val 0] != 0 } {
       append ppsRes "Fail([lindex $ret_val 1]) \n\t\t\t\t\t"
    } else {
       append ppsRes "Pass \n\t\t\t\t\t"
  }
  
  logEndTest

  return [list 0 $ppsRes]

}
################    lanconfig test ####################

proc lanipaddrchange_test { } {

  global dutPromptStr dutSpawnId testName ndutBoxIp
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "Lanipaddrchange Test                            "

  logStartTest

  set ret_val [lanconfig_set $dutPromptStr $dutSpawnId $ndutBoxIp]
  if { [lindex $ret_val 0] != 0 } {
       append confres "FAIL([lindex $ret_val 1]) \n\t\t\t\t\t"
    } else {
       append confres "Pass ([lindex $ret_val 2])\n\t\t\t\t\t"
    }

  logEndTest

  return [list 0 $confres]

}

################    System test    ####################

proc system_test { } {

  global dutPromptStr dutSpawnId testName spawn_id 
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "SYSTEM TEST(Memory,cpu,nojournal)                             "

  logStartTest
  set ret_val [ scpFile $scpRemoteIp $scpRemoteUsername $localHostPassword $scpRemoteFileName $dutSpawnId $dutPromptStr $scpFileName $copyOut $scpRemoteFilePath ]
    if { [lindex $ret_val 0] != 0 } {
        logTestFail [lindex $ret_val 1]
        return $ret_val
    } else {
        logTestOk  [lindex $ret_val 1]
    }
  set ret_val [system_check $dutPromptStr $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
       append sysRes "FAIL([lindex $ret_val 1]) \n\t\t\t\t\t"
    } else {
       append sysRes "\t\t\t\t\t [lindex $ret_val 1]"
  }

  logEndTest
#string trim $sysRes "/usr/local/bin/usage" 
return [list 0 $sysRes]

}

############################### dsrcproxy test ##################
proc dsrcproxy_test { } {

  global dutPromptStr dutSpawnId testName durPromptStr durSpawnId
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  logStartTest

#	set testName			"Dsrcproxy_test"	
#	set showAppVarList		[list "SPAT" "MAP"]
			
#	append retStr "$testName:\n\t\t\t\t\t\t\t\t"	
	
#	foreach showAppVar $showAppVarList {	
#		set ret_val	[showAppStatus $showAppVar ]
#		set status($showAppVar) 	[lindex $ret_val 5]
#		set ret_val 	[checkDisabled $ret_val]
#		if {$ret_val != 0} {
#			append retStr "$showAppVar $status($showAppVar)\n\t\t\t\t\t\t\t\t"
#		} else { 
#			append retStr  "$showAppVar $status($showAppVar)\n\t\t\t\t\t\t\t\t"
#			}
#	}	

#	append proxyres $retStr 

  set testName "Dsrcproxy TEST                             "
  set ret_val [dsrcproxy_check $dutPromptStr $dutSpawnId $durPromptStr $durSpawnId]
  if { [lindex $ret_val 0] != 0 } {
       append proxyres "FAIL([lindex $ret_val 1]) \n\t\t\t\t\t"
    } else {
#       puts "[lindex $ret_val 1]"
#         set res [lindex $ret_val 1]
#         set rsetrans "[lindex $res 33]"
#         puts "$rsetrans"
#        puts "[lindex $res 50]"
#puts "[lindex $res 42]"
#       puts "[lindex $res 46]"
#      puts "[lindex $res 68]"
#     puts "[lindex $res 60]"
#    puts "[lindex $res 64]"
#         set asdreceiv [expr "[lindex $res 52]" + "[lindex $res 44]" + "[lindex $res 48]" + "[lindex $res 70]" + "[lindex $res 62]" + "[lindex $res 66]" ]
#         puts "$asdreceiv"
#	set diff [ expr "$rsetrans" - "$asdreceiv" ]
#        set percent [ expr "$diff" * 100 / "$rsetrans" ]
 	append proxyres "No.of SpatMap packets transmitted is:[lindex $ret_val 2]\n\t\t\t\t\t" 
        append proxyres "Pass \n"
  }

  logEndTest
  return [list 0 $proxyres]

}

###### pscommand status ########################

proc pscommand_test { } {

  global dutPromptStr dutSpawnId testName
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "PScommand TEST                             "

  logStartTest

  set ret_val [pscommand_check $dutPromptStr $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
       append res "FAIL \n\t\t\t\t\t"
    } else {
       append res "Pass \n\t\t\t\t\t"
  }

  logEndTest
  return [list 0 $res]

}

###### pscommand status ########################

proc haltrun_test { } {

  global dutPromptStr dutSpawnId testName
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "HaltRun TEST                             "

  logStartTest

  set ret_val [haltrun_check $dutPromptStr $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
       append res "FAIL \n\t\t\t\t\t"
    } else {
       append res "Pass \n\t\t\t\t\t"
  }

  logEndTest
  return [list 0 $res]

}

###### lookupscript status ########################

proc lookup_test { } {

  global dutPromptStr dutSpawnId testName
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "Lookup TEST                             "

  logStartTest

  set ret_val [lookup_check $dutPromptStr $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
       append res "FAIL [lindex $ret_val 1] \n\t\t\t\t\t"
    } else {
       append res "Pass \n\t\t\t\t\t "
  }

  logEndTest
  return [list 0 $res]

}

###############    Monitord status     ########################

proc monitord_test { } {

  global dutPromptStr dutSpawnId testName
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "Monitord TEST                             "

  logStartTest

  set ret_val [monitord_check $dutPromptStr $dutSpawnId]
  if { [lindex $ret_val 0] != 0 } {
       append monitorres "FAIL([lindex $ret_val 1]) \n\t\t\t\t\t"
    } else {
       append monitorres "Pass \n\t\t\t\t\t [lindex $ret_val 1]"
  }

  logEndTest
  return [list 0 $monitorres]

}


###############    Channel test     ########################

proc channel_test { } {

  global dutPromptStr dutSpawnId testName
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "Channel Test                             "

  logStartTest

#  set ret_val [ scpFile $scpRemoteIp $scpRemoteUsername $localHostPassword $scpRemoteFileName $dutSpawnId $dutPromptStr $scpFileName $copyOut $scpRemoteFilePath ]
#    if { [lindex $ret_val 0] != 0 } {
#        logTestFail [lindex $ret_val 1]
#        return $ret_val
#    } else {
#        logTestOk  [lindex $ret_val 1]
#    }

   set chanlist [list 172 174 176 300 180]
   foreach chanNo $chanlist {
    set ret_val [channel_set $dutPromptStr $dutSpawnId $chanNo]
    if { [lindex $ret_val 0] != 0 } {
       append channelTestRes "Fail Channel \"[lindex $ret_val 1]\" \n\t\t\t\t\t"
    } else {
       append channelTestRes "Pass Channel \"[lindex $ret_val 1]\" \n\t\t\t\t\t"
  }
}
  logEndTest
  return [list 0 $channelTestRes]
}

###############      Datarate set  #####################

proc datarate_test { } {

  global dutPromptStr dutSpawnId testName
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "Datarate Test                             "

  logStartTest
  set datarate [list 3 6 10000 27 54]
  foreach data $datarate {
  set ret_val [datarate_set $dutPromptStr $dutSpawnId $data]
  if { [lindex $ret_val 0] != 0 } {
     append datarateres "Fail datarate \"[lindex $ret_val 1]\" \n\t\t\t\t\t"
    } else {
       append datarateres "Pass datarate \"[lindex $ret_val 1]\" \n\t\t\t\t\t"
  }
}

  logEndTest

  return [list 0 $datarateres]

}

###############      Txpower set   #####################

proc txpower_test { } {

  global dutPromptStr dutSpawnId testName
  global scpRemoteIp scpRemoteUsername localHostPassword scpRemoteFileName scpFileName copyOut scpRemoteFilePath

  set testName "Txpower Test                             "

  logStartTest
  set txpower [list 0 788888888 15 22 33]
  foreach txpow $txpower {
  set ret_val [txpower_set $dutPromptStr $dutSpawnId $txpow]
  if { [lindex $ret_val 0] != 0 } {
     append txpowerres "Fail txpower \"[lindex $ret_val 1]\" \n\t\t\t\t\t"
    } else {
       append txpowerres "Pass txpower \"[lindex $ret_val 1]\" \n\t\t\t\t\t"
  }
}

  logEndTest
  return [list 0 $txpowerres]

}

################     USB test      #####################

proc usb_test { } {

  global dutPromptStr dutSpawnId testName 
  set testName "USB				"

  logStartTest

  set ret_val [usb_check_fix $dutPromptStr $dutSpawnId]
 puts "[lindex $ret_val 0] " 
 if { [lindex $ret_val 0] != 0 } {
	append res "Fail\n\t\t\t\t\t"
    } else {
	append res "Pass\n\t\t\t\t\t"
    }
  logEndTest

  return [list 0 $res]

}

############   DSRC Iperf test    #######################

proc dsrc_test { } {
    global dutDsrcIp durDsrcIp dsrcChan iperfTimeSecs testName pingNumPkts iperfTransferSpeed
    global dutSpawnId durSpawnId dsrcIntfName
    global durPromptStr dutPromptStr  expDsrcNoChanSwitchPerfSpeedMbits dsrcEssid
    set testName "DSRC-Iperf Test				"
    logStartTest 

#    set ret_val [pingTest $dsrcIntfName $dsrcIntfName $dsrcChan $dsrcEssid $pingNumPkts $durDsrcIp $dutDsrcIp $durSpawnId $dutSpawnId]
#    puts "$ret_val"
#    if { [lindex $ret_val 0] != 0 } {
#    logTestFail [lindex $ret_val 1]
#    return $ret_val
#    } else {
#    logTestOk  [lindex $ret_val 1]
#}

    set ret_val [iperfTest $dsrcIntfName $dsrcIntfName $dsrcChan $iperfTransferSpeed $iperfTimeSecs $expDsrcNoChanSwitchPerfSpeedMbits $durDsrcIp $dutDsrcIp $durSpawnId $dutSpawnId]
 if { [lindex $ret_val 0] != 0 } {
     append iperfres "Fail([lindex $ret_val 1]) \n\t\t\t\t\t"
    } else {
       append iperfres "Pass throughput dut->ref:([lindex $ret_val 2]) \n\t\t\t\t\t"
  }

    logEndTest

    return [list 0 $iperfres]
}

############   Ethernet test    #######################

proc ethernet_test { } {
    global dutBoxIp durBoxIp iperfTimeSecs testName pingNumPkts
    global dutSpawnId durSpawnId dutBoxMacIntfName 
    global durPromptStr dutPromptStr  expEthernetSpeedMbits 
    set testName "Ethernet-Iperf Test			"
    logStartTest 

    set ret_val [eth_pingTest $dutBoxMacIntfName $pingNumPkts $durBoxIp $dutBoxIp $durSpawnId $dutSpawnId]
    set ret_val [eth_iperfTest $dutBoxMacIntfName $dutBoxMacIntfName "100" $iperfTimeSecs $expEthernetSpeedMbits $dutBoxIp $durBoxIp $durSpawnId $dutSpawnId]
 if { [lindex $ret_val 0] != 0 } {
     append pingres "Fail([lindex $ret_val 1]) \n\t\t\t\t\t"
    } else {
       append pingres "Pass throughput dut->ref:([lindex $ret_val 2]) \n\t\t\t\t\t"
  }

   logEndTest
   
   return [list 0 $pingres]
}


